{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 historical events with BM25 keyword scoring to 'World War II' in the event name, and show the event name, description, year, significant impact, and the involved countries' names and populations.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HistoricalEvent(\n      bm25: {\n        query: \"World War II\",\n        properties: [\"eventName\"]\n      },\n      limit: 5\n    ) {\n      eventName\n      description\n      year\n      hadSignificantImpact\n      involvedCountries {\n        ... on Country {\n          countryName\n          population\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 historical events with BM25 keyword scoring to 'World War II' in the event name, and show the event name, description, year, significant impact, and the involved countries' names and populations.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 TV series with BM25 keyword scoring to 'drama' in the title, and show the title, synopsis, on-air status, and the names of the actors.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TVSeries(\n      bm25: {\n        query: \"drama\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      synopsis\n      isOnAir\n      hasActor {\n        ... on Actor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 TV series with BM25 keyword scoring to 'drama' in the title, and show the title, synopsis, on-air status, and the names of the actors.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 workouts with BM25 keyword scoring to 'cardio' in the name, and show the name, description, duration, whether it is a group workout, and the equipment name and quantity used.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Workout(\n      bm25: {\n        query: \"cardio\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      duration\n      isGroup\n      usesEquipment {\n        ... on Equipment {\n          name\n          quantity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 workouts with BM25 keyword scoring to 'cardio' in the name, and show the name, description, duration, whether it is a group workout, and the equipment name and quantity used.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 songs with BM25 keyword scoring to 'love' in the title, and show the title, lyrics, duration, explicitness, and the album's title and release year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Song(\n      bm25: {\n        query: \"love\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      lyrics\n      duration\n      isExplicit\n      inAlbum {\n        ... on Album {\n          title\n          releaseYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 songs with BM25 keyword scoring to 'love' in the title, and show the title, lyrics, duration, explicitness, and the album's title and release year.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 plants with BM25 keyword scoring to 'rose' in the species, and show the species, care instructions, height, flowering status, and the name of the gardener who planted them.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      bm25: {\n        query: \"rose\",\n        properties: [\"species\"]\n      },\n      limit: 3\n    ) {\n      species\n      careInstructions\n      height\n      isFlowering\n      plantedBy {\n        ... on Gardener {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 plants with BM25 keyword scoring to 'rose' in the species, and show the species, care instructions, height, flowering status, and the name of the gardener who planted them.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 recipes with BM25 keyword scoring to 'pasta' in the title, and show the title, instructions, preparation time, vegetarian status, and the names and calories of the ingredients used.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Recipe(\n      bm25: {\n        query: \"pasta\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      instructions\n      prepTime\n      isVegetarian\n      usesIngredient {\n        ... on Ingredient {\n          name\n          calories\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 recipes with BM25 keyword scoring to 'pasta' in the title, and show the title, instructions, preparation time, vegetarian status, and the names and calories of the ingredients used.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 destinations with BM25 keyword scoring to 'beach' in the name, and show the name, description, average temperature, popularity, and the names of the travelers who have visited.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Destination(\n      bm25: {\n        query: \"beach\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      averageTemperature\n      isPopular\n      visitedBy {\n        ... on Traveler {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 destinations with BM25 keyword scoring to 'beach' in the name, and show the name, description, average temperature, popularity, and the names of the travelers who have visited.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 aquariums with BM25 keyword scoring to 'coral reef' in the name, and show the name, location, water volume, presence of marine fish, caretaker's name, and years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Aquarium(\n      bm25: {\n        query: \"coral reef\",\n        properties: [\"name\"]\n      },\n      limit: 3\n    ) {\n      name\n      location\n      waterVolume\n      hasMarineFish\n      caretaker {\n        ... on Aquarist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 aquariums with BM25 keyword scoring to 'coral reef' in the name, and show the name, location, water volume, presence of marine fish, caretaker's name, and years of experience.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 yoga poses with BM25 keyword scoring to 'warrior' in the name, and show the name, description, complexity level, whether it is for beginners, and the yoga style's name, origin, and popularity.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    YogaPose(\n      bm25: {\n        query: \"warrior\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      complexityLevel\n      isForBeginners\n      fromYogaStyle {\n        ... on YogaStyle {\n          styleName\n          origin\n          popularity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 yoga poses with BM25 keyword scoring to 'warrior' in the name, and show the name, description, complexity level, whether it is for beginners, and the yoga style's name, origin, and popularity.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 instruments with BM25 keyword scoring to 'guitar' in the name, and show the name, description, year introduced, whether it is a string instrument, and the musician's name, genre, and years active.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Instrument(\n      bm25: {\n        query: \"guitar\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      yearIntroduced\n      isString\n      playedBy {\n        ... on Musician {\n          name\n          genre\n          yearsActive\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 instruments with BM25 keyword scoring to 'guitar' in the name, and show the name, description, year introduced, whether it is a string instrument, and the musician's name, genre, and years active.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 board games with BM25 keyword scoring to 'strategy' in the name, and show the name, rules, minimum number of players, whether it is cooperative, and the name, biography, and years active of the game designer.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BoardGame(\n      bm25: {\n        query: \"strategy\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      rules\n      minPlayers\n      isCooperative\n      createdBy {\n        ... on GameDesigner {\n          name\n          biography\n          yearsActive\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 board games with BM25 keyword scoring to 'strategy' in the name, and show the name, rules, minimum number of players, whether it is cooperative, and the name, biography, and years active of the game designer.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 weather stations with BM25 keyword scoring to 'temperature' in the location, and show the location, equipment, altitude, activity status, and the name and years of experience of the meteorologist managing them.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeatherStation(\n      bm25: {\n        query: \"temperature\",\n        properties: [\"location\"]\n      },\n      limit: 3\n    ) {\n      location\n      equipment\n      altitude\n      isActive\n      managedBy {\n        ... on Meteorologist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 weather stations with BM25 keyword scoring to 'temperature' in the location, and show the location, equipment, altitude, activity status, and the name and years of experience of the meteorologist managing them.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 movies with BM25 keyword scoring to 'action' in the title, and show the title, genre, duration, availability, and lead actor's name and awards won.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Movie(\n      bm25: {\n        query: \"action\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      genre\n      duration\n      isAvailable\n      leadActor {\n        ... on Actor {\n          name\n          awardsWon\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 movies with BM25 keyword scoring to 'action' in the title, and show the title, genre, duration, availability, and lead actor's name and awards won.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 AI models with BM25 keyword scoring to 'classification' in the modelName, and show the modelName, application, accuracy, isSupervised, and basedOn algorithm's name, description, and yearDeveloped.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    AIModel(\n      bm25: {\n        query: \"classification\",\n        properties: [\"modelName\"]\n      },\n      limit: 10\n    ) {\n      modelName\n      application\n      accuracy\n      isSupervised\n      basedOn {\n        ... on Algorithm {\n          name\n          description\n          yearDeveloped\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 AI models with BM25 keyword scoring to 'classification' in the modelName, and show the modelName, application, accuracy, isSupervised, and basedOn algorithm's name, description, and yearDeveloped.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 cars with BM25 keyword scoring to 'SUV' in the make or model, and show the make, model, year, availability, and the name and age of the customer who rented it.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      bm25: {\n        query: \"SUV\",\n        properties: [\"make\", \"model\"]\n      },\n      limit: 5\n    ) {\n      make\n      model\n      year\n      isAvailable\n      rentedBy {\n        ... on Customer {\n          name\n          age\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 cars with BM25 keyword scoring to 'SUV' in the make or model, and show the make, model, year, availability, and the name and age of the customer who rented it.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 legal cases with BM25 keyword scoring to 'criminal' in the case title, and show the case title, case summary, year, ongoing status, and involved party's name, role, and number of cases.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase(\n      bm25: {\n        query: \"criminal\",\n        properties: [\"caseTitle\"]\n      },\n      limit: 5\n    ) {\n      caseTitle\n      caseSummary\n      year\n      isOngoing\n      involvedParty {\n        ... on Party {\n          name\n          role\n          numberOfCases\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 legal cases with BM25 keyword scoring to 'criminal' in the case title, and show the case title, case summary, year, ongoing status, and involved party's name, role, and number of cases.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 smart devices with BM25 keyword scoring to 'smart speaker' in the device name, and show the device name, features, price, wireless capability, and manufacturer's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SmartDevice(\n      bm25: {\n        query: \"smart speaker\",\n        properties: [\"deviceName\"]\n      },\n      limit: 5\n    ) {\n      deviceName\n      features\n      price\n      isWireless\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 smart devices with BM25 keyword scoring to 'smart speaker' in the device name, and show the device name, features, price, wireless capability, and manufacturer's name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 outdoor gears with BM25 keyword scoring to 'backpack' in the gear name, and show the gear name, description, weight, waterproof status, and supplier's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OutdoorGear(\n      bm25: {\n        query: \"backpack\",\n        properties: [\"gearName\"]\n      },\n      limit: 5\n    ) {\n      gearName\n      description\n      weight\n      isWaterproof\n      supplier {\n        ... on Supplier {\n          supplierName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 outdoor gears with BM25 keyword scoring to 'backpack' in the gear name, and show the gear name, description, weight, waterproof status, and supplier's name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 restaurants with BM25 keyword scoring to 'Italian' in the name, and show the name, cuisine, seating capacity, Michelin star status, and the head chef's name, specialty, and years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Restaurant(\n      bm25: {\n        query: \"Italian\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      cuisine\n      seatingCapacity\n      hasMichelinStar\n      headChef {\n        ... on Chef {\n          name\n          specialty\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 restaurants with BM25 keyword scoring to 'Italian' in the name, and show the name, cuisine, seating capacity, Michelin star status, and the head chef's name, specialty, and years of experience.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 posts with BM25 keyword scoring to 'technology' in the content, and show the content, hashtags, number of likes, whether it is public, and the comments' text and number of likes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Post(\n      bm25: {\n        query: \"technology\",\n        properties: [\"content\"]\n      },\n      limit: 10\n    ) {\n      content\n      hashtags\n      likes\n      isPublic\n      comments {\n        ... on Comment {\n          text\n          likes\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 posts with BM25 keyword scoring to 'technology' in the content, and show the content, hashtags, number of likes, whether it is public, and the comments' text and number of likes.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 animals with BM25 keyword scoring to 'cat' in the name, and show the name, species, age, adoption status, and the name of the adopter.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Animal(\n      bm25: {\n        query: \"cat\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      species\n      age\n      isAdopted\n      adoptedBy {\n        ... on Adopter {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 animals with BM25 keyword scoring to 'cat' in the name, and show the name, species, age, adoption status, and the name of the adopter.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 fashion brands with BM25 keyword scoring to 'luxury' in the name, and show the name, description, founding year, luxury status, and designer's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FashionBrand(\n      bm25: {\n        query: \"luxury\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      foundingYear\n      isLuxury\n      designedBy {\n        ... on Designer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 fashion brands with BM25 keyword scoring to 'luxury' in the name, and show the name, description, founding year, luxury status, and designer's name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 code repositories with BM25 keyword scoring to 'machine learning' in the description, and show the repository name, description, number of stars, whether it is a fork, and the username, real name, and contributions of the maintainers.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CodeRepository(\n      bm25: {\n        query: \"machine learning\",\n        properties: [\"description\"]\n      },\n      limit: 10\n    ) {\n      repositoryName\n      description\n      stars\n      isFork\n      maintainedBy {\n        ... on Developer {\n          username\n          realName\n          contributions\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 code repositories with BM25 keyword scoring to 'machine learning' in the description, and show the repository name, description, number of stars, whether it is a fork, and the username, real name, and contributions of the maintainers.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 wines with BM25 keyword scoring to 'chardonnay' in the name, and show the name, origin, grape variety, tasting notes, vintage year, whether it is red, and the related winery's name, location, and founded year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine(\n      bm25: {\n        query: \"chardonnay\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      origin\n      grapeVariety\n      tastingNotes\n      vintageYear\n      isRed\n      relatedWinery {\n        ... on Winery {\n          name\n          location\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 wines with BM25 keyword scoring to 'chardonnay' in the name, and show the name, origin, grape variety, tasting notes, vintage year, whether it is red, and the related winery's name, location, and founded year.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 patients with BM25 keyword scoring to 'cancer' in the diagnosis, and show their name, diagnosis, age, insurance status, and primary doctor's name and experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Patient(\n      bm25: {\n        query: \"cancer\",\n        properties: [\"diagnosis\"]\n      },\n      limit: 10\n    ) {\n      name\n      diagnosis\n      age\n      isInsured\n      primaryDoctor {\n        ... on Doctor {\n          name\n          experience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 patients with BM25 keyword scoring to 'cancer' in the diagnosis, and show their name, diagnosis, age, insurance status, and primary doctor's name and experience.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 telescopes with BM25 keyword scoring to 'astronomy' in the model, and show the model, manufacturer, magnification, usage status, and the name and years of experience of the astronomers operating them.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Telescope(\n      bm25: {\n        query: \"astronomy\",\n        properties: [\"model\"]\n      },\n      limit: 5\n    ) {\n      model\n      manufacturer\n      magnification\n      isInUse\n      operatedBy {\n        ... on Astronomer {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 telescopes with BM25 keyword scoring to 'astronomy' in the model, and show the model, manufacturer, magnification, usage status, and the name and years of experience of the astronomers operating them.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 products related to electronics with BM25 keyword scoring to 'electronics' in the name or description. Show the name, description, price, availability, and customer reviews with their content and rating.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      bm25: {\n        query: \"electronics\",\n        properties: [\"name\", \"description\"]\n      },\n      limit: 10\n    ) {\n      name\n      description\n      price\n      inStock\n      hasReview {\n        ... on Review {\n          content\n          rating\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 products related to electronics with BM25 keyword scoring to 'electronics' in the name or description. Show the name, description, price, availability, and customer reviews with their content and rating.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 startups with BM25 keyword scoring to 'technology' in the name, and show the name, product, funding, bootstrapping status, and founder's name, biography, and successful startups.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Startup(\n      bm25: {\n        query: \"technology\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      product\n      funding\n      isBootstrapped\n      founders {\n        ... on Entrepreneur {\n          name\n          biography\n          successfulStartups\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 startups with BM25 keyword scoring to 'technology' in the name, and show the name, product, funding, bootstrapping status, and founder's name, biography, and successful startups.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 events with BM25 keyword scoring to 'music' in the title, and show the title, description, start time, virtual status, and venue's name and capacity.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Event(\n      bm25: {\n        query: \"music\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      description\n      startTime\n      isVirtual\n      atVenue {\n        ... on Venue {\n          name\n          capacity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 events with BM25 keyword scoring to 'music' in the title, and show the title, description, start time, virtual status, and venue's name and capacity.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 news outlets with BM25 keyword scoring to 'breaking news' in the name, and show the name, founding year, online status, and journalist's name and years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NewsOutlet(\n      bm25: {\n        query: \"breaking news\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      foundingYear\n      isOnline\n      hasJournalist {\n        ... on Journalist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 news outlets with BM25 keyword scoring to 'breaking news' in the name, and show the name, founding year, online status, and journalist's name and years of experience.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 games with BM25 keyword scoring to 'action' in the title, and show the title, genre, rating, multiplayer availability, and developer's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Game(\n      bm25: {\n        query: \"action\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      genre\n      rating\n      isMultiplayer\n      developedBy {\n        ... on Developer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 games with BM25 keyword scoring to 'action' in the title, and show the title, genre, rating, multiplayer availability, and developer's name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 artworks with BM25 keyword scoring to 'abstract' in the title, and show the title, medium, year created, availability, and artist's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Artwork(\n      bm25: {\n        query: \"abstract\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      medium\n      yearCreated\n      isSold\n      createdBy {\n        ... on Artist {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 artworks with BM25 keyword scoring to 'abstract' in the title, and show the title, medium, year created, availability, and artist's name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 cars with BM25 keyword scoring to 'repair' in the make, and show the make, model, year, repair status, and owner's name and number of owned cars.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      bm25: {\n        query: \"repair\",\n        properties: [\"make\"]\n      },\n      limit: 5\n    ) {\n      make\n      model\n      year\n      isRepaired\n      ownedBy {\n        ... on Owner {\n          name\n          ownedCars\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 cars with BM25 keyword scoring to 'repair' in the make, and show the make, model, year, repair status, and owner's name and number of owned cars.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 contacts with BM25 keyword scoring to 'John' in the full name, and show the full name, email, phone, lead status, and associated company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Contact(\n      bm25: {\n        query: \"John\",\n        properties: [\"fullName\"]\n      },\n      limit: 5\n    ) {\n      fullName\n      email\n      phone\n      isLead\n      associatedCompany {\n        ... on Company {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 contacts with BM25 keyword scoring to 'John' in the full name, and show the full name, email, phone, lead status, and associated company name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 airlines with BM25 keyword scoring to 'United' in the name, and show the name, hub airport, fleet size, international status, and flight number with duration.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Airline(\n      bm25: {\n        query: \"United\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      hubAirport\n      fleetSize\n      isInternational\n      operatesFlight {\n        ... on Flight {\n          flightNumber\n          duration\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 airlines with BM25 keyword scoring to 'United' in the name, and show the name, hub airport, fleet size, international status, and flight number with duration.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 books with BM25 keyword scoring to 'science fiction' in the title, and show the title, summary, availability, and author's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Book(\n      bm25: {\n        query: \"science fiction\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      summary\n      isAvailable\n      author {\n        ... on Author {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 books with BM25 keyword scoring to 'science fiction' in the title, and show the title, summary, availability, and author's name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 cryptocurrencies with BM25 keyword scoring to 'Bitcoin' in the name, and show the name, symbol, market cap, stability, and exchange details including name, country, and founded year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Cryptocurrency(\n      bm25: {\n        query: \"Bitcoin\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      symbol\n      marketCap\n      isStableCoin\n      onExchange {\n        ... on Exchange {\n          name\n          country\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 cryptocurrencies with BM25 keyword scoring to 'Bitcoin' in the name, and show the name, symbol, market cap, stability, and exchange details including name, country, and founded year.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 employees who are software engineers based on their job title. Show their name, job title, salary, remote work availability, and the projects they are currently working on including the project name and budget.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Employee(\n      bm25: {\n        query: \"software engineer\",\n        properties: [\"jobTitle\"]\n      },\n      limit: 5\n    ) {\n      name\n      jobTitle\n      salary\n      isRemote\n      worksOn {\n        ... on Project {\n          name\n          budget\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 employees who are software engineers based on their job title. Show their name, job title, salary, remote work availability, and the projects they are currently working on including the project name and budget.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 products with BM25 keyword scoring to 'organic' in the name, and show the name, description, price, organic status, and category name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      bm25: {\n        query: \"organic\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      price\n      isOrganic\n      category {\n        ... on Category {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 products with BM25 keyword scoring to 'organic' in the name, and show the name, description, price, organic status, and category name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 museums with BM25 keyword scoring to 'art' in the name, and show the name, location, founding year, and information about their exhibits including the title, description, and year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Museum(\n      bm25: {\n        query: \"art\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      location\n      foundingYear\n      isPublic\n      hasExhibit {\n        ... on Exhibit {\n          title\n          description\n          year\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 museums with BM25 keyword scoring to 'art' in the name, and show the name, location, founding year, and information about their exhibits including the title, description, and year.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 teams with BM25 keyword scoring to 'football' in the name, and show the name, city, number of wins, champion status, and the name of the league they belong to.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team(\n      bm25: {\n        query: \"football\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      city\n      wins\n      isChampion\n      inLeague {\n        ... on League {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 teams with BM25 keyword scoring to 'football' in the name, and show the name, city, number of wins, champion status, and the name of the league they belong to.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 coffee shops with BM25 keyword scoring to 'latte' in the menu, and show the name, menu, year founded, franchise status, and the neighborhood's name, description, and average rent.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CoffeeShop(\n      bm25: {\n        query: \"latte\",\n        properties: [\"menu\"]\n      },\n      limit: 5\n    ) {\n      name\n      menu\n      yearFounded\n      isFranchise\n      locatedIn {\n        ... on Neighborhood {\n          name\n          description\n          averageRent\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 coffee shops with BM25 keyword scoring to 'latte' in the menu, and show the name, menu, year founded, franchise status, and the neighborhood's name, description, and average rent.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 houses with BM25 keyword scoring to '3 bedrooms' in the description, and show the address, description, price, availability, and the name and experience of the agent who listed them.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    House(\n      bm25: {\n        query: \"3 bedrooms\",\n        properties: [\"description\"]\n      },\n      limit: 5\n    ) {\n      address\n      description\n      price\n      isSold\n      listedBy {\n        ... on Agent {\n          name\n          experience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 houses with BM25 keyword scoring to '3 bedrooms' in the description, and show the address, description, price, availability, and the name and experience of the agent who listed them.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 diet plans with BM25 keyword scoring to 'weight loss' in the name, and show the name, description, duration in days, vegetarian status, and the food items it contains with their respective names and calorie counts.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DietPlan(\n      bm25: {\n        query: \"weight loss\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      durationDays\n      isVegetarian\n      contains {\n        ... on FoodItem {\n          itemName\n          calories\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 diet plans with BM25 keyword scoring to 'weight loss' in the name, and show the name, description, duration in days, vegetarian status, and the food items it contains with their respective names and calorie counts.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 craft beers with BM25 keyword scoring to 'IPA' in the beer name, and show the beer name, tasting notes, alcohol content, seasonal availability, brewery name, and founded year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CraftBeer(\n      bm25: {\n        query: \"IPA\",\n        properties: [\"beerName\"]\n      },\n      limit: 5\n    ) {\n      beerName\n      tastingNotes\n      alcoholContent\n      isSeasonal\n      brewery {\n        ... on Brewery {\n          breweryName\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 craft beers with BM25 keyword scoring to 'IPA' in the beer name, and show the beer name, tasting notes, alcohol content, seasonal availability, brewery name, and founded year.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 spas with BM25 keyword scoring to 'massage' in the services, and show the name, services, average rating, availability, and location details including name, description, and latitude.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Spa(\n      bm25: {\n        query: \"massage\",\n        properties: [\"services\"]\n      },\n      limit: 3\n    ) {\n      name\n      services\n      averageRating\n      isOpen\n      locatedIn {\n        ... on Location {\n          name\n          description\n          latitude\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 spas with BM25 keyword scoring to 'massage' in the services, and show the name, services, average rating, availability, and location details including name, description, and latitude.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 courses with BM25 keyword scoring to 'programming' in the title, and show the title, description, price, availability, and instructor's name and years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Course(\n      bm25: {\n        query: \"programming\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      description\n      price\n      isFree\n      taughtBy {\n        ... on Instructor {\n          name\n          yearsOfExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 courses with BM25 keyword scoring to 'programming' in the title, and show the title, description, price, availability, and instructor's name and years of experience.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 papers with BM25 keyword scoring to 'machine learning' in the title, and show the title, abstract, year published, whether it is peer-reviewed, and the name and year of the conference it was presented at.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Paper(\n      bm25: {\n        query: \"machine learning\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      abstract\n      yearPublished\n      isPeerReviewed\n      presentedAt {\n        ... on Conference {\n          name\n          year\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 papers with BM25 keyword scoring to 'machine learning' in the title, and show the title, abstract, year published, whether it is peer-reviewed, and the name and year of the conference it was presented at.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 job listings with BM25 keyword scoring to 'software engineer' in the title, and show the title, description, salary, remote availability, and the name of the company that posted the job.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JobListing(\n      bm25: {\n        query: \"software engineer\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      description\n      salary\n      isRemote\n      postedBy {\n        ... on Company {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 job listings with BM25 keyword scoring to 'software engineer' in the title, and show the title, description, salary, remote availability, and the name of the company that posted the job.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 programming languages with BM25 keyword scoring to 'Python' in the name, and show the name, description, year released, whether it is compiled, and the software projects it is used in including the project name, repository URL, and lines of code.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ProgrammingLanguage(\n      bm25: {\n        query: \"Python\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      yearReleased\n      isCompiled\n      usedIn {\n        ... on SoftwareProject {\n          projectName\n          repositoryURL\n          linesOfCode\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 programming languages with BM25 keyword scoring to 'Python' in the name, and show the name, description, year released, whether it is compiled, and the software projects it is used in including the project name, repository URL, and lines of code.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique event names and the sum of years of the Historical Events in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    HistoricalEvent {\n      eventName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      year {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique event names and the sum of years of the Historical Events in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique titles and the sum of seasons of the TVSeries in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    TVSeries {\n      title {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      seasons {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique titles and the sum of seasons of the TVSeries in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the total duration of the Workouts in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Workout {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      duration {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the total duration of the Workouts in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique titles and the total duration of the Songs in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Song {\n      title {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      duration {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique titles and the total duration of the Songs in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique species and the sum of heights of the Plants in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Plant {\n      species {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      height {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique species and the sum of heights of the Plants in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique titles and the sum of prep times of the Recipes in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Recipe {\n      title {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      prepTime {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique titles and the sum of prep times of the Recipes in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the average temperature of the Destinations in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Destination {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      averageTemperature {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the average temperature of the Destinations in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of water volumes of the Aquariums in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Aquarium {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      waterVolume {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of water volumes of the Aquariums in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of complexity levels of the Yoga Poses in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    YogaPose {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      complexityLevel {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of complexity levels of the Yoga Poses in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique summaries and the sum of pod numbers of the PodClips in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    PodClip {\n      summary {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      podNum {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique summaries and the sum of pod numbers of the PodClips in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of year introduced for the Instruments in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Instrument {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      yearIntroduced {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of year introduced for the Instruments in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of minPlayers of the BoardGames in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    BoardGame {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      minPlayers {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of minPlayers of the BoardGames in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and type of unique locations of the WeatherStations in the database, as well as the sum of altitudes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    WeatherStation {\n      location {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      altitude {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and type of unique locations of the WeatherStations in the database, as well as the sum of altitudes.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique titles and the total duration of the Movies in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Movie {\n      title {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      duration {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique titles and the total duration of the Movies in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and top occurrences of unique AI model names, as well as the count and sum of accuracy values for the AI models in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    AIModel {\n      modelName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      accuracy {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and top occurrences of unique AI model names, as well as the count and sum of accuracy values for the AI models in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique makes and the sum of years of the Cars in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Car {\n      make {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      year {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique makes and the sum of years of the Cars in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and the most commonly occurring case titles of the Legal Cases in the database. Also, show me the total sum of years of the Legal Cases.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    LegalCase {\n      caseTitle {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      year {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and the most commonly occurring case titles of the Legal Cases in the database. Also, show me the total sum of years of the Legal Cases.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and the sum of prices for each unique device name in the SmartDevice collection.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    SmartDevice {\n      deviceName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      price {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and the sum of prices for each unique device name in the SmartDevice collection.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique gear names and the sum of weights of the Outdoor Gear in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    OutdoorGear {\n      gearName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      weight {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique gear names and the sum of weights of the Outdoor Gear in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of seating capacities of the Restaurants in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Restaurant {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      seatingCapacity {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of seating capacities of the Restaurants in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique content and the sum of likes of the Posts in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Post {\n      content {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      likes {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique content and the sum of likes of the Posts in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of ages of the Animals in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Animal {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      age {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of ages of the Animals in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of founding years of the Fashion Brands in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    FashionBrand {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      foundingYear {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of founding years of the Fashion Brands in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique repository names and the sum of stars of the CodeRepositories in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CodeRepository {\n      repositoryName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      stars {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique repository names and the sum of stars of the CodeRepositories in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of vintage years of the Wines in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Wine {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      vintageYear {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of vintage years of the Wines in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of ages of the Patients in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Patient {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      age {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of ages of the Patients in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and most commonly occurring models of telescopes in the database, as well as the total sum of magnification values for all telescopes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Telescope {\n      model {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      magnification {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and most commonly occurring models of telescopes in the database, as well as the total sum of magnification values for all telescopes.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of prices of the Products in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Product {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      price {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of prices of the Products in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the total funding amount of the Startups in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Startup {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      funding {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the total funding amount of the Startups in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of founding years of the NewsOutlets in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    NewsOutlet {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      foundingYear {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of founding years of the NewsOutlets in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and types of unique titles and the sum of ratings of the Games in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Game {\n      title {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      rating {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and types of unique titles and the sum of ratings of the Games in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique titles and the sum of years created for the Artwork in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Artwork {\n      title {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      yearCreated {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique titles and the sum of years created for the Artwork in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique makes and the sum of years of the Cars in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Car {\n      make {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      year {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique makes and the sum of years of the Cars in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of fleet sizes of the Airlines in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Airline {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      fleetSize {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of fleet sizes of the Airlines in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and type of unique titles, as well as the count and sum of page counts for the Books in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Book {\n      title {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      pageCount {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and type of unique titles, as well as the count and sum of page counts for the Books in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of market caps of the Cryptocurrencies in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Cryptocurrency {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      marketCap {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of market caps of the Cryptocurrencies in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of salaries of the Employees in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Employee {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      salary {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of salaries of the Employees in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of prices of the Products in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Product {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      price {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of prices of the Products in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of founding years of the Museums in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Museum {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      foundingYear {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of founding years of the Museums in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique team names and the sum of wins for each team in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Team {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      wins {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique team names and the sum of wins for each team in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of years founded of the CoffeeShops in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CoffeeShop {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      yearFounded {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of years founded of the CoffeeShops in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique addresses and the sum of prices of the Houses in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    House {\n      address {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      price {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique addresses and the sum of prices of the Houses in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of duration days of the Diet Plans in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    DietPlan {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      durationDays {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of duration days of the Diet Plans in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique beer names and the sum of alcohol content of the Craft Beers in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CraftBeer {\n      beerName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      alcoholContent {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique beer names and the sum of alcohol content of the Craft Beers in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the average rating of the Spas in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Spa {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      averageRating {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the average rating of the Spas in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and types of unique titles of the Courses in the database, as well as the total sum of prices.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Course {\n      title {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      price {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and types of unique titles of the Courses in the database, as well as the total sum of prices.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique titles and the sum of years published of the Papers in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Paper {\n      title {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      yearPublished {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique titles and the sum of years published of the Papers in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and type of unique titles and the sum of salaries of the Job Listings in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    JobListing {\n      title {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      salary {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and type of unique titles and the sum of salaries of the Job Listings in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of years released of the Programming Languages in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ProgrammingLanguage {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      yearReleased {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of years released of the Programming Languages in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the HistoricalEvent class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    HistoricalEvent {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the HistoricalEvent class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the TVSeries class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    TVSeries {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the TVSeries class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Workout class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Workout {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Workout class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Song class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Song {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Song class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Plant class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Plant {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Plant class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Recipe class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Recipe {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Recipe class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the Destination class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Destination {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the Destination class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Aquarium class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Aquarium {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Aquarium class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of YogaPose objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    YogaPose {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of YogaPose objects.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the PodClip class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    PodClip {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the PodClip class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Instrument class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Instrument {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Instrument class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the BoardGame class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    BoardGame {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the BoardGame class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the WeatherStation class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    WeatherStation {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the WeatherStation class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Movie class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Movie {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Movie class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the AIModel class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    AIModel {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the AIModel class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Car class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Car {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Car class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the LegalCase class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    LegalCase {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the LegalCase class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of SmartDevice objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    SmartDevice {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of SmartDevice objects.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the OutdoorGear class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    OutdoorGear {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the OutdoorGear class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Restaurant class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Restaurant {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Restaurant class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Post class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Post {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Post class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Animal class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Animal {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Animal class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the FashionBrand class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    FashionBrand {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the FashionBrand class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the CodeRepository class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CodeRepository {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the CodeRepository class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Wine class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Wine {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Wine class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Patient class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Patient {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Patient class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the Telescope class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Telescope {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the Telescope class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Product class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Product {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Product class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Startup class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Startup {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Startup class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the Event class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Event {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the Event class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the NewsOutlet class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    NewsOutlet {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the NewsOutlet class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Game class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Game {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Game class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Car class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Car {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Car class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the Contact class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Contact {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the Contact class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Airline class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Airline {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Airline class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Book class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Book {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Book class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Cryptocurrency class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Cryptocurrency {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Cryptocurrency class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Employee class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Employee {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Employee class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Product class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Product {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Product class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Museum class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Museum {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Museum class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Team class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Team {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Team class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of CoffeeShop objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CoffeeShop {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of CoffeeShop objects.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the House class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    House {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the House class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the DietPlan class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    DietPlan {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the DietPlan class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the CraftBeer class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CraftBeer {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the CraftBeer class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the Spa class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Spa {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the Spa class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Course class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Course {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Course class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Paper class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Paper {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Paper class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of JobListing objects\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    JobListing {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of JobListing objects\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the ProgrammingLanguage class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ProgrammingLanguage {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the ProgrammingLanguage class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average number of seasons for TVSeries about \"Sci-Fi\" with a maximum distance of 0.2?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    TVSeries(\n      nearText: {\n        concepts: [\"Sci-Fi\"],\n        distance: 0.2\n      }\n    ) {\n      seasons {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average number of seasons for TVSeries about \"Sci-Fi\" with a maximum distance of 0.2?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average duration of Workouts about \"HIIT Cardio\" with a maximum distance of 0.15.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Workout(\n      nearText: {\n        concepts: [\"HIIT Cardio\"],\n        distance: 0.15\n      }\n    ) {\n      duration {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average duration of Workouts about \"HIIT Cardio\" with a maximum distance of 0.15.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average duration of Songs that are similar to \"Love Ballad\" with a maximum distance of 0.15?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Song(\n      nearText: {\n        concepts: [\"Love Ballad\"],\n        distance: 0.15\n      }\n    ) {\n      duration {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average duration of Songs that are similar to \"Love Ballad\" with a maximum distance of 0.15?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average prepTime of Recipes about \"Italian Pasta\" with a maximum distance of 0.15.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Recipe(\n      nearText: {\n        concepts: [\"Italian Pasta\"],\n        distance: 0.15\n      }\n    ) {\n      prepTime {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average prepTime of Recipes about \"Italian Pasta\" with a maximum distance of 0.15.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average mean temperature of Destinations related to \"Beach Vacation\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Destination(\n      nearText: {\n        concepts: [\"Beach Vacation\"],\n        distance: 0.3\n      }\n    ) {\n      averageTemperature {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average mean temperature of Destinations related to \"Beach Vacation\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average complexityLevel of YogaPoses that are similar to \"Warrior Pose\" with a maximum distance of 0.15?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    YogaPose(\n      nearText: {\n        concepts: [\"Warrior Pose\"],\n        distance: 0.15\n      }\n    ) {\n      complexityLevel {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average complexityLevel of YogaPoses that are similar to \"Warrior Pose\" with a maximum distance of 0.15?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average duration of Movies about \"Action Adventure\" with a maximum distance of 0.3.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Movie(\n      nearText: {\n        concepts: [\"Action Adventure\"],\n        distance: 0.3\n      }\n    ) {\n      duration {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average duration of Movies about \"Action Adventure\" with a maximum distance of 0.3.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average accuracy of AIModels related to \"Artificial Intelligence Sci-Fi\" with a maximum distance of 0.2?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    AIModel(\n      nearText: {\n        concepts: [\"Artificial Intelligence Sci-Fi\"],\n        distance: 0.2\n      }\n    ) {\n      accuracy {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average accuracy of AIModels related to \"Artificial Intelligence Sci-Fi\" with a maximum distance of 0.2?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of Smart Devices related to \"Smart Home Automation\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    SmartDevice(\n      nearText: {\n        concepts: [\"Smart Home Automation\"],\n        distance: 0.3\n      }\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of Smart Devices related to \"Smart Home Automation\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average weight of OutdoorGear related to \"Camping Hiking\" with a maximum distance of 0.3.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    OutdoorGear(\n      nearText: {\n        concepts: [\"Camping Hiking\"],\n        distance: 0.3\n      }\n    ) {\n      weight {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average weight of OutdoorGear related to \"Camping Hiking\" with a maximum distance of 0.3.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average seating capacity of Restaurants that serve Italian Cuisine with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Restaurant(\n      nearText: {\n        concepts: [\"Italian Cuisine\"],\n        distance: 0.3\n      }\n    ) {\n      seatingCapacity {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average seating capacity of Restaurants that serve Italian Cuisine with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average age of Animals related to \"Cats\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Animal(\n      nearText: {\n        concepts: [\"Cats\"],\n        distance: 0.3\n      }\n    ) {\n      age {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average age of Animals related to \"Cats\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average age of Patients with \"Cancer\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Patient(\n      nearText: {\n        concepts: [\"Cancer\"],\n        distance: 0.3\n      }\n    ) {\n      age {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average age of Patients with \"Cancer\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average magnification of Telescopes related to \"Astronomy Observations\" with a maximum distance of 0.3.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Telescope(\n      nearText: {\n        concepts: [\"Astronomy Observations\"],\n        distance: 0.3\n      }\n    ) {\n      magnification {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average magnification of Telescopes related to \"Astronomy Observations\" with a maximum distance of 0.3.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of Products related to \"smartphone\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Product(\n      nearText: {\n        concepts: [\"smartphone\"],\n        distance: 0.3\n      }\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of Products related to \"smartphone\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average year of Cars that are similar to \"Toyota Camry\" with a maximum distance of 0.15.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Car(\n      nearText: {\n        concepts: [\"Toyota Camry\"],\n        distance: 0.15\n      }\n    ) {\n      year {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average year of Cars that are similar to \"Toyota Camry\" with a maximum distance of 0.15.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the sum of fleetSize for Airline objects related to \"United States\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Airline(\n      nearText: {\n        concepts: [\"United States\"],\n        distance: 0.3\n      }\n    ) {\n      fleetSize {\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the sum of fleetSize for Airline objects related to \"United States\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average salary of Employees with the job title \"Software Engineer\" with a maximum distance of 0.3.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Employee(\n      nearText: {\n        concepts: [\"Software Engineer\"],\n        distance: 0.3\n      }\n    ) {\n      salary {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average salary of Employees with the job title \"Software Engineer\" with a maximum distance of 0.3.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of Products that are similar to \"Organic Fruits\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Product(\n      nearText: {\n        concepts: [\"Organic Fruits\"],\n        distance: 0.3\n      }\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of Products that are similar to \"Organic Fruits\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the sum of wins for the Team \"Los Angeles Lakers\" with a maximum distance of 0.15?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Team(\n      nearText: {\n        concepts: [\"Los Angeles Lakers\"],\n        distance: 0.15\n      }\n    ) {\n      wins {\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the sum of wins for the Team \"Los Angeles Lakers\" with a maximum distance of 0.15?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average durationDays of DietPlans related to \"weight loss\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    DietPlan(\n      nearText: {\n        concepts: [\"weight loss\"],\n        distance: 0.3\n      }\n    ) {\n      durationDays {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average durationDays of DietPlans related to \"weight loss\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average rating of Spas related to \"relaxation\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Spa(\n      nearText: {\n        concepts: [\"relaxation\"],\n        distance: 0.3\n      }\n    ) {\n      averageRating {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average rating of Spas related to \"relaxation\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of Courses about \"Web Development\" with a maximum distance of 0.3.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Course(\n      nearText: {\n        concepts: [\"Web Development\"],\n        distance: 0.3\n      }\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of Courses about \"Web Development\" with a maximum distance of 0.3.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average yearPublished of Papers about \"Artificial Intelligence Sci-Fi\" with a maximum distance of 0.2.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Paper(\n      nearText: {\n        concepts: [\"Artificial Intelligence Sci-Fi\"],\n        distance: 0.2\n      }\n    ) {\n      yearPublished {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average yearPublished of Papers about \"Artificial Intelligence Sci-Fi\" with a maximum distance of 0.2.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the title and summaries of 10 books and ask a Large Language Model to answer \"What do these books have in common?\" passing in the title and summary to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Book (limit: 10) {\n      title\n      summary\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these books have in common?\n            \"\"\",\n            properties: [\"title\", \"summary\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the title and summaries of 10 books and ask a Large Language Model to answer \"What do these books have in common?\" passing in the title and summary to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 historical events with BM25 keyword scoring to the query 'World War II', and show the event name, description, and BM25 score for each event returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HistoricalEvent(\n      bm25: {\n        query: \"World War II\"\n      },\n      limit: 3\n    ) {\n      eventName\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 historical events with BM25 keyword scoring to the query 'World War II', and show the event name, description, and BM25 score for each event returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 TV series with BM25 keyword scoring to the query 'drama', and show the title, synopsis, and BM25 score for each series returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TVSeries(\n      bm25: {\n        query: \"drama\"\n      },\n      limit: 10\n    ) {\n      title\n      synopsis\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 TV series with BM25 keyword scoring to the query 'drama', and show the title, synopsis, and BM25 score for each series returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 workouts with BM25 keyword scoring to the query 'cardio', and show the name, description, and BM25 score for each workout returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Workout(\n      bm25: {\n        query: \"cardio\"\n      },\n      limit: 10\n    ) {\n      name\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 workouts with BM25 keyword scoring to the query 'cardio', and show the name, description, and BM25 score for each workout returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 songs with BM25 keyword scoring to the query 'pop', and show the title, lyrics, and BM25 score for each song returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Song(\n      bm25: {\n        query: \"pop\"\n      },\n      limit: 10\n    ) {\n      title\n      lyrics\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 songs with BM25 keyword scoring to the query 'pop', and show the title, lyrics, and BM25 score for each song returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 plants with BM25 keyword scoring to the query 'rose', and show the species, care instructions, and BM25 score for each plant returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      bm25: {\n        query: \"rose\"\n      },\n      limit: 3\n    ) {\n      species\n      careInstructions\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 plants with BM25 keyword scoring to the query 'rose', and show the species, care instructions, and BM25 score for each plant returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 recipes with BM25 keyword scoring to the query 'pasta', and show the title, instructions, and BM25 score for each recipe returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Recipe(\n      bm25: {\n        query: \"pasta\"\n      },\n      limit: 5\n    ) {\n      title\n      instructions\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 recipes with BM25 keyword scoring to the query 'pasta', and show the title, instructions, and BM25 score for each recipe returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 destinations with BM25 keyword scoring to the query 'beach', and show the name, description, and BM25 score for each destination returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Destination(\n      bm25: {\n        query: \"beach\"\n      },\n      limit: 3\n    ) {\n      name\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 destinations with BM25 keyword scoring to the query 'beach', and show the name, description, and BM25 score for each destination returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 aquariums with BM25 keyword scoring to the query 'coral reef', and show the name, location, and BM25 score for each object returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Aquarium(\n      bm25: {\n        query: \"coral reef\"\n      },\n      limit: 10\n    ) {\n      name\n      location\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 aquariums with BM25 keyword scoring to the query 'coral reef', and show the name, location, and BM25 score for each object returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 yoga poses with BM25 keyword scoring to the query 'beginner'. Show me the name and description of each pose. Please also include the BM25 score for each pose returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    YogaPose(\n      bm25: {\n        query: \"beginner\"\n      },\n      limit: 3\n    ) {\n      name\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 yoga poses with BM25 keyword scoring to the query 'beginner'. Show me the name and description of each pose. Please also include the BM25 score for each pose returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 PodClips with BM25 keyword scoring to the query 'technology'. Show me the summary, content, and BM25 score for each PodClip returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PodClip(\n      bm25: {\n        query: \"technology\"\n      },\n      limit: 10\n    ) {\n      summary\n      content\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 PodClips with BM25 keyword scoring to the query 'technology'. Show me the summary, content, and BM25 score for each PodClip returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 instruments with BM25 keyword scoring to the query 'piano', and show the name, description, and BM25 score for each instrument returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Instrument(\n      bm25: {\n        query: \"piano\"\n      },\n      limit: 3\n    ) {\n      name\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 instruments with BM25 keyword scoring to the query 'piano', and show the name, description, and BM25 score for each instrument returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 board games with BM25 keyword scoring to the query 'strategy'. Show me the name, rules, and BM25 score for each game returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BoardGame(\n      bm25: {\n        query: \"strategy\"\n      },\n      limit: 10\n    ) {\n      name\n      rules\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 board games with BM25 keyword scoring to the query 'strategy'. Show me the name, rules, and BM25 score for each game returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 weather stations with BM25 keyword scoring to the query 'temperature'. Show me the location and equipment of each weather station. Please also include the BM25 score for each weather station returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeatherStation(\n      bm25: {\n        query: \"temperature\"\n      },\n      limit: 3\n    ) {\n      location\n      equipment\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 weather stations with BM25 keyword scoring to the query 'temperature'. Show me the location and equipment of each weather station. Please also include the BM25 score for each weather station returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 movies with BM25 keyword scoring to the query 'action', and show the title, genre, and BM25 score for each movie returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Movie(\n      bm25: {\n        query: \"action\"\n      },\n      limit: 5\n    ) {\n      title\n      genre\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 movies with BM25 keyword scoring to the query 'action', and show the title, genre, and BM25 score for each movie returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 AI models with BM25 keyword scoring to the query 'classification'. Show me the model name, application, and the BM25 score for each model returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    AIModel(\n      bm25: {\n        query: \"classification\"\n      },\n      limit: 10\n    ) {\n      modelName\n      application\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 AI models with BM25 keyword scoring to the query 'classification'. Show me the model name, application, and the BM25 score for each model returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 cars with BM25 keyword scoring to the query 'SUV', and show the make, model, year, and BM25 score for each car returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      bm25: {\n        query: \"SUV\"\n      },\n      limit: 10\n    ) {\n      make\n      model\n      year\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 cars with BM25 keyword scoring to the query 'SUV', and show the make, model, year, and BM25 score for each car returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 legal cases with BM25 keyword scoring to the query 'criminal'. Show me the case title, case summary, and the BM25 score for each case returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase(\n      bm25: {\n        query: \"criminal\"\n      },\n      limit: 10\n    ) {\n      caseTitle\n      caseSummary\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 legal cases with BM25 keyword scoring to the query 'criminal'. Show me the case title, case summary, and the BM25 score for each case returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 smart devices with BM25 keyword scoring to the query 'smart speaker'. Show me the device name, features, and the BM25 score for each device returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SmartDevice(\n      bm25: {\n        query: \"smart speaker\"\n      },\n      limit: 3\n    ) {\n      deviceName\n      features\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 smart devices with BM25 keyword scoring to the query 'smart speaker'. Show me the device name, features, and the BM25 score for each device returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 outdoor gear items with BM25 keyword scoring to the query 'hiking boots'. Show me the gear name, description, and the BM25 score for each item returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OutdoorGear(\n      bm25: {\n        query: \"hiking boots\"\n      },\n      limit: 10\n    ) {\n      gearName\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 outdoor gear items with BM25 keyword scoring to the query 'hiking boots'. Show me the gear name, description, and the BM25 score for each item returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 restaurants with BM25 keyword scoring to the query 'Italian', and show the name, cuisine, and BM25 score for each restaurant returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Restaurant(\n      bm25: {\n        query: \"Italian\"\n      },\n      limit: 5\n    ) {\n      name\n      cuisine\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 restaurants with BM25 keyword scoring to the query 'Italian', and show the name, cuisine, and BM25 score for each restaurant returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 posts with BM25 keyword scoring to the query 'social media', and show the content, hashtags, and BM25 score for each post returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Post(\n      bm25: {\n        query: \"social media\"\n      },\n      limit: 5\n    ) {\n      content\n      hashtags\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 posts with BM25 keyword scoring to the query 'social media', and show the content, hashtags, and BM25 score for each post returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 animals with BM25 keyword scoring to the query 'dog', and show their names, species, and the BM25 score for each animal returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Animal(\n      bm25: {\n        query: \"dog\"\n      },\n      limit: 3\n    ) {\n      name\n      species\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 animals with BM25 keyword scoring to the query 'dog', and show their names, species, and the BM25 score for each animal returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 fashion brands with BM25 keyword scoring to the query 'luxury', and show the name, description, and BM25 score for each brand returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FashionBrand(\n      bm25: {\n        query: \"luxury\"\n      },\n      limit: 5\n    ) {\n      name\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 fashion brands with BM25 keyword scoring to the query 'luxury', and show the name, description, and BM25 score for each brand returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 code repositories with BM25 keyword scoring to the query 'machine learning'. Show me the repository name and description for each repository returned. Please also include the BM25 score for each repository.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CodeRepository(\n      bm25: {\n        query: \"machine learning\"\n      },\n      limit: 10\n    ) {\n      repositoryName\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 code repositories with BM25 keyword scoring to the query 'machine learning'. Show me the repository name and description for each repository returned. Please also include the BM25 score for each repository.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 wines with BM25 keyword scoring to the query 'chardonnay', and show the name, tasting notes, and BM25 score for each wine returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine(\n      bm25: {\n        query: \"chardonnay\"\n      },\n      limit: 5\n    ) {\n      name\n      tastingNotes\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 wines with BM25 keyword scoring to the query 'chardonnay', and show the name, tasting notes, and BM25 score for each wine returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 patients with BM25 keyword scoring to the query 'cancer', and show their names, diagnoses, and BM25 scores.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Patient(\n      bm25: {\n        query: \"cancer\"\n      },\n      limit: 10\n    ) {\n      name\n      diagnosis\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 patients with BM25 keyword scoring to the query 'cancer', and show their names, diagnoses, and BM25 scores.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 telescopes with BM25 keyword scoring to the query 'astronomy', and show the model, manufacturer, and BM25 score for each object returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Telescope(\n      bm25: {\n        query: \"astronomy\"\n      },\n      limit: 5\n    ) {\n      model\n      manufacturer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 telescopes with BM25 keyword scoring to the query 'astronomy', and show the model, manufacturer, and BM25 score for each object returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 products with BM25 keyword scoring to the query 'electronics'. Show me the name, description, and BM25 score for each product returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      bm25: {\n        query: \"electronics\"\n      },\n      limit: 10\n    ) {\n      name\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 products with BM25 keyword scoring to the query 'electronics'. Show me the name, description, and BM25 score for each product returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 startups related to technology. Show me the name and product of each startup. Please include the BM25 score for each startup returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Startup(\n      bm25: {\n        query: \"technology\"\n      },\n      limit: 10\n    ) {\n      name\n      product\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 startups related to technology. Show me the name and product of each startup. Please include the BM25 score for each startup returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 events with BM25 keyword scoring to the query 'music concert', and show the title, description, and BM25 score for each event returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Event(\n      bm25: {\n        query: \"music concert\"\n      },\n      limit: 5\n    ) {\n      title\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 events with BM25 keyword scoring to the query 'music concert', and show the title, description, and BM25 score for each event returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 news outlets with BM25 keyword scoring to the query 'politics'. For each news outlet, show the name, founding year, online status, and the name and years of experience of the journalists associated with it. Please also show me the BM25 score for each news outlet returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NewsOutlet(\n      bm25: {\n        query: \"politics\"\n      },\n      limit: 10\n    ) {\n      name\n      foundingYear\n      isOnline\n      hasJournalist {\n        ... on Journalist {\n          name\n          yearsExperience\n        }\n      }\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 news outlets with BM25 keyword scoring to the query 'politics'. For each news outlet, show the name, founding year, online status, and the name and years of experience of the journalists associated with it. Please also show me the BM25 score for each news outlet returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 games with BM25 keyword scoring to the query 'action', and show the title, genre, and BM25 score for each game returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Game(\n      bm25: {\n        query: \"action\"\n      },\n      limit: 10\n    ) {\n      title\n      genre\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 games with BM25 keyword scoring to the query 'action', and show the title, genre, and BM25 score for each game returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 artworks with BM25 keyword scoring to the query 'modern art', and show the title, medium, and BM25 score for each artwork returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Artwork(\n      bm25: {\n        query: \"modern art\"\n      },\n      limit: 5\n    ) {\n      title\n      medium\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 artworks with BM25 keyword scoring to the query 'modern art', and show the title, medium, and BM25 score for each artwork returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 cars with BM25 keyword scoring to the query 'repair', and show the make, model, and BM25 score for each car returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      bm25: {\n        query: \"repair\"\n      },\n      limit: 5\n    ) {\n      make\n      model\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 cars with BM25 keyword scoring to the query 'repair', and show the make, model, and BM25 score for each car returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 contacts with BM25 keyword scoring to the query 'John Doe', and show their full name, email, and BM25 score for each contact returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Contact(\n      bm25: {\n        query: \"John Doe\"\n      },\n      limit: 3\n    ) {\n      fullName\n      email\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 contacts with BM25 keyword scoring to the query 'John Doe', and show their full name, email, and BM25 score for each contact returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 airlines with BM25 keyword scoring to the query 'international flights', and show the name, hub airport, and BM25 score for each airline returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Airline(\n      bm25: {\n        query: \"international flights\"\n      },\n      limit: 5\n    ) {\n      name\n      hubAirport\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 airlines with BM25 keyword scoring to the query 'international flights', and show the name, hub airport, and BM25 score for each airline returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 books with BM25 keyword scoring to the query 'science fiction', and show the title, summary, and BM25 score for each book returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Book(\n      bm25: {\n        query: \"science fiction\"\n      },\n      limit: 5\n    ) {\n      title\n      summary\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 books with BM25 keyword scoring to the query 'science fiction', and show the title, summary, and BM25 score for each book returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 cryptocurrencies with BM25 keyword scoring to the query 'Bitcoin'. Show me the name, symbol, and BM25 score for each cryptocurrency returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Cryptocurrency(\n      bm25: {\n        query: \"Bitcoin\"\n      },\n      limit: 10\n    ) {\n      name\n      symbol\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 cryptocurrencies with BM25 keyword scoring to the query 'Bitcoin'. Show me the name, symbol, and BM25 score for each cryptocurrency returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 employees who are software engineers, and show their names, job titles, and BM25 scores. \n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Employee(\n      bm25: {\n        query: \"software engineer\"\n      },\n      limit: 10\n    ) {\n      name\n      jobTitle\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 employees who are software engineers, and show their names, job titles, and BM25 scores. \n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 products with BM25 keyword scoring to the query 'organic food', and show the name, description, and BM25 score for each product returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      bm25: {\n        query: \"organic food\"\n      },\n      limit: 10\n    ) {\n      name\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 products with BM25 keyword scoring to the query 'organic food', and show the name, description, and BM25 score for each product returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 museums with BM25 keyword scoring to the query 'art', and show the name, location, and BM25 score for each museum returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Museum(\n      bm25: {\n        query: \"art\"\n      },\n      limit: 3\n    ) {\n      name\n      location\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 museums with BM25 keyword scoring to the query 'art', and show the name, location, and BM25 score for each museum returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 soccer teams with BM25 keyword scoring to the query 'soccer'. Show me the team name, city, and the BM25 score for each team returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team(\n      bm25: {\n        query: \"soccer\"\n      },\n      limit: 10\n    ) {\n      name\n      city\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 soccer teams with BM25 keyword scoring to the query 'soccer'. Show me the team name, city, and the BM25 score for each team returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 coffee shops with BM25 keyword scoring to the query 'latte', and show the name, menu, and BM25 score for each coffee shop returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CoffeeShop(\n      bm25: {\n        query: \"latte\"\n      },\n      limit: 3\n    ) {\n      name\n      menu\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 coffee shops with BM25 keyword scoring to the query 'latte', and show the name, menu, and BM25 score for each coffee shop returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 diet plans with BM25 keyword scoring to the query 'weight loss'. Show me the name and description of each diet plan. Please also include the BM25 score for each object returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DietPlan(\n      bm25: {\n        query: \"weight loss\"\n      },\n      limit: 3\n    ) {\n      name\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 diet plans with BM25 keyword scoring to the query 'weight loss'. Show me the name and description of each diet plan. Please also include the BM25 score for each object returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 craft beers with BM25 keyword scoring to the query 'IPA', and show the beer name, tasting notes, and BM25 score for each beer returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CraftBeer(\n      bm25: {\n        query: \"IPA\"\n      },\n      limit: 10\n    ) {\n      beerName\n      tastingNotes\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 craft beers with BM25 keyword scoring to the query 'IPA', and show the beer name, tasting notes, and BM25 score for each beer returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 spas with BM25 keyword scoring to the query 'massage', and show the name, services, and BM25 score for each spa returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Spa(\n      bm25: {\n        query: \"massage\"\n      },\n      limit: 10\n    ) {\n      name\n      services\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 spas with BM25 keyword scoring to the query 'massage', and show the name, services, and BM25 score for each spa returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 courses with BM25 keyword scoring to the query 'programming', and show the title, description, and BM25 score for each course returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Course(\n      bm25: {\n        query: \"programming\"\n      },\n      limit: 5\n    ) {\n      title\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 courses with BM25 keyword scoring to the query 'programming', and show the title, description, and BM25 score for each course returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 papers with BM25 keyword scoring to the query 'machine learning', and show the title, abstract, and BM25 score for each paper returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Paper(\n      bm25: {\n        query: \"machine learning\"\n      },\n      limit: 10\n    ) {\n      title\n      abstract\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 papers with BM25 keyword scoring to the query 'machine learning', and show the title, abstract, and BM25 score for each paper returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 job listings with BM25 keyword scoring to the query 'software engineer'. Show me the title, description, and BM25 score for each job listing returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JobListing(\n      bm25: {\n        query: \"software engineer\"\n      },\n      limit: 10\n    ) {\n      title\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 job listings with BM25 keyword scoring to the query 'software engineer'. Show me the title, description, and BM25 score for each job listing returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 programming languages with BM25 keyword scoring to the query 'python'. Show me the name and description of each programming language. Please also include the BM25 score for each programming language returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ProgrammingLanguage(\n      bm25: {\n        query: \"python\"\n      },\n      limit: 3\n    ) {\n      name\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 programming languages with BM25 keyword scoring to the query 'python'. Show me the name and description of each programming language. Please also include the BM25 score for each programming language returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the historical events related to World War II that occurred after 1939. Show me the event name, description, year, whether it had a significant impact, and the involved countries' names and populations.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HistoricalEvent(\n      bm25: {\n        query: \"World War II\"\n      },\n      where: {\n        path: [\"year\"],\n        operator: GreaterThan,\n        valueInt: 1939\n      }\n    ) {\n      eventName\n      description\n      year\n      hadSignificantImpact\n      involvedCountries {\n        ... on Country {\n          countryName\n          population\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the historical events related to World War II that occurred after 1939. Show me the event name, description, year, whether it had a significant impact, and the involved countries' names and populations.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the TV series with a BM25 scoring of the query 'drama' where the number of seasons is greater than 5, and show the title, synopsis, on-air status, and the names of the actors.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TVSeries(\n      bm25: {\n        query: \"drama\"\n      },\n      where: {\n        path: [\"seasons\"],\n        operator: GreaterThan,\n        valueInt: 5\n      }\n    ) {\n      title\n      synopsis\n      isOnAir\n      hasActor {\n        ... on Actor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the TV series with a BM25 scoring of the query 'drama' where the number of seasons is greater than 5, and show the title, synopsis, on-air status, and the names of the actors.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the workouts with BM25 scoring of the query 'cardio' where the duration is greater than 30 minutes, and show the name, description, duration, whether it is a group workout, and the equipment name and quantity used.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Workout(\n      bm25: {\n        query: \"cardio\"\n      },\n      where: {\n        path: [\"duration\"],\n        operator: GreaterThan,\n        valueInt: 30\n      }\n    ) {\n      name\n      description\n      duration\n      isGroup\n      usesEquipment {\n        ... on Equipment {\n          name\n          quantity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the workouts with BM25 scoring of the query 'cardio' where the duration is greater than 30 minutes, and show the name, description, duration, whether it is a group workout, and the equipment name and quantity used.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the songs with BM25 scoring of the query 'love' where the duration is greater than 180 seconds, and show the title, lyrics, explicit status, and the album's title and release year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Song(\n      bm25: {\n        query: \"love\"\n      },\n      where: {\n        path: [\"duration\"],\n        operator: GreaterThan,\n        valueInt: 180\n      }\n    ) {\n      title\n      lyrics\n      isExplicit\n      inAlbum {\n        ... on Album {\n          title\n          releaseYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the songs with BM25 scoring of the query 'love' where the duration is greater than 180 seconds, and show the title, lyrics, explicit status, and the album's title and release year.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the plants with BM25 scoring of the query 'rose' where the height is greater than 50, and show the species, care instructions, flowering status, and the name of the gardener who planted them.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      bm25: {\n        query: \"rose\"\n      },\n      where: {\n        path: [\"height\"],\n        operator: GreaterThan,\n        valueNumber: 50\n      }\n    ) {\n      species\n      careInstructions\n      isFlowering\n      plantedBy {\n        ... on Gardener {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the plants with BM25 scoring of the query 'rose' where the height is greater than 50, and show the species, care instructions, flowering status, and the name of the gardener who planted them.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the recipes with BM25 scoring of the query 'pasta' where the prepTime is less than 30 minutes, and show the title, instructions, vegetarian status, and the names and calorie counts of the ingredients used.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Recipe(\n      bm25: {\n        query: \"pasta\"\n      },\n      where: {\n        path: [\"prepTime\"],\n        operator: LessThan,\n        valueInt: 30\n      }\n    ) {\n      title\n      instructions\n      isVegetarian\n      usesIngredient {\n        ... on Ingredient {\n          name\n          calories\n        }\n      }\n    }\n  }\n}\n```\n\nThis API request is adapted to the custom database schema provided. It queries the `Recipe` class, filtering for recipes that contain the keyword \"pasta\" and have a preparation time of less than 30 minutes. The requested properties include the recipe's title, instructions, vegetarian status, and the ingredients used, including their names and calorie counts.", "nlcommand": "```text\nGet me the recipes with BM25 scoring of the query 'pasta' where the prepTime is less than 30 minutes, and show the title, instructions, vegetarian status, and the names and calorie counts of the ingredients used.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the destinations with a BM25 scoring of the query 'beach' where the average temperature is greater than 25, and show the name, description, popularity, and the names of the travelers who have visited.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Destination(\n      bm25: {\n        query: \"beach\"\n      },\n      where: {\n        path: [\"averageTemperature\"],\n        operator: GreaterThan,\n        valueNumber: 25\n      }\n    ) {\n      name\n      description\n      isPopular\n      visitedBy {\n        ... on Traveler {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the destinations with a BM25 scoring of the query 'beach' where the average temperature is greater than 25, and show the name, description, popularity, and the names of the travelers who have visited.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the aquariums with a BM25 scoring of the query 'coral' where the waterVolume is greater than 100, and show the name, location, whether they have marine fish, and the caretaker's name and years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Aquarium(\n      bm25: {\n        query: \"coral\"\n      },\n      where: {\n        path: [\"waterVolume\"],\n        operator: GreaterThan,\n        valueNumber: 100\n      }\n    ) {\n      name\n      location\n      hasMarineFish\n      caretaker {\n        ... on Aquarist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the aquariums with a BM25 scoring of the query 'coral' where the waterVolume is greater than 100, and show the name, location, whether they have marine fish, and the caretaker's name and years of experience.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the instruments with BM25 scoring of the query 'piano' where the yearIntroduced is greater than 1800, and show the name, description, whether it is a string instrument, and the name and genre of the musician who plays it.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Instrument(\n      bm25: {\n        query: \"piano\"\n      },\n      where: {\n        path: [\"yearIntroduced\"],\n        operator: GreaterThan,\n        valueInt: 1800\n      }\n    ) {\n      name\n      description\n      isString\n      playedBy {\n        ... on Musician {\n          name\n          genre\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the instruments with BM25 scoring of the query 'piano' where the yearIntroduced is greater than 1800, and show the name, description, whether it is a string instrument, and the name and genre of the musician who plays it.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the weather stations with a BM25 score of the query 'rain' where the altitude is greater than 1000, and show the location, equipment, activity status, and the name and years of experience of the meteorologist managing it.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeatherStation(\n      bm25: {\n        query: \"rain\"\n      },\n      where: {\n        path: [\"altitude\"],\n        operator: GreaterThan,\n        valueNumber: 1000\n      }\n    ) {\n      location\n      equipment\n      isActive\n      managedBy {\n        ... on Meteorologist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the weather stations with a BM25 score of the query 'rain' where the altitude is greater than 1000, and show the location, equipment, activity status, and the name and years of experience of the meteorologist managing it.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the movies with BM25 scoring of the query 'action' where the duration is greater than 120 minutes, and show the title, genre, availability, and lead actor's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Movie(\n      bm25: {\n        query: \"action\"\n      },\n      where: {\n        path: [\"duration\"],\n        operator: GreaterThan,\n        valueInt: 120\n      }\n    ) {\n      title\n      genre\n      isAvailable\n      leadActor {\n        ... on Actor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the movies with BM25 scoring of the query 'action' where the duration is greater than 120 minutes, and show the title, genre, availability, and lead actor's name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the AI models with BM25 scoring of the query 'image classification' where the accuracy is greater than 0.8, and show the model name, application, accuracy, whether it is supervised, and the name and description of the algorithm it is based on.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    AIModel(\n      bm25: {\n        query: \"image classification\"\n      },\n      where: {\n        path: [\"accuracy\"],\n        operator: GreaterThan,\n        valueNumber: 0.8\n      }\n    ) {\n      modelName\n      application\n      accuracy\n      isSupervised\n      basedOn {\n        ... on Algorithm {\n          name\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the AI models with BM25 scoring of the query 'image classification' where the accuracy is greater than 0.8, and show the model name, application, accuracy, whether it is supervised, and the name and description of the algorithm it is based on.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the cars with BM25 scoring of the query 'luxury' where the year is greater than 2015, and show the make, model, year, availability, and renter's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      bm25: {\n        query: \"luxury\"\n      },\n      where: {\n        path: [\"year\"],\n        operator: GreaterThan,\n        valueInt: 2015\n      }\n    ) {\n      make\n      model\n      year\n      isAvailable\n      rentedBy {\n        ... on Customer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the cars with BM25 scoring of the query 'luxury' where the year is greater than 2015, and show the make, model, year, availability, and renter's name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the legal cases with BM25 scoring of the query 'fraud' where the year is greater than 2010, and show the case title, case summary, ongoing status, and the name, role, and number of cases for the involved parties.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase(\n      bm25: {\n        query: \"fraud\"\n      },\n      where: {\n        path: [\"year\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ) {\n      caseTitle\n      caseSummary\n      isOngoing\n      involvedParty {\n        ... on Party {\n          name\n          role\n          numberOfCases\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the legal cases with BM25 scoring of the query 'fraud' where the year is greater than 2010, and show the case title, case summary, ongoing status, and the name, role, and number of cases for the involved parties.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the smart devices with BM25 scoring of the query 'smart home' where the price is less than 200, and show the device name, features, wireless capability, and manufacturer's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SmartDevice(\n      bm25: {\n        query: \"smart home\"\n      },\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 200\n      }\n    ) {\n      deviceName\n      features\n      isWireless\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the smart devices with BM25 scoring of the query 'smart home' where the price is less than 200, and show the device name, features, wireless capability, and manufacturer's name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the outdoor gear with a BM25 scoring of the query 'hiking' where the weight is less than 1000, and show the gear name, description, waterproof status, and supplier's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OutdoorGear(\n      bm25: {\n        query: \"hiking\"\n      },\n      where: {\n        path: [\"weight\"],\n        operator: LessThan,\n        valueNumber: 1000\n      }\n    ) {\n      gearName\n      description\n      isWaterproof\n      supplier {\n        ... on Supplier {\n          supplierName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the outdoor gear with a BM25 scoring of the query 'hiking' where the weight is less than 1000, and show the gear name, description, waterproof status, and supplier's name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the restaurants with BM25 scoring of the query 'Italian' where the seatingCapacity is greater than 50, and show the name, cuisine, Michelin star status, and the name and specialty of the head chef.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Restaurant(\n      bm25: {\n        query: \"Italian\"\n      },\n      where: {\n        path: [\"seatingCapacity\"],\n        operator: GreaterThan,\n        valueInt: 50\n      }\n    ) {\n      name\n      cuisine\n      hasMichelinStar\n      headChef {\n        ... on Chef {\n          name\n          specialty\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the restaurants with BM25 scoring of the query 'Italian' where the seatingCapacity is greater than 50, and show the name, cuisine, Michelin star status, and the name and specialty of the head chef.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the posts with BM25 scoring of the query 'technology' where the number of likes is greater than 100, and show the content, hashtags, whether it is public, and the text and number of likes for each comment.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Post(\n      bm25: {\n        query: \"technology\"\n      },\n      where: {\n        path: [\"likes\"],\n        operator: GreaterThan,\n        valueInt: 100\n      }\n    ) {\n      content\n      hashtags\n      isPublic\n      comments {\n        ... on Comment {\n          text\n          likes\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the posts with BM25 scoring of the query 'technology' where the number of likes is greater than 100, and show the content, hashtags, whether it is public, and the text and number of likes for each comment.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the animals with a BM25 scoring of the query 'cat' where the age is greater than 2, and show the name, species, age, adoption status, and the name of the adopter.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Animal(\n      bm25: {\n        query: \"cat\"\n      },\n      where: {\n        path: [\"age\"],\n        operator: GreaterThan,\n        valueInt: 2\n      }\n    ) {\n      name\n      species\n      age\n      isAdopted\n      adoptedBy {\n        ... on Adopter {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the animals with a BM25 scoring of the query 'cat' where the age is greater than 2, and show the name, species, age, adoption status, and the name of the adopter.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the fashion brands with a BM25 score of the query 'luxury' where the founding year is greater than 2000, and show the name, description, luxury status, and designer's name and biography.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FashionBrand(\n      bm25: {\n        query: \"luxury\"\n      },\n      where: {\n        path: [\"foundingYear\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      name\n      description\n      isLuxury\n      designedBy {\n        ... on Designer {\n          name\n          biography\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the fashion brands with a BM25 score of the query 'luxury' where the founding year is greater than 2000, and show the name, description, luxury status, and designer's name and biography.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the code repositories with BM25 scoring of the query 'machine learning' where the number of stars is greater than 1000, and show the repository name, description, whether it is a fork, and the username, real name, and contributions of the maintainers.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CodeRepository(\n      bm25: {\n        query: \"machine learning\"\n      },\n      where: {\n        path: [\"stars\"],\n        operator: GreaterThan,\n        valueInt: 1000\n      }\n    ) {\n      repositoryName\n      description\n      isFork\n      maintainedBy {\n        ... on Developer {\n          username\n          realName\n          contributions\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the code repositories with BM25 scoring of the query 'machine learning' where the number of stars is greater than 1000, and show the repository name, description, whether it is a fork, and the username, real name, and contributions of the maintainers.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the wines with BM25 scoring of the query 'red wine' where the vintageYear is greater than 2010, and show the name, origin, grape variety, tasting notes, vintage year, whether it is red, and the related winery's name, location, and founded year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine(\n      bm25: {\n        query: \"red wine\"\n      },\n      where: {\n        path: [\"vintageYear\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ) {\n      name\n      origin\n      grapeVariety\n      tastingNotes\n      vintageYear\n      isRed\n      relatedWinery {\n        ... on Winery {\n          name\n          location\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the wines with BM25 scoring of the query 'red wine' where the vintageYear is greater than 2010, and show the name, origin, grape variety, tasting notes, vintage year, whether it is red, and the related winery's name, location, and founded year.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the patients with a BM25 scoring of the query 'cancer' where the age is greater than 50, and show the name, diagnosis, insurance status, and primary doctor's name and experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Patient(\n      bm25: {\n        query: \"cancer\"\n      },\n      where: {\n        path: [\"age\"],\n        operator: GreaterThan,\n        valueInt: 50\n      }\n    ) {\n      name\n      diagnosis\n      isInsured\n      primaryDoctor {\n        ... on Doctor {\n          name\n          experience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the patients with a BM25 scoring of the query 'cancer' where the age is greater than 50, and show the name, diagnosis, insurance status, and primary doctor's name and experience.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the telescopes with BM25 scoring of the query 'astronomy' where the magnification is greater than 50, and show the model, manufacturer, availability, and astronomer's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Telescope(\n      bm25: {\n        query: \"astronomy\"\n      },\n      where: {\n        path: [\"magnification\"],\n        operator: GreaterThan,\n        valueNumber: 50\n      }\n    ) {\n      model\n      manufacturer\n      isInUse\n      operatedBy {\n        ... on Astronomer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the telescopes with BM25 scoring of the query 'astronomy' where the magnification is greater than 50, and show the model, manufacturer, availability, and astronomer's name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the products with BM25 scoring of the query 'electronics' where the price is less than 1000, and show the name, description, price, in-stock status, and reviews' content and rating.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      bm25: {\n        query: \"electronics\"\n      },\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 1000\n      }\n    ) {\n      name\n      description\n      price\n      inStock\n      hasReview {\n        ... on Review {\n          content\n          rating\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the products with BM25 scoring of the query 'electronics' where the price is less than 1000, and show the name, description, price, in-stock status, and reviews' content and rating.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the startups with a BM25 scoring of the query 'technology' where the funding is greater than 1,000,000, and show the name, product, bootstrapping status, and founder's name, biography, and successful startups.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Startup(\n      bm25: {\n        query: \"technology\"\n      },\n      where: {\n        path: [\"funding\"],\n        operator: GreaterThan,\n        valueNumber: 1000000\n      }\n    ) {\n      name\n      product\n      isBootstrapped\n      founders {\n        ... on Entrepreneur {\n          name\n          biography\n          successfulStartups\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the startups with a BM25 scoring of the query 'technology' where the funding is greater than 1,000,000, and show the name, product, bootstrapping status, and founder's name, biography, and successful startups.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the news outlets with a BM25 scoring of the query 'breaking news' where the founding year is greater than 2000, and show the name, online status, and journalist's name and years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NewsOutlet(\n      bm25: {\n        query: \"breaking news\"\n      },\n      where: {\n        path: [\"foundingYear\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      name\n      isOnline\n      hasJournalist {\n        ... on Journalist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the news outlets with a BM25 scoring of the query 'breaking news' where the founding year is greater than 2000, and show the name, online status, and journalist's name and years of experience.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the games with a BM25 score of the query 'action' where the rating is greater than 8, and show the title, genre, multiplayer status, and developer's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Game(\n      bm25: {\n        query: \"action\"\n      },\n      where: {\n        path: [\"rating\"],\n        operator: GreaterThan,\n        valueInt: 8\n      }\n    ) {\n      title\n      genre\n      isMultiplayer\n      developedBy {\n        ... on Developer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the games with a BM25 score of the query 'action' where the rating is greater than 8, and show the title, genre, multiplayer status, and developer's name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the artworks with BM25 scoring of the query 'modern art' where the yearCreated is greater than 2000, and show the title, medium, availability, and artist's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Artwork(\n      bm25: {\n        query: \"modern art\"\n      },\n      where: {\n        path: [\"yearCreated\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      title\n      medium\n      isSold\n      createdBy {\n        ... on Artist {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the artworks with BM25 scoring of the query 'modern art' where the yearCreated is greater than 2000, and show the title, medium, availability, and artist's name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the cars with BM25 scoring of the query 'repair' where the year is greater than 2010, and show the make, model, year, repair status, and owner's name and number of owned cars.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      bm25: {\n        query: \"repair\"\n      },\n      where: {\n        path: [\"year\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ) {\n      make\n      model\n      year\n      isRepaired\n      ownedBy {\n        ... on Owner {\n          name\n          ownedCars\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the cars with BM25 scoring of the query 'repair' where the year is greater than 2010, and show the make, model, year, repair status, and owner's name and number of owned cars.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the contacts with BM25 scoring of the query 'John' where isLead is equal to true, and show the full name, email, phone number, isLead status, and associated company's name, industry, and revenue.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Contact(\n      bm25: {\n        query: \"John\"\n      },\n      where: {\n        path: [\"isLead\"],\n        operator: Equal,\n        valueBoolean: true\n      }\n    ) {\n      fullName\n      email\n      phone\n      isLead\n      associatedCompany {\n        ... on Company {\n          name\n          industry\n          revenue\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the contacts with BM25 scoring of the query 'John' where isLead is equal to true, and show the full name, email, phone number, isLead status, and associated company's name, industry, and revenue.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the airlines with BM25 scoring of the query 'international' where the fleetSize is greater than 100, and show the name, hub airport, and flights' flight number and duration.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Airline(\n      bm25: {\n        query: \"international\"\n      },\n      where: {\n        path: [\"fleetSize\"],\n        operator: GreaterThan,\n        valueInt: 100\n      }\n    ) {\n      name\n      hubAirport\n      isInternational\n      operatesFlight {\n        ... on Flight {\n          flightNumber\n          duration\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the airlines with BM25 scoring of the query 'international' where the fleetSize is greater than 100, and show the name, hub airport, and flights' flight number and duration.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the books with BM25 scoring of the query 'science fiction' where the pageCount is less than 100, and show the title, summary, availability, and author's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Book(\n      bm25: {\n        query: \"science fiction\"\n      },\n      where: {\n        path: [\"pageCount\"],\n        operator: LessThan,\n        valueInt: 100\n      }\n    ) {\n      title\n      summary\n      isAvailable\n      author {\n        ... on Author {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the books with BM25 scoring of the query 'science fiction' where the pageCount is less than 100, and show the title, summary, availability, and author's name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the cryptocurrencies with a BM25 score of the query 'bitcoin' where the marketCap is greater than 1,000,000,000, and show the name, symbol, marketCap, stability status, and exchange details including name, country, and founded year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Cryptocurrency(\n      bm25: {\n        query: \"bitcoin\"\n      },\n      where: {\n        path: [\"marketCap\"],\n        operator: GreaterThan,\n        valueNumber: 1000000000\n      }\n    ) {\n      name\n      symbol\n      marketCap\n      isStableCoin\n      onExchange {\n        ... on Exchange {\n          name\n          country\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the cryptocurrencies with a BM25 score of the query 'bitcoin' where the marketCap is greater than 1,000,000,000, and show the name, symbol, marketCap, stability status, and exchange details including name, country, and founded year.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the employees who are software engineers and have a salary greater than $50,000. Show their name, job title, salary, remote work status, and the project they are currently working on including the project name and budget.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Employee(\n      bm25: {\n        query: \"software engineer\"\n      },\n      where: {\n        path: [\"salary\"],\n        operator: GreaterThan,\n        valueNumber: 50000\n      }\n    ) {\n      name\n      jobTitle\n      salary\n      isRemote\n      worksOn {\n        ... on Project {\n          name\n          budget\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the employees who are software engineers and have a salary greater than $50,000. Show their name, job title, salary, remote work status, and the project they are currently working on including the project name and budget.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the products with BM25 scoring of the query 'organic' where the price is less than 10, and show the name, description, price, organic status, and category name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      bm25: {\n        query: \"organic\"\n      },\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 10\n      }\n    ) {\n      name\n      description\n      price\n      isOrganic\n      category {\n        ... on Category {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the products with BM25 scoring of the query 'organic' where the price is less than 10, and show the name, description, price, organic status, and category name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the museums with BM25 scoring of the query 'art' where the foundingYear is greater than 1800, and show the name, location, public status, and exhibits' title, description, and year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Museum(\n      bm25: {\n        query: \"art\"\n      },\n      where: {\n        path: [\"foundingYear\"],\n        operator: GreaterThan,\n        valueInt: 1800\n      }\n    ) {\n      name\n      location\n      isPublic\n      hasExhibit {\n        ... on Exhibit {\n          title\n          description\n          year\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the museums with BM25 scoring of the query 'art' where the foundingYear is greater than 1800, and show the name, location, public status, and exhibits' title, description, and year.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the teams with a BM25 score of the query 'football' where the number of wins is greater than 10, and show the team name, city, number of wins, champion status, and the name of the league they are in.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team(\n      bm25: {\n        query: \"football\"\n      },\n      where: {\n        path: [\"wins\"],\n        operator: GreaterThan,\n        valueInt: 10\n      }\n    ) {\n      name\n      city\n      wins\n      isChampion\n      inLeague {\n        ... on League {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the teams with a BM25 score of the query 'football' where the number of wins is greater than 10, and show the team name, city, number of wins, champion status, and the name of the league they are in.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the coffee shops with BM25 scoring of the query 'latte' where the yearFounded is greater than 2000, and show the name, menu, franchise status, and the neighborhood's name, description, and average rent.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CoffeeShop(\n      bm25: {\n        query: \"latte\"\n      },\n      where: {\n        path: [\"yearFounded\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      name\n      menu\n      isFranchise\n      locatedIn {\n        ... on Neighborhood {\n          name\n          description\n          averageRent\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the coffee shops with BM25 scoring of the query 'latte' where the yearFounded is greater than 2000, and show the name, menu, franchise status, and the neighborhood's name, description, and average rent.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the houses with BM25 scoring of the query 'spacious' where the price is less than $1,000,000, and show the address, description, price, sold status, and the name and experience of the listing agent.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    House(\n      bm25: {\n        query: \"spacious\"\n      },\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 1000000\n      }\n    ) {\n      address\n      description\n      price\n      isSold\n      listedBy {\n        ... on Agent {\n          name\n          experience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the houses with BM25 scoring of the query 'spacious' where the price is less than $1,000,000, and show the address, description, price, sold status, and the name and experience of the listing agent.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the diet plans with BM25 scoring of the query 'weight loss' where the durationDays is greater than 30, and show the name, description, durationDays, whether it is vegetarian, and the name and calories of the food items it contains.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DietPlan(\n      bm25: {\n        query: \"weight loss\"\n      },\n      where: {\n        path: [\"durationDays\"],\n        operator: GreaterThan,\n        valueInt: 30\n      }\n    ) {\n      name\n      description\n      durationDays\n      isVegetarian\n      contains {\n        ... on FoodItem {\n          itemName\n          calories\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the diet plans with BM25 scoring of the query 'weight loss' where the durationDays is greater than 30, and show the name, description, durationDays, whether it is vegetarian, and the name and calories of the food items it contains.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the craft beers with a BM25 scoring of the query 'IPA' where the alcohol content is greater than 6.0, and show the beer name, tasting notes, seasonal availability, and brewery name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CraftBeer(\n      bm25: {\n        query: \"IPA\"\n      },\n      where: {\n        path: [\"alcoholContent\"],\n        operator: GreaterThan,\n        valueNumber: 6.0\n      }\n    ) {\n      beerName\n      tastingNotes\n      isSeasonal\n      brewery {\n        ... on Brewery {\n          breweryName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the craft beers with a BM25 scoring of the query 'IPA' where the alcohol content is greater than 6.0, and show the beer name, tasting notes, seasonal availability, and brewery name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the spas that offer massage services and are currently open. Show me the spa's name, services, average rating, and whether it is open. Also, include the location where the spa is situated, including the location's name, description, and latitude.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Spa(\n      bm25: {\n        query: \"massage\"\n      },\n      where: {\n        path: [\"isOpen\"],\n        operator: Equal,\n        valueBoolean: true\n      }\n    ) {\n      name\n      services\n      averageRating\n      isOpen\n      locatedIn {\n        ... on Location {\n          name\n          description\n          latitude\n        }\n      }\n    }\n  }\n}\n```\n\nThis API request is for the custom database schema provided. It retrieves spas that offer massage services and are currently open. The query includes the spa's name, services, average rating, and whether it is open. It also includes the location where the spa is situated, including the location's name, description, and latitude.", "nlcommand": "```text\nGet me the spas that offer massage services and are currently open. Show me the spa's name, services, average rating, and whether it is open. Also, include the location where the spa is situated, including the location's name, description, and latitude.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the courses with BM25 scoring of the query 'programming' where the price is less than 100, and show the title, description, availability, and instructor's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Course(\n      bm25: {\n        query: \"programming\"\n      },\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 100\n      }\n    ) {\n      title\n      description\n      isFree\n      taughtBy {\n        ... on Instructor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the courses with BM25 scoring of the query 'programming' where the price is less than 100, and show the title, description, availability, and instructor's name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the papers with BM25 scoring of the query 'machine learning' where the yearPublished is greater than 2010, and show the title, abstract, peer-reviewed status, and the name and year of the conference it was presented at.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Paper(\n      bm25: {\n        query: \"machine learning\"\n      },\n      where: {\n        path: [\"yearPublished\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ) {\n      title\n      abstract\n      isPeerReviewed\n      presentedAt {\n        ... on Conference {\n          name\n          year\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the papers with BM25 scoring of the query 'machine learning' where the yearPublished is greater than 2010, and show the title, abstract, peer-reviewed status, and the name and year of the conference it was presented at.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the job listings for software engineers with a salary greater than $50,000, and show the title, description, remote availability, and the name of the company that posted the job.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JobListing(\n      bm25: {\n        query: \"software engineer\"\n      },\n      where: {\n        path: [\"salary\"],\n        operator: GreaterThan,\n        valueNumber: 50000\n      }\n    ) {\n      title\n      description\n      isRemote\n      postedBy {\n        ... on Company {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the job listings for software engineers with a salary greater than $50,000, and show the title, description, remote availability, and the name of the company that posted the job.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the programming languages with BM25 scoring of the query 'Python' where the yearReleased is greater than 2000, and show the name, description, yearReleased, isCompiled, and the software projects they are used in including the project name, repository URL, and lines of code.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ProgrammingLanguage(\n      bm25: {\n        query: \"Python\"\n      },\n      where: {\n        path: [\"yearReleased\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      name\n      description\n      yearReleased\n      isCompiled\n      usedIn {\n        ... on SoftwareProject {\n          projectName\n          repositoryURL\n          linesOfCode\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the programming languages with BM25 scoring of the query 'Python' where the yearReleased is greater than 2000, and show the name, description, yearReleased, isCompiled, and the software projects they are used in including the project name, repository URL, and lines of code.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the event names of historical events.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HistoricalEvent {\n      eventName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the event names of historical events.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title of TV series.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TVSeries {\n      title\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title of TV series.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of workouts.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Workout {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of workouts.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title of songs.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Song {\n      title\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title of songs.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the species of plants.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant {\n      species\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the species of plants.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the titles of recipes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Recipe {\n      title\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the titles of recipes.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of destinations.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Destination {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of destinations.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of aquariums.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Aquarium {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of aquariums.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of yoga poses.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    YogaPose {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of yoga poses.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the summary of Pod Clips.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PodClip {\n      summary\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the summary of Pod Clips.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of instruments.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Instrument {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of instruments.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of board games.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BoardGame {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of board games.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the location of weather stations.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeatherStation {\n      location\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the location of weather stations.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the titles of movies.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Movie {\n      title\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the titles of movies.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of AI models.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    AIModel {\n      modelName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of AI models.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the make of cars.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car {\n      make\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the make of cars.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the case title of legal cases.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase {\n      caseTitle\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the case title of legal cases.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the device names of smart devices.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SmartDevice {\n      deviceName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the device names of smart devices.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the gear names of outdoor gear.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OutdoorGear {\n      gearName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the gear names of outdoor gear.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of restaurants.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Restaurant {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of restaurants.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the content of posts.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Post {\n      content\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the content of posts.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of animals.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Animal {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of animals.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of fashion brands.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FashionBrand {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of fashion brands.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the repository names of code repositories.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CodeRepository {\n      repositoryName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the repository names of code repositories.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of wines.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of wines.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of patients.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Patient {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of patients.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the model of telescopes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Telescope {\n      model\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the model of telescopes.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of products.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of products.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of startups.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Startup {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of startups.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title of events.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Event {\n      title\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title of events.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of news outlets.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NewsOutlet {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of news outlets.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title of games.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Game {\n      title\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title of games.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title of artwork.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Artwork {\n      title\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title of artwork.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the make of cars.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car {\n      make\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the make of cars.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the full names of contacts.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Contact {\n      fullName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the full names of contacts.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of airlines.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Airline {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of airlines.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title of books.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Book {\n      title\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title of books.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of cryptocurrencies.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Cryptocurrency {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of cryptocurrencies.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of employees.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Employee {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of employees.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of products.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of products.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of museums.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Museum {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of museums.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of teams.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of teams.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of coffee shops.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CoffeeShop {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of coffee shops.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the address of houses.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    House {\n      address\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the address of houses.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of diet plans.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DietPlan {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of diet plans.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of craft beers.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CraftBeer {\n      beerName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of craft beers.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of spas.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Spa {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of spas.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title of courses.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Course {\n      title\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title of courses.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title of papers.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Paper {\n      title\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title of papers.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title of job listings.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JobListing {\n      title\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title of job listings.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of programming languages.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ProgrammingLanguage {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of programming languages.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the historical event objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HistoricalEvent {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the historical event objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the TV series objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TVSeries {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the TV series objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the workout objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Workout {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the workout objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the song objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Song {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the song objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the plant objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the plant objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the recipe objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Recipe {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the recipe objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the destination objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Destination {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the destination objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the aquarium objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Aquarium {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the aquarium objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the yoga pose objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    YogaPose {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the yoga pose objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the PodClip objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PodClip {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the PodClip objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the instrument objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Instrument {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the instrument objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the board game objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BoardGame {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the board game objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the weather station objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeatherStation {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the weather station objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the movie objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Movie {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the movie objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the AIModel objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    AIModel {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the AIModel objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the car objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the car objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the legal case objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the legal case objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the smart device objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SmartDevice {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the smart device objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the outdoor gear objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OutdoorGear {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the outdoor gear objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the restaurant objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Restaurant {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the restaurant objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the post objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Post {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the post objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the animal objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Animal {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the animal objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the fashion brand objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FashionBrand {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the fashion brand objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the code repository objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CodeRepository {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the code repository objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the wine objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the wine objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the patient objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Patient {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the patient objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the telescope objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Telescope {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the telescope objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the product objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the product objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the startup objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Startup {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the startup objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the event objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Event {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the event objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the news outlet objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NewsOutlet {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the news outlet objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the game objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Game {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the game objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the artwork objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Artwork {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the artwork objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the car objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the car objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the contact objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Contact {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the contact objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the airline objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Airline {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the airline objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the book objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Book {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the book objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the cryptocurrency objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Cryptocurrency {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the cryptocurrency objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the employee objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Employee {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the employee objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the product objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the product objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the museum objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Museum {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the museum objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the team objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the team objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the coffee shop objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CoffeeShop {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the coffee shop objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the house objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    House {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the house objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the diet plan objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DietPlan {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the diet plan objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the CraftBeer objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CraftBeer {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the CraftBeer objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the spa objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Spa {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the spa objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the course objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Course {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the course objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the paper objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Paper {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the paper objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the job listing objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JobListing {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the job listing objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the programming language objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ProgrammingLanguage {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the programming language objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 chemical compounds with BM25 keyword scoring to 'water' in the compound name, and show the compound name, formula, molar mass, and the elements it contains with their names, symbols, atomic numbers, and whether they are metals.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ChemicalCompound(\n      bm25: {\n        query: \"water\",\n        properties: [\"compoundName\"]\n      },\n      limit: 5\n    ) {\n      compoundName\n      formula\n      molarMass\n      containsElements {\n        ... on ChemicalElement {\n          elementName\n          symbol\n          atomicNumber\n          isMetal\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 chemical compounds with BM25 keyword scoring to 'water' in the compound name, and show the compound name, formula, molar mass, and the elements it contains with their names, symbols, atomic numbers, and whether they are metals.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 marine species with BM25 keyword scoring to 'coral reef' in the species name, and show the species name, habitat, conservation status, and researcher's name and research area.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MarineSpecies(\n      bm25: {\n        query: \"coral reef\",\n        properties: [\"speciesName\"]\n      },\n      limit: 5\n    ) {\n      speciesName\n      habitat\n      conservationStatus\n      researcher {\n        ... on MarineBiologist {\n          biologistName\n          researchArea\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 marine species with BM25 keyword scoring to 'coral reef' in the species name, and show the species name, habitat, conservation status, and researcher's name and research area.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 robots with BM25 keyword scoring to 'autonomous' in the function, and show the robot name, function, manufacturer's company name, founded year, and specialization.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Robot(\n      bm25: {\n        query: \"autonomous\",\n        properties: [\"function\"]\n      },\n      limit: 5\n    ) {\n      robotName\n      function\n      manufacturer {\n        ... on RoboticsCompany {\n          companyName\n          foundedYear\n          specialization\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 robots with BM25 keyword scoring to 'autonomous' in the function, and show the robot name, function, manufacturer's company name, founded year, and specialization.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}", "schemaPath": "robotics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 civilizations with BM25 keyword scoring to 'Egypt' in the civilization name, and show the civilization name, time period, notable technologies, languages, and major ruins' site name and location.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Civilization(\n      bm25: {\n        query: \"Egypt\",\n        properties: [\"civilizationName\"]\n      },\n      limit: 5\n    ) {\n      civilizationName\n      timePeriod\n      notableTechnologies\n      languages\n      majorRuins {\n        ... on Ruins {\n          siteName\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 civilizations with BM25 keyword scoring to 'Egypt' in the civilization name, and show the civilization name, time period, notable technologies, languages, and major ruins' site name and location.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}", "schemaPath": "ancientcivilization.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the streaming platform with the highest BM25 keyword scoring to 'Netflix' in the platform name. Show me the platform name, overview, subscription cost, available regions, and the top shows with their titles, genres, release years, and descriptions.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    StreamingPlatform(\n      bm25: {\n        query: \"Netflix\",\n        properties: [\"platformName\"]\n      },\n      limit: 1\n    ) {\n      platformName\n      overview\n      subscriptionCost\n      availableRegions\n      topShows {\n        ... on Show {\n          title\n          genre\n          releaseYear\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the streaming platform with the highest BM25 keyword scoring to 'Netflix' in the platform name. Show me the platform name, overview, subscription cost, available regions, and the top shows with their titles, genres, release years, and descriptions.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 cosmetic products with BM25 keyword scoring to 'lipstick' in the product name, and show the product name, brand name, type, shade, ingredients, and whether it is vegan.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CosmeticProduct(\n      bm25: {\n        query: \"lipstick\",\n        properties: [\"productName\"]\n      },\n      limit: 5\n    ) {\n      productName\n      brand {\n        ... on Brand {\n          brandName\n        }\n      }\n      type\n      shade\n      ingredients\n      isVegan\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 cosmetic products with BM25 keyword scoring to 'lipstick' in the product name, and show the product name, brand name, type, shade, ingredients, and whether it is vegan.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}", "schemaPath": "cosmetics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 energy sources with BM25 keyword scoring to 'solar' in the source type, and show the source type, description, annual output, residential availability, and provider's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EnergySource(\n      bm25: {\n        query: \"solar\",\n        properties: [\"sourceType\"]\n      },\n      limit: 5\n    ) {\n      sourceType\n      description\n      annualOutput\n      isResidential\n      provider {\n        ... on EnergyProvider {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 energy sources with BM25 keyword scoring to 'solar' in the source type, and show the source type, description, annual output, residential availability, and provider's company name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 plants with BM25 keyword scoring to 'rose' in the common name, and show the common name, scientific name, habitat, growth habit, endangered status, and fertilizer needs including the type and application frequency.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      bm25: {\n        query: \"rose\",\n        properties: [\"commonName\"]\n      },\n      limit: 5\n    ) {\n      commonName\n      scientificName\n      habitat\n      growthHabit\n      isEndangered\n      fertilizerNeeds {\n        ... on Fertilizer {\n          type\n          applicationFrequency\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 plants with BM25 keyword scoring to 'rose' in the common name, and show the common name, scientific name, habitat, growth habit, endangered status, and fertilizer needs including the type and application frequency.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}", "schemaPath": "plants.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 persons with BM25 keyword scoring to 'John' in the full name, and show the full name, birth year, deceased status, parents' full names, and DNA test results including the test provider, match percentage, and whether maternal and paternal lines are tested.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Person(\n      bm25: {\n        query: \"John\",\n        properties: [\"fullName\"]\n      },\n      limit: 5\n    ) {\n      fullName\n      birthYear\n      isDeceased\n      parents {\n        ... on Person {\n          fullName\n        }\n      }\n      dnatest {\n        ... on DNATestResult {\n          testProvider\n          matchPercentage\n          isMaternalLineTested\n          isPaternalLineTested\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 persons with BM25 keyword scoring to 'John' in the full name, and show the full name, birth year, deceased status, parents' full names, and DNA test results including the test provider, match percentage, and whether maternal and paternal lines are tested.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 candles with BM25 keyword scoring to 'vanilla' in the candle name, and show the candle name, scent, burn time, price, manufacturer's name, location, and contact.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Candle(\n      bm25: {\n        query: \"vanilla\",\n        properties: [\"candleName\"]\n      },\n      limit: 5\n    ) {\n      candleName\n      scent\n      burnTime\n      price\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 candles with BM25 keyword scoring to 'vanilla' in the candle name, and show the candle name, scent, burn time, price, manufacturer's name, location, and contact.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "candles.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 comedy specials with BM25 keyword scoring to 'funny' in the special title, and show the special title, description, duration, comedian's name, and biography.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ComedySpecial(\n      bm25: {\n        query: \"funny\",\n        properties: [\"specialTitle\"]\n      },\n      limit: 5\n    ) {\n      specialTitle\n      description\n      duration\n      comedian {\n        ... on Comedian {\n          comedianName\n          biography\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 comedy specials with BM25 keyword scoring to 'funny' in the special title, and show the special title, description, duration, comedian's name, and biography.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 mobile apps with BM25 keyword scoring to 'social media' in the app name, and show the app name, description, developer, rating, whether it is free, and the supported operating system name and version.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MobileApp(\n      bm25: {\n        query: \"social media\",\n        properties: [\"appName\"]\n      },\n      limit: 10\n    ) {\n      appName\n      description\n      developer\n      rating\n      isFree\n      supportedOS {\n        ... on OperatingSystem {\n          osName\n          version\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 mobile apps with BM25 keyword scoring to 'social media' in the app name, and show the app name, description, developer, rating, whether it is free, and the supported operating system name and version.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}", "schemaPath": "mobileapplications.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 magic tricks with BM25 keyword scoring to 'levitation' in the trick name, and show the trick name, description, difficulty level, and performer's magician name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MagicTrick(\n      bm25: {\n        query: \"levitation\",\n        properties: [\"trickName\"]\n      },\n      limit: 5\n    ) {\n      trickName\n      description\n      difficultyLevel\n      performer {\n        ... on Magician {\n          magicianName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 magic tricks with BM25 keyword scoring to 'levitation' in the trick name, and show the trick name, description, difficulty level, and performer's magician name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 fireworks with BM25 keyword scoring to 'sparkler' in the firework name, and show the firework name, effects, duration, safety guidelines, manufacturer's name, location, and contact.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Firework(\n      bm25: {\n        query: \"sparkler\",\n        properties: [\"fireworkName\"]\n      },\n      limit: 5\n    ) {\n      fireworkName\n      effects\n      duration\n      safetyGuidelines\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 fireworks with BM25 keyword scoring to 'sparkler' in the firework name, and show the firework name, effects, duration, safety guidelines, manufacturer's name, location, and contact.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "fireworks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 esports teams with BM25 keyword scoring to 'competitive' in the team name, and show the team name, members' player name, nickname, game specialization, years active, retirement status, games played, tournament wins count, and activity status.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EsportsTeam(\n      bm25: {\n        query: \"competitive\",\n        properties: [\"teamName\"]\n      },\n      limit: 10\n    ) {\n      teamName\n      members {\n        ... on Player {\n          playerName\n          nickname\n          gameSpecialization\n          yearsActive\n          isRetired\n        }\n      }\n      gamesPlayed\n      tournamentWinsCount\n      isActive\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 esports teams with BM25 keyword scoring to 'competitive' in the team name, and show the team name, members' player name, nickname, game specialization, years active, retirement status, games played, tournament wins count, and activity status.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 doctors specializing in cardiology, ranked by BM25 keyword scoring to 'cardiology' in the specialization, and show their names, years of experience, and clinic details including clinic name, location, and operational hours.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Doctor(\n      bm25: {\n        query: \"cardiology\",\n        properties: [\"specialization\"]\n      },\n      limit: 5\n    ) {\n      doctorName\n      specialization\n      yearsOfExperience\n      clinic {\n        ... on Clinic {\n          clinicName\n          location\n          operationalHours\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 doctors specializing in cardiology, ranked by BM25 keyword scoring to 'cardiology' in the specialization, and show their names, years of experience, and clinic details including clinic name, location, and operational hours.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 colleges with BM25 keyword scoring to 'computer science' in the college name, and show the college name, location, established year, description, and courses with their names, durations, and descriptions.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    College(\n      bm25: {\n        query: \"computer science\",\n        properties: [\"collegeName\"]\n      },\n      limit: 10\n    ) {\n      collegeName\n      location\n      establishedYear\n      description\n      courses {\n        ... on Course {\n          courseName\n          duration\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 colleges with BM25 keyword scoring to 'computer science' in the college name, and show the college name, location, established year, description, and courses with their names, durations, and descriptions.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 home appliances with BM25 keyword scoring to 'refrigerator' in the appliance name, and show the appliance name, brand, type, energy rating, whether it is a smart device, price, and warranty duration and coverage.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HomeAppliance(\n      bm25: {\n        query: \"refrigerator\",\n        properties: [\"applianceName\"]\n      },\n      limit: 5\n    ) {\n      applianceName\n      brand\n      type\n      energyRating\n      isSmartDevice\n      price\n      warranty {\n        ... on Warranty {\n          duration\n          coverage\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 home appliances with BM25 keyword scoring to 'refrigerator' in the appliance name, and show the appliance name, brand, type, energy rating, whether it is a smart device, price, and warranty duration and coverage.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 VR experiences with BM25 keyword scoring to 'action' in the title, and show the title, developer's name, genre, release year, and multiplayer availability.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    VRExperience(\n      bm25: {\n        query: \"action\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      developer {\n        ... on Developer {\n          name\n        }\n      }\n      genre\n      releaseYear\n      isMultiplayer\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 VR experiences with BM25 keyword scoring to 'action' in the title, and show the title, developer's name, genre, release year, and multiplayer availability.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 toys with BM25 keyword scoring to 'action figure' in the toy name, and show the toy name, brand, recommended age, battery-operated status, price, and related board game's name, description, and number of players.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Toy(\n      bm25: {\n        query: \"action figure\",\n        properties: [\"toyName\"]\n      },\n      limit: 5\n    ) {\n      toyName\n      brand\n      recommendedAge\n      isBatteryOperated\n      price\n      relatedGame {\n        ... on BoardGame {\n          gameName\n          description\n          numberOfPlayers\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 toys with BM25 keyword scoring to 'action figure' in the toy name, and show the toy name, brand, recommended age, battery-operated status, price, and related board game's name, description, and number of players.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 drugs with BM25 keyword scoring to 'headache' in the drug name, and show the drug name, active ingredient, approval year, over-the-counter availability, and manufacturer's company name, founded year, headquarters, and global presence.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Drug(\n      bm25: {\n        query: \"headache\",\n        properties: [\"drugName\"]\n      },\n      limit: 5\n    ) {\n      drugName\n      activeIngredient\n      approvalYear\n      isOTC\n      manufacturer {\n        ... on Manufacturer {\n          companyName\n          foundedYear\n          headquarters\n          isGlobal\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 drugs with BM25 keyword scoring to 'headache' in the drug name, and show the drug name, active ingredient, approval year, over-the-counter availability, and manufacturer's company name, founded year, headquarters, and global presence.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 rollercoasters with BM25 keyword scoring to 'fast' in the name or description. Show me the name, description, height, operating status, and the park's name and location.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Rollercoaster(\n      bm25: {\n        query: \"fast\",\n        properties: [\"name\", \"description\"]\n      },\n      limit: 3\n    ) {\n      name\n      description\n      height\n      isOperating\n      park {\n        ... on AmusementPark {\n          name\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 rollercoasters with BM25 keyword scoring to 'fast' in the name or description. Show me the name, description, height, operating status, and the park's name and location.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 furniture items with BM25 keyword scoring to 'chair' in the furniture name, and show the furniture name, material, dimensions, price, manufacturer's name, location, and contact.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Furniture(\n      bm25: {\n        query: \"chair\",\n        properties: [\"furnitureName\"]\n      },\n      limit: 5\n    ) {\n      furnitureName\n      material\n      dimensions\n      price\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 furniture items with BM25 keyword scoring to 'chair' in the furniture name, and show the furniture name, material, dimensions, price, manufacturer's name, location, and contact.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "furniture.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 digital artworks with BM25 keyword scoring to 'abstract' in the description, and show the title, artist's name and portfolio link, description, year, medium, and availability for sale.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DigitalArtwork(\n      bm25: {\n        query: \"abstract\",\n        properties: [\"description\"]\n      },\n      limit: 5\n    ) {\n      title\n      artist {\n        ... on Artist {\n          name\n          portfolioLink\n        }\n      }\n      description\n      year\n      medium\n      isForSale\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 digital artworks with BM25 keyword scoring to 'abstract' in the description, and show the title, artist's name and portfolio link, description, year, medium, and availability for sale.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 gyms with BM25 keyword scoring to 'treadmill' in the equipment, and show the gym name, location, equipment, membership price, and classes offered with their names, durations, instructors, and descriptions.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Gym(\n      bm25: {\n        query: \"treadmill\",\n        properties: [\"equipment\"]\n      },\n      limit: 10\n    ) {\n      gymName\n      location\n      equipment\n      membershipPrice\n      classesOffered {\n        ... on FitnessClass {\n          className\n          duration\n          instructor\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 gyms with BM25 keyword scoring to 'treadmill' in the equipment, and show the gym name, location, equipment, membership price, and classes offered with their names, durations, instructors, and descriptions.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}", "schemaPath": "gyms.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 film festivals with BM25 keyword scoring to 'Cannes' in the festival name, and show the festival name, location, description, and featured film's title and director.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FilmFestival(\n      bm25: {\n        query: \"Cannes\",\n        properties: [\"festivalName\"]\n      },\n      limit: 3\n    ) {\n      festivalName\n      location\n      description\n      featuredFilm {\n        ... on Film {\n          filmTitle\n          director\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 film festivals with BM25 keyword scoring to 'Cannes' in the festival name, and show the festival name, location, description, and featured film's title and director.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}", "schemaPath": "filmfestivals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 local businesses with BM25 keyword scoring to 'restaurant' in the business name. Show me the business name, description, address, contact number, opening status, rating, and services with their respective service names and prices.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LocalBusiness(\n      bm25: {\n        query: \"restaurant\",\n        properties: [\"businessName\"]\n      },\n      limit: 10\n    ) {\n      businessName\n      description\n      address\n      contactNumber\n      isOpen\n      rating\n      services {\n        ... on Service {\n          serviceName\n          price\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 local businesses with BM25 keyword scoring to 'restaurant' in the business name. Show me the business name, description, address, contact number, opening status, rating, and services with their respective service names and prices.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 boats with BM25 keyword scoring to 'sailboat' in the type, and show the boat name, type, capacity, motorization status, and manufacturer's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Boat(\n      bm25: {\n        query: \"sailboat\",\n        properties: [\"type\"]\n      },\n      limit: 5\n    ) {\n      boatName\n      type\n      capacity\n      isMotorized\n      manufacturer {\n        ... on BoatManufacturer {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 boats with BM25 keyword scoring to 'sailboat' in the type, and show the boat name, type, capacity, motorization status, and manufacturer's company name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 pottery items with BM25 keyword scoring to 'vase' in the item name, and show the item name, description, type, date created, potter's name, biography, and studio location.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PotteryItem(\n      bm25: {\n        query: \"vase\",\n        properties: [\"itemName\"]\n      },\n      limit: 5\n    ) {\n      itemName\n      description\n      type\n      dateCreated\n      craftsman {\n        ... on Potter {\n          potterName\n          biography\n          studioLocation\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 pottery items with BM25 keyword scoring to 'vase' in the item name, and show the item name, description, type, date created, potter's name, biography, and studio location.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}", "schemaPath": "pottery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 national parks with BM25 keyword scoring to 'mountain' in the description, and show the park name, description, location, established year, entry fee status, wildlife, and facilities with their names and descriptions.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NationalPark(\n      bm25: {\n        query: \"mountain\",\n        properties: [\"description\"]\n      },\n      limit: 3\n    ) {\n      parkName\n      description\n      location\n      establishedYear\n      isEntryFree\n      wildlife\n      facilities {\n        ... on Facility {\n          facilityName\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 national parks with BM25 keyword scoring to 'mountain' in the description, and show the park name, description, location, established year, entry fee status, wildlife, and facilities with their names and descriptions.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 wedding venues with BM25 keyword scoring to 'outdoor' in the name, and show the name, location, capacity, availability of indoor facility, and vendor details including vendor name, service type, years in business, and if they offer any discounts.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeddingVenue(\n      bm25: {\n        query: \"outdoor\",\n        properties: [\"name\"]\n      },\n      limit: 3\n    ) {\n      name\n      location\n      capacity\n      hasIndoorFacility\n      vendors {\n        ... on Vendor {\n          vendorName\n          serviceType\n          yearsInBusiness\n          offersDiscount\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 wedding venues with BM25 keyword scoring to 'outdoor' in the name, and show the name, location, capacity, availability of indoor facility, and vendor details including vendor name, service type, years in business, and if they offer any discounts.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}", "schemaPath": "weddings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 language courses with BM25 keyword scoring to 'beginner' in the difficulty level, and show the course name, language taught, difficulty level, platform name, and website.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LanguageCourse(\n      bm25: {\n        query: \"beginner\",\n        properties: [\"difficultyLevel\"]\n      },\n      limit: 5\n    ) {\n      courseName\n      languageTaught\n      difficultyLevel\n      platform {\n        ... on LearningPlatform {\n          platformName\n          website\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 language courses with BM25 keyword scoring to 'beginner' in the difficulty level, and show the course name, language taught, difficulty level, platform name, and website.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 pets with BM25 keyword scoring to 'dog' in the pet name, and show the pet name, species, breed, age, owner's full name, address, and contact number.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Pet(\n      bm25: {\n        query: \"dog\",\n        properties: [\"petName\"]\n      },\n      limit: 5\n    ) {\n      petName\n      species\n      breed\n      age\n      owner {\n        ... on Person {\n          fullName\n          address\n          contactNumber\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 pets with BM25 keyword scoring to 'dog' in the pet name, and show the pet name, species, breed, age, owner's full name, address, and contact number.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 literary awards with BM25 keyword scoring to 'Nobel Prize' in the award name, and show the award name, year established, awarding organization's name, and covered genres.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LiteraryAward(\n      bm25: {\n        query: \"Nobel Prize\",\n        properties: [\"awardName\"]\n      },\n      limit: 3\n    ) {\n      awardName\n      yearEstablished\n      awardingOrganization {\n        ... on Organization {\n          organizationName\n        }\n      }\n      genresCovered\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 literary awards with BM25 keyword scoring to 'Nobel Prize' in the award name, and show the award name, year established, awarding organization's name, and covered genres.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 jewelry items with BM25 keyword scoring to 'diamond' in the name, and show the name, material, gemstone's name and hardness, price, and whether it is handmade.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JewelryItem(\n      bm25: {\n        query: \"diamond\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      material\n      gemstone {\n        ... on Gemstone {\n          name\n          hardness\n        }\n      }\n      price\n      isHandmade\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 jewelry items with BM25 keyword scoring to 'diamond' in the name, and show the name, material, gemstone's name and hardness, price, and whether it is handmade.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 research institutes with BM25 keyword scoring to 'technology' in the overview, and show the institute name, overview, location, affiliated university's name, campus location, and establishment year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ResearchInstitute(\n      bm25: {\n        query: \"technology\",\n        properties: [\"overview\"]\n      },\n      limit: 5\n    ) {\n      instituteName\n      overview\n      location\n      affiliatedUniversity {\n        ... on University {\n          name\n          campusLocation\n          establishmentYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 research institutes with BM25 keyword scoring to 'technology' in the overview, and show the institute name, overview, location, affiliated university's name, campus location, and establishment year.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}", "schemaPath": "researchinstitute.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 banking services with BM25 keyword scoring to 'online banking' in the service name, and show the service name, features, bank name, and headquarters.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BankingService(\n      bm25: {\n        query: \"online banking\",\n        properties: [\"serviceName\"]\n      },\n      limit: 5\n    ) {\n      serviceName\n      features\n      bank {\n        ... on Bank {\n          bankName\n          headquarters\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 banking services with BM25 keyword scoring to 'online banking' in the service name, and show the service name, features, bank name, and headquarters.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}", "schemaPath": "onlinebanking.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 operating systems with BM25 keyword scoring to 'Windows' in the osName, and show the osName, version, supported devices, and parent company's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OperatingSystem(\n      bm25: {\n        query: \"Windows\",\n        properties: [\"osName\"]\n      },\n      limit: 5\n    ) {\n      osName\n      version\n      supportedDevices\n      parentCompany {\n        ... on Company {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 operating systems with BM25 keyword scoring to 'Windows' in the osName, and show the osName, version, supported devices, and parent company's name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "operatingsystem.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 freelancers with BM25 keyword scoring to 'web development' in their skills. Show their freelancer name, skills, rate, portfolio, and client reviews including client name, review text, and rating.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Freelancer(\n      bm25: {\n        query: \"web development\",\n        properties: [\"skills\"]\n      },\n      limit: 5\n    ) {\n      freelancerName\n      skills\n      rate\n      portfolio\n      clientReviews {\n        ... on ClientReview {\n          clientName\n          reviewText\n          rating\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 freelancers with BM25 keyword scoring to 'web development' in their skills. Show their freelancer name, skills, rate, portfolio, and client reviews including client name, review text, and rating.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}", "schemaPath": "freelancers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 tea shops with BM25 keyword scoring to 'green tea' in the shop name, and show the shop name, location, and details of the best-selling teas including the tea name, origin, and flavor profile.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TeaShop(\n      bm25: {\n        query: \"green tea\",\n        properties: [\"shopName\"]\n      },\n      limit: 5\n    ) {\n      shopName\n      location\n      bestSellingTeas {\n        ... on TeaVariety {\n          teaName\n          origin\n          flavorProfile\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 tea shops with BM25 keyword scoring to 'green tea' in the shop name, and show the shop name, location, and details of the best-selling teas including the tea name, origin, and flavor profile.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}", "schemaPath": "teashops.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 space missions with BM25 keyword scoring to 'moon landing' in the mission name, and show the mission name, objective, launch year, mission status, space agency's name, founded year, and headquarters.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SpaceMission(\n      bm25: {\n        query: \"moon landing\",\n        properties: [\"missionName\"]\n      },\n      limit: 5\n    ) {\n      missionName\n      objective\n      launchYear\n      missionStatus\n      spaceAgency {\n        ... on SpaceAgency {\n          agencyName\n          foundedYear\n          headquarters\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 space missions with BM25 keyword scoring to 'moon landing' in the mission name, and show the mission name, objective, launch year, mission status, space agency's name, founded year, and headquarters.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the biography of Albert Einstein, including the subject name, overview, author's name, author's bio, number of published works, and publication year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Biography(\n      bm25: {\n        query: \"Albert Einstein\",\n        properties: [\"subjectName\"]\n      },\n      limit: 1\n    ) {\n      subjectName\n      overview\n      author {\n        ... on Author {\n          name\n          bio\n          publishedWorksCount\n        }\n      }\n      publicationYear\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the biography of Albert Einstein, including the subject name, overview, author's name, author's bio, number of published works, and publication year.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 Nanotech Applications with BM25 keyword scoring to 'nanoparticles' in the application name, and show the application name, overview, and leading researchers' names and affiliations.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NanotechApplication(\n      bm25: {\n        query: \"nanoparticles\",\n        properties: [\"applicationName\"]\n      },\n      limit: 5\n    ) {\n      applicationName\n      overview\n      leadingResearchers {\n        ... on Researcher {\n          name\n          affiliation\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 Nanotech Applications with BM25 keyword scoring to 'nanoparticles' in the application name, and show the application name, overview, and leading researchers' names and affiliations.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}", "schemaPath": "nanotechnology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 non-profit organizations with BM25 keyword scoring to 'education' in the focus area, and show the name, mission, founded year, focus area, and founder's full name and bio.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NonProfit(\n      bm25: {\n        query: \"education\",\n        properties: [\"focusArea\"]\n      },\n      limit: 5\n    ) {\n      name\n      mission\n      foundedYear\n      focusArea\n      founder {\n        ... on Person {\n          fullName\n          bio\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 non-profit organizations with BM25 keyword scoring to 'education' in the focus area, and show the name, mission, founded year, focus area, and founder's full name and bio.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 hiking trails with BM25 keyword scoring to 'mountain' in the trail name, and show the trail name, location, length in kilometers, difficulty level, and the nearest town's name and population.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HikingTrail(\n      bm25: {\n        query: \"mountain\",\n        properties: [\"trailName\"]\n      },\n      limit: 5\n    ) {\n      trailName\n      location\n      lengthKm\n      difficultyLevel\n      nearestTown {\n        ... on Town {\n          townName\n          population\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 hiking trails with BM25 keyword scoring to 'mountain' in the trail name, and show the trail name, location, length in kilometers, difficulty level, and the nearest town's name and population.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}", "schemaPath": "hikingtrails.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 food trucks with BM25 keyword scoring to 'tacos' in the truck name, and show the truck name, cuisine type, location, and owner's entrepreneur name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FoodTruck(\n      bm25: {\n        query: \"tacos\",\n        properties: [\"truckName\"]\n      },\n      limit: 5\n    ) {\n      truckName\n      cuisineType\n      location\n      owner {\n        ... on FoodEntrepreneur {\n          entrepreneurName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 food trucks with BM25 keyword scoring to 'tacos' in the truck name, and show the truck name, cuisine type, location, and owner's entrepreneur name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}", "schemaPath": "foodtrucks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 AR applications with BM25 keyword scoring to 'augmented reality' in the description, and show the application name, description, platform, and developer's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ARApplication(\n      bm25: {\n        query: \"augmented reality\",\n        properties: [\"description\"]\n      },\n      limit: 5\n    ) {\n      appName\n      description\n      platform\n      developer {\n        ... on SoftwareCompany {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 AR applications with BM25 keyword scoring to 'augmented reality' in the description, and show the application name, description, platform, and developer's company name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and most commonly occurring names of Chemical Elements in the database, as well as the sum of atomic numbers.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ChemicalElement {\n      elementName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      atomicNumber {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and most commonly occurring names of Chemical Elements in the database, as well as the sum of atomic numbers.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and top occurrences of species names and conservation statuses for Marine Species in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    MarineSpecies {\n      speciesName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      conservationStatus {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and top occurrences of species names and conservation statuses for Marine Species in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and top occurrences of civilization names and notable technologies in the Civilization database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Civilization {\n      civilizationName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      notableTechnologies {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and top occurrences of civilization names and notable technologies in the Civilization database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}", "schemaPath": "ancientcivilization.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count, type, and top occurrences of platform names and subscription costs for the Streaming Platforms in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    StreamingPlatform {\n      platformName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      subscriptionCost {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count, type, and top occurrences of platform names and subscription costs for the Streaming Platforms in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and the most commonly occurring source types of Energy Sources in the database. Also, show me the count and the sum of annual outputs of the Energy Sources.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    EnergySource {\n      sourceType {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      annualOutput {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and the most commonly occurring source types of Energy Sources in the database. Also, show me the count and the sum of annual outputs of the Energy Sources.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique full names and the sum of birth years of the Persons in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Person {\n      fullName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      birthYear {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique full names and the sum of birth years of the Persons in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique candle names and the sum of burn times of the Candles in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Candle {\n      candleName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      burnTime {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique candle names and the sum of burn times of the Candles in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "candles.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique special titles and the most commonly occurring durations of Comedy Specials in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ComedySpecial {\n      specialTitle {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      duration {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique special titles and the most commonly occurring durations of Comedy Specials in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and top occurrences of trick names and difficulty levels for Magic Tricks in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    MagicTrick {\n      trickName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      difficultyLevel {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and top occurrences of trick names and difficulty levels for Magic Tricks in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique firework names and the total duration of all fireworks in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Firework {\n      fireworkName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      duration {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique firework names and the total duration of all fireworks in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "fireworks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and type of unique team names and the total number of tournament wins for Esports Teams in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    EsportsTeam {\n      teamName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      tournamentWinsCount {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and type of unique team names and the total number of tournament wins for Esports Teams in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique doctor names and the sum of years of experience of the Doctors in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Doctor {\n      doctorName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      yearsOfExperience {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique doctor names and the sum of years of experience of the Doctors in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique full names and the sum of years active of the Photographers in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Photographer {\n      fullName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      yearsActive {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique full names and the sum of years active of the Photographers in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique college names and the sum of established years of the Colleges in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    College {\n      collegeName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      establishedYear {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique college names and the sum of established years of the Colleges in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and the most commonly occurring appliance names, as well as the total energy rating of all Home Appliances in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    HomeAppliance {\n      applianceName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      energyRating {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and the most commonly occurring appliance names, as well as the total energy rating of all Home Appliances in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and the most commonly occurring titles of the VRExperience objects in the database. Also, show me the count and the sum of the release years of the VRExperience objects in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    VRExperience {\n      title {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      releaseYear {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and the most commonly occurring titles of the VRExperience objects in the database. Also, show me the count and the sum of the release years of the VRExperience objects in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique toy names and the sum of recommended ages of the Toys in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Toy {\n      toyName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      recommendedAge {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique toy names and the sum of recommended ages of the Toys in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique drug names and the sum of approval years for the Drugs in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Drug {\n      drugName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      approvalYear {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique drug names and the sum of approval years for the Drugs in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of heights of the Rollercoasters in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Rollercoaster {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      height {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of heights of the Rollercoasters in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and sum of prices for each unique furniture name in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Furniture {\n      furnitureName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      price {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and sum of prices for each unique furniture name in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "furniture.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique titles and the sum of years of the DigitalArtwork in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    DigitalArtwork {\n      title {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      year {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique titles and the sum of years of the DigitalArtwork in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and types of unique gym names, as well as the sum of membership prices for all gyms in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Gym {\n      gymName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      membershipPrice {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and types of unique gym names, as well as the sum of membership prices for all gyms in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}", "schemaPath": "gyms.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and the sum of ratings for each LocalBusiness in the database. Also, show me the most commonly occurring business names.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    LocalBusiness {\n      businessName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      rating {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and the sum of ratings for each LocalBusiness in the database. Also, show me the most commonly occurring business names.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and type of unique boat names, as well as the total capacity of all boats in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Boat {\n      boatName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      capacity {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and type of unique boat names, as well as the total capacity of all boats in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and the sum of established years of the National Parks in the database. Also, show me the most commonly occurring park names.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    NationalPark {\n      parkName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      establishedYear {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and the sum of established years of the National Parks in the database. Also, show me the most commonly occurring park names.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of capacities of the Wedding Venues in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    WeddingVenue {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      capacity {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of capacities of the Wedding Venues in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}", "schemaPath": "weddings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and top occurrences of course names and difficulty levels in the LanguageCourse collection.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    LanguageCourse {\n      courseName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      difficultyLevel {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and top occurrences of course names and difficulty levels in the LanguageCourse collection.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique pet names and the sum of ages of the Pets in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Pet {\n      petName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      age {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique pet names and the sum of ages of the Pets in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and type of unique award names and the sum of the established years of the Literary Awards in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    LiteraryAward {\n      awardName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      yearEstablished {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and type of unique award names and the sum of the established years of the Literary Awards in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and sum of prices for each unique name of JewelryItem in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    JewelryItem {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      price {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and sum of prices for each unique name of JewelryItem in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and top occurrences of institute names and locations in the Research Institute database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ResearchInstitute {\n      instituteName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      location {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and top occurrences of institute names and locations in the Research Institute database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}", "schemaPath": "researchinstitute.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and top occurrences of the service names and features in the BankingService database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    BankingService {\n      serviceName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      features {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and top occurrences of the service names and features in the BankingService database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}", "schemaPath": "onlinebanking.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and the most commonly occurring operating system names and supported devices in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    OperatingSystem {\n      osName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      supportedDevices {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and the most commonly occurring operating system names and supported devices in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "operatingsystem.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique freelancer names and the sum of rates of the Freelancers in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Freelancer {\n      freelancerName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      rate {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique freelancer names and the sum of rates of the Freelancers in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}", "schemaPath": "freelancers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique mission names and the sum of launch years of the Space Missions in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    SpaceMission {\n      missionName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      launchYear {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique mission names and the sum of launch years of the Space Missions in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique subject names and the sum of publication years of the Biographies in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Biography {\n      subjectName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      publicationYear {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique subject names and the sum of publication years of the Biographies in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique names and the sum of founded years of the NonProfit organizations in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    NonProfit {\n      name {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      foundedYear {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique names and the sum of founded years of the NonProfit organizations in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the number of unique trail names and the sum of lengths in kilometers of the Hiking Trails in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    HikingTrail {\n      trailName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      lengthKm {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the number of unique trail names and the sum of lengths in kilometers of the Hiking Trails in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}", "schemaPath": "hikingtrails.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count and the most commonly occurring values of the appName and platform properties for the ARApplications in the database.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ARApplication {\n      appName {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n      platform {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count and the most commonly occurring values of the appName and platform properties for the ARApplications in the database.\n```", "apiRef": "Retrieve aggregated object properties\n\nYou can retrieve aggregations of text, number, int, or boolean data types.\n\nThe available sub-types vary for each data type, except for type which is available to all, and count which is available to all but cross-references.\n\nExample with text\nThe following example retrieves information about the most commonly occurring examples in the question property:\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      answer {\n        count\n        type\n        topOccurrences {\n          occurs\n          value\n        }\n      }\n    }\n  }\n}\n```\n\nExample with int\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      points {\n        count\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of ChemicalElement objects\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ChemicalElement {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of ChemicalElement objects\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the MarineSpecies class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    MarineSpecies {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the MarineSpecies class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the Robot class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Robot {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the Robot class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}", "schemaPath": "robotics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the Civilization class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Civilization {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the Civilization class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}", "schemaPath": "ancientcivilization.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the StreamingPlatform class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    StreamingPlatform {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the StreamingPlatform class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the CosmeticProduct class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CosmeticProduct {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the CosmeticProduct class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}", "schemaPath": "cosmetics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the EnergySource class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    EnergySource {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the EnergySource class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Plant class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Plant {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Plant class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}", "schemaPath": "plants.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Person class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Person {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Person class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the Candle class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Candle {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the Candle class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "candles.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the ComedySpecial class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ComedySpecial {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the ComedySpecial class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the MobileApp class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    MobileApp {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the MobileApp class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}", "schemaPath": "mobileapplications.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the MagicTrick class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    MagicTrick {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the MagicTrick class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the EsportsTeam class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    EsportsTeam {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the EsportsTeam class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Doctor class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Doctor {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Doctor class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Photographer class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Photographer {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Photographer class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the College class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    College {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the College class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the HomeAppliance class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    HomeAppliance {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the HomeAppliance class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the VRExperience class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    VRExperience {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the VRExperience class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Toy class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Toy {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Toy class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the Drug class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Drug {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the Drug class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Furniture class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Furniture {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Furniture class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "furniture.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the DigitalArtwork class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    DigitalArtwork {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the DigitalArtwork class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Gym class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Gym {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Gym class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}", "schemaPath": "gyms.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the FilmFestival class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    FilmFestival {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the FilmFestival class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}", "schemaPath": "filmfestivals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the LocalBusiness class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    LocalBusiness {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the LocalBusiness class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Zoo class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Zoo {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Zoo class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}", "schemaPath": "zoos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the Boat class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Boat {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the Boat class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the PotteryItem class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    PotteryItem {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the PotteryItem class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}", "schemaPath": "pottery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the NationalPark class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    NationalPark {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the NationalPark class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the WeddingVenue class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    WeddingVenue {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the WeddingVenue class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}", "schemaPath": "weddings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the LanguageCourse class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    LanguageCourse {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the LanguageCourse class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Pet class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Pet {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Pet class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the LiteraryAward class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    LiteraryAward {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the LiteraryAward class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of JewelryItem objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    JewelryItem {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of JewelryItem objects.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the ResearchInstitute class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ResearchInstitute {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the ResearchInstitute class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}", "schemaPath": "researchinstitute.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the BankingService class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    BankingService {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the BankingService class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}", "schemaPath": "onlinebanking.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the OperatingSystem class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    OperatingSystem {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the OperatingSystem class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "operatingsystem.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the TeaShop class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    TeaShop {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the TeaShop class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}", "schemaPath": "teashops.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the SpaceMission class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    SpaceMission {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the SpaceMission class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the Biography class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Biography {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the Biography class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the NanotechApplication class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    NanotechApplication {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the NanotechApplication class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}", "schemaPath": "nanotechnology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the NonProfit class\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    NonProfit {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the NonProfit class\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the HikingTrail class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    HikingTrail {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the HikingTrail class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}", "schemaPath": "hikingtrails.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the FoodTruck class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    FoodTruck {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the FoodTruck class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}", "schemaPath": "foodtrucks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the ARApplication class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ARApplication {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the ARApplication class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average molar mass of ChemicalCompounds related to \"organic chemistry\" with a maximum distance of 0.15.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ChemicalCompound(\n      nearText: {\n        concepts: [\"organic chemistry\"],\n        distance: 0.15\n      }\n    ) {\n      molarMass {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average molar mass of ChemicalCompounds related to \"organic chemistry\" with a maximum distance of 0.15.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the count of MarineSpecies with a conservationStatus that are similar to \"coral reef\" with a maximum distance of 0.15?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    MarineSpecies(\n      nearText: {\n        concepts: [\"coral reef\"],\n        distance: 0.15\n      }\n    ) {\n      conservationStatus {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the count of MarineSpecies with a conservationStatus that are similar to \"coral reef\" with a maximum distance of 0.15?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the count of ingredients in CosmeticProducts that are similar to \"lipstick red\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CosmeticProduct(\n      nearText: {\n        concepts: [\"lipstick red\"],\n        distance: 0.3\n      }\n    ) {\n      ingredients {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the count of ingredients in CosmeticProducts that are similar to \"lipstick red\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}", "schemaPath": "cosmetics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average annualOutput of EnergySource objects related to \"solar energy\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    EnergySource(\n      nearText: {\n        concepts: [\"solar energy\"],\n        distance: 0.3\n      }\n    ) {\n      annualOutput {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average annualOutput of EnergySource objects related to \"solar energy\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average birthYear of Person with the name \"John Doe\" with a maximum distance of 0.1.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Person(\n      nearText: {\n        concepts: [\"John Doe\"],\n        distance: 0.1\n      }\n    ) {\n      birthYear {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average birthYear of Person with the name \"John Doe\" with a maximum distance of 0.1.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the total number of tournament wins for Esports Teams related to \"competitive gaming\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    EsportsTeam(\n      nearText: {\n        concepts: [\"competitive gaming\"],\n        distance: 0.3\n      }\n    ) {\n      tournamentWinsCount {\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the total number of tournament wins for Esports Teams related to \"competitive gaming\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average yearsOfExperience of Doctors specializing in \"Cardiology\" with a maximum distance of 0.2.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Doctor(\n      nearText: {\n        concepts: [\"Cardiology\"],\n        distance: 0.2\n      }\n    ) {\n      yearsOfExperience {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average yearsOfExperience of Doctors specializing in \"Cardiology\" with a maximum distance of 0.2.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average yearsActive of Photographers specializing in \"portrait photography\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Photographer(\n      nearText: {\n        concepts: [\"portrait photography\"],\n        distance: 0.3\n      }\n    ) {\n      yearsActive {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average yearsActive of Photographers specializing in \"portrait photography\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average energyRating of HomeAppliance objects related to \"smart home\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    HomeAppliance(\n      nearText: {\n        concepts: [\"smart home\"],\n        distance: 0.3\n      }\n    ) {\n      energyRating {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average energyRating of HomeAppliance objects related to \"smart home\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of Furniture that is similar to \"modern chair\" with a maximum distance of 0.15?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Furniture(\n      nearText: {\n        concepts: [\"modern chair\"],\n        distance: 0.15\n      }\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of Furniture that is similar to \"modern chair\" with a maximum distance of 0.15?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "furniture.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average membership price of Gyms related to \"Fitness\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Gym(\n      nearText: {\n        concepts: [\"Fitness\"],\n        distance: 0.3\n      }\n    ) {\n      membershipPrice {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average membership price of Gyms related to \"Fitness\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}", "schemaPath": "gyms.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average rating of LocalBusinesses that are similar to \"restaurant\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    LocalBusiness(\n      nearText: {\n        concepts: [\"restaurant\"],\n        distance: 0.3\n      }\n    ) {\n      rating {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average rating of LocalBusinesses that are similar to \"restaurant\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the count of features for BankingService objects related to \"online banking\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    BankingService(\n      nearText: {\n        concepts: [\"online banking\"],\n        distance: 0.3\n      }\n    ) {\n      features {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the count of features for BankingService objects related to \"online banking\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}", "schemaPath": "onlinebanking.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average lengthKm of HikingTrails that are about \"mountain\" and \"scenic\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    HikingTrail(\n      nearText: {\n        concepts: [\"mountain\", \"scenic\"],\n        distance: 0.3\n      }\n    ) {\n      lengthKm {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average lengthKm of HikingTrails that are about \"mountain\" and \"scenic\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}", "schemaPath": "hikingtrails.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 chemical compounds with BM25 keyword scoring to the query 'organic'. Show me the compound name, formula, and the BM25 score for each compound returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ChemicalCompound(\n      bm25: {\n        query: \"organic\"\n      },\n      limit: 5\n    ) {\n      compoundName\n      formula\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 chemical compounds with BM25 keyword scoring to the query 'organic'. Show me the compound name, formula, and the BM25 score for each compound returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 marine species with BM25 keyword scoring to the query 'coral reef'. Show me the species name, habitat, and the BM25 score for each species returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MarineSpecies(\n      bm25: {\n        query: \"coral reef\"\n      },\n      limit: 10\n    ) {\n      speciesName\n      habitat\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 marine species with BM25 keyword scoring to the query 'coral reef'. Show me the species name, habitat, and the BM25 score for each species returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 robots with BM25 keyword scoring to the query 'autonomous'. Show me the robot name, function, and the BM25 score for each robot returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Robot(\n      bm25: {\n        query: \"autonomous\"\n      },\n      limit: 3\n    ) {\n      robotName\n      function\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 robots with BM25 keyword scoring to the query 'autonomous'. Show me the robot name, function, and the BM25 score for each robot returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}", "schemaPath": "robotics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 civilizations with BM25 keyword scoring to the query 'ancient'. Show me the civilization name, time period, and the BM25 score for each civilization returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Civilization(\n      bm25: {\n        query: \"ancient\"\n      },\n      limit: 3\n    ) {\n      civilizationName\n      timePeriod\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 civilizations with BM25 keyword scoring to the query 'ancient'. Show me the civilization name, time period, and the BM25 score for each civilization returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}", "schemaPath": "ancientcivilization.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 streaming platforms with BM25 keyword scoring to the query 'Netflix'. Show me the platform name, overview, and the BM25 score for each platform returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    StreamingPlatform(\n      bm25: {\n        query: \"Netflix\"\n      },\n      limit: 3\n    ) {\n      platformName\n      overview\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 streaming platforms with BM25 keyword scoring to the query 'Netflix'. Show me the platform name, overview, and the BM25 score for each platform returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 energy sources with BM25 keyword scoring to the query 'solar', and show the source type and description. Please show me the BM25 score for each object returned as well.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EnergySource(\n      bm25: {\n        query: \"solar\"\n      },\n      limit: 5\n    ) {\n      sourceType\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 energy sources with BM25 keyword scoring to the query 'solar', and show the source type and description. Please show me the BM25 score for each object returned as well.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 plants with BM25 keyword scoring to the query 'rose', and show the common name, scientific name, and BM25 score for each plant returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      bm25: {\n        query: \"rose\"\n      },\n      limit: 3\n    ) {\n      commonName\n      scientificName\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 plants with BM25 keyword scoring to the query 'rose', and show the common name, scientific name, and BM25 score for each plant returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}", "schemaPath": "plants.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 persons with BM25 keyword scoring to the query 'John Doe', and show their full names, birth years, and BM25 scores for each person returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Person(\n      bm25: {\n        query: \"John Doe\"\n      },\n      limit: 3\n    ) {\n      fullName\n      birthYear\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 persons with BM25 keyword scoring to the query 'John Doe', and show their full names, birth years, and BM25 scores for each person returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 candles with BM25 keyword scoring to the query 'lavender', and show the candle name, scent, and BM25 score for each object returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Candle(\n      bm25: {\n        query: \"lavender\"\n      },\n      limit: 10\n    ) {\n      candleName\n      scent\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 candles with BM25 keyword scoring to the query 'lavender', and show the candle name, scent, and BM25 score for each object returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "candles.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 comedy specials with BM25 keyword scoring to the query 'funny', and show the special title, description, and BM25 score for each object returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ComedySpecial(\n      bm25: {\n        query: \"funny\"\n      },\n      limit: 5\n    ) {\n      specialTitle\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 comedy specials with BM25 keyword scoring to the query 'funny', and show the special title, description, and BM25 score for each object returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 mobile apps with BM25 keyword scoring to the query 'social media', and show the app name, description, and BM25 score for each app returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MobileApp(\n      bm25: {\n        query: \"social media\"\n      },\n      limit: 10\n    ) {\n      appName\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 mobile apps with BM25 keyword scoring to the query 'social media', and show the app name, description, and BM25 score for each app returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}", "schemaPath": "mobileapplications.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 magic tricks with BM25 keyword scoring to the query 'levitation'. Show me the trick name, description, and the BM25 score for each trick returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MagicTrick(\n      bm25: {\n        query: \"levitation\"\n      },\n      limit: 3\n    ) {\n      trickName\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 magic tricks with BM25 keyword scoring to the query 'levitation'. Show me the trick name, description, and the BM25 score for each trick returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 fireworks with BM25 keyword scoring to the query 'sparklers', and show the firework name, effects, and BM25 score for each firework returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Firework(\n      bm25: {\n        query: \"sparklers\"\n      },\n      limit: 10\n    ) {\n      fireworkName\n      effects\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 fireworks with BM25 keyword scoring to the query 'sparklers', and show the firework name, effects, and BM25 score for each firework returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "fireworks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 esports teams with BM25 keyword scoring to the query 'competitive'. For each team, show the team name, members' player names, nicknames, game specializations, number of games played, number of tournament wins, and whether the team is active. Please also show me the BM25 score for each team returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EsportsTeam(\n      bm25: {\n        query: \"competitive\"\n      },\n      limit: 10\n    ) {\n      teamName\n      members {\n        ... on Player {\n          playerName\n          nickname\n          gameSpecialization\n        }\n      }\n      gamesPlayed\n      tournamentWinsCount\n      isActive\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 esports teams with BM25 keyword scoring to the query 'competitive'. For each team, show the team name, members' player names, nicknames, game specializations, number of games played, number of tournament wins, and whether the team is active. Please also show me the BM25 score for each team returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 doctors specializing in cardiology, with BM25 keyword scoring to the query 'cardiology'. Please show me the doctor's name, specialization, and the BM25 score for each doctor returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Doctor(\n      bm25: {\n        query: \"cardiology\"\n      },\n      limit: 10\n    ) {\n      doctorName\n      specialization\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 doctors specializing in cardiology, with BM25 keyword scoring to the query 'cardiology'. Please show me the doctor's name, specialization, and the BM25 score for each doctor returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 photographers with BM25 keyword scoring to the query 'portrait photography'. Show me their full names and bios. Please include the BM25 score for each photographer returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Photographer(\n      bm25: {\n        query: \"portrait photography\"\n      },\n      limit: 10\n    ) {\n      fullName\n      bio\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 photographers with BM25 keyword scoring to the query 'portrait photography'. Show me their full names and bios. Please include the BM25 score for each photographer returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 colleges with BM25 keyword scoring to the query 'computer science', and show the college name, description, and BM25 score for each college returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    College(\n      bm25: {\n        query: \"computer science\"\n      },\n      limit: 10\n    ) {\n      collegeName\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 colleges with BM25 keyword scoring to the query 'computer science', and show the college name, description, and BM25 score for each college returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 home appliances with BM25 keyword scoring to the query 'refrigerator'. Show me the appliance name, brand, type, and the BM25 score for each appliance returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HomeAppliance(\n      bm25: {\n        query: \"refrigerator\"\n      },\n      limit: 5\n    ) {\n      applianceName\n      brand\n      type\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 home appliances with BM25 keyword scoring to the query 'refrigerator'. Show me the appliance name, brand, type, and the BM25 score for each appliance returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 VR experiences with BM25 keyword scoring to the query 'action'. Show me the title, genre, and BM25 score for each VR experience returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    VRExperience(\n      bm25: {\n        query: \"action\"\n      },\n      limit: 10\n    ) {\n      title\n      genre\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 VR experiences with BM25 keyword scoring to the query 'action'. Show me the title, genre, and BM25 score for each VR experience returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 toys with BM25 keyword scoring to the query 'action figure', and show the toy name, brand, and BM25 score for each toy returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Toy(\n      bm25: {\n        query: \"action figure\"\n      },\n      limit: 5\n    ) {\n      toyName\n      brand\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 toys with BM25 keyword scoring to the query 'action figure', and show the toy name, brand, and BM25 score for each toy returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 drugs with BM25 keyword scoring to the query 'headache'. For each drug, show the drug name, active ingredient, and the BM25 score. \n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Drug(\n      bm25: {\n        query: \"headache\"\n      },\n      limit: 10\n    ) {\n      drugName\n      activeIngredient\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 drugs with BM25 keyword scoring to the query 'headache'. For each drug, show the drug name, active ingredient, and the BM25 score. \n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 rollercoasters with BM25 keyword scoring to the query 'thrilling'. Show me the name, description, and BM25 score for each rollercoaster returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Rollercoaster(\n      bm25: {\n        query: \"thrilling\"\n      },\n      limit: 3\n    ) {\n      name\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 rollercoasters with BM25 keyword scoring to the query 'thrilling'. Show me the name, description, and BM25 score for each rollercoaster returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 furniture items with BM25 keyword scoring to the query 'chair'. Show me the furniture name, material, dimensions, and the BM25 score for each item returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Furniture(\n      bm25: {\n        query: \"chair\"\n      },\n      limit: 5\n    ) {\n      furnitureName\n      material\n      dimensions\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 furniture items with BM25 keyword scoring to the query 'chair'. Show me the furniture name, material, dimensions, and the BM25 score for each item returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "furniture.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 digital artworks with BM25 keyword scoring to the query 'abstract'. Show me the title, description, and BM25 score for each artwork returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DigitalArtwork(\n      bm25: {\n        query: \"abstract\"\n      },\n      limit: 10\n    ) {\n      title\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 digital artworks with BM25 keyword scoring to the query 'abstract'. Show me the title, description, and BM25 score for each artwork returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 gyms with BM25 keyword scoring to the query 'fitness', and show the gym name, location, and BM25 score for each gym returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Gym(\n      bm25: {\n        query: \"fitness\"\n      },\n      limit: 5\n    ) {\n      gymName\n      location\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 gyms with BM25 keyword scoring to the query 'fitness', and show the gym name, location, and BM25 score for each gym returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}", "schemaPath": "gyms.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 film festivals with BM25 keyword scoring to the query 'Cannes'. For each film festival, show the festival name, location, description, and the featured film's title and director. Please also show me the BM25 score for each film festival returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FilmFestival(\n      bm25: {\n        query: \"Cannes\"\n      },\n      limit: 3\n    ) {\n      festivalName\n      location\n      description\n      featuredFilm {\n        ... on Film {\n          filmTitle\n          director\n        }\n      }\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 film festivals with BM25 keyword scoring to the query 'Cannes'. For each film festival, show the festival name, location, description, and the featured film's title and director. Please also show me the BM25 score for each film festival returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}", "schemaPath": "filmfestivals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 local businesses with BM25 keyword scoring to the query 'restaurant'. Show me the business name, description, address, contact number, opening status, rating, and BM25 score for each business returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LocalBusiness(\n      bm25: {\n        query: \"restaurant\"\n      },\n      limit: 10\n    ) {\n      businessName\n      description\n      address\n      contactNumber\n      isOpen\n      rating\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 local businesses with BM25 keyword scoring to the query 'restaurant'. Show me the business name, description, address, contact number, opening status, rating, and BM25 score for each business returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 zoos with BM25 keyword scoring to the query 'lion'. For each zoo, show the zoo name, location, and the animals housed. For each animal, show the species, habitat, and diet. Please also show me the BM25 score for each zoo returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Zoo(\n      bm25: {\n        query: \"lion\"\n      },\n      limit: 3\n    ) {\n      zooName\n      location\n      animalsHoused {\n        ... on Animal {\n          species\n          habitat\n          diet\n        }\n      }\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 zoos with BM25 keyword scoring to the query 'lion'. For each zoo, show the zoo name, location, and the animals housed. For each animal, show the species, habitat, and diet. Please also show me the BM25 score for each zoo returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}", "schemaPath": "zoos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 boats with BM25 keyword scoring to the query 'sailboat', and show the boat name, type, and BM25 score for each boat returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Boat(\n      bm25: {\n        query: \"sailboat\"\n      },\n      limit: 5\n    ) {\n      boatName\n      type\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 boats with BM25 keyword scoring to the query 'sailboat', and show the boat name, type, and BM25 score for each boat returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 national parks with BM25 keyword scoring to the query 'mountain'. Show me the park name, description, and the BM25 score for each park returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NationalPark(\n      bm25: {\n        query: \"mountain\"\n      },\n      limit: 3\n    ) {\n      parkName\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 national parks with BM25 keyword scoring to the query 'mountain'. Show me the park name, description, and the BM25 score for each park returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 language courses with BM25 keyword scoring to the query 'Spanish'. Show me the course name, language taught, and the BM25 score for each course returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LanguageCourse(\n      bm25: {\n        query: \"Spanish\"\n      },\n      limit: 3\n    ) {\n      courseName\n      languageTaught\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 language courses with BM25 keyword scoring to the query 'Spanish'. Show me the course name, language taught, and the BM25 score for each course returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 pets with BM25 keyword scoring to the query 'dog', and show the pet name, species, and BM25 score for each pet returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Pet(\n      bm25: {\n        query: \"dog\"\n      },\n      limit: 5\n    ) {\n      petName\n      species\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 pets with BM25 keyword scoring to the query 'dog', and show the pet name, species, and BM25 score for each pet returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 jewelry items with BM25 keyword scoring to the query 'diamond ring'. For each item, show the name, material, gemstone name, gemstone hardness, and the BM25 score. \n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JewelryItem(\n      bm25: {\n        query: \"diamond ring\"\n      },\n      limit: 10\n    ) {\n      name\n      material\n      gemstone {\n        ... on Gemstone {\n          name\n          hardness\n        }\n      }\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 jewelry items with BM25 keyword scoring to the query 'diamond ring'. For each item, show the name, material, gemstone name, gemstone hardness, and the BM25 score. \n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 research institutes with BM25 keyword scoring to the query 'technology'. Show me the institute name, overview, and the BM25 score for each institute returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ResearchInstitute(\n      bm25: {\n        query: \"technology\"\n      },\n      limit: 3\n    ) {\n      instituteName\n      overview\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 research institutes with BM25 keyword scoring to the query 'technology'. Show me the institute name, overview, and the BM25 score for each institute returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}", "schemaPath": "researchinstitute.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 banking services with BM25 keyword scoring to the query 'online banking', and show the service name, features, and BM25 score for each service returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BankingService(\n      bm25: {\n        query: \"online banking\"\n      },\n      limit: 5\n    ) {\n      serviceName\n      features\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 banking services with BM25 keyword scoring to the query 'online banking', and show the service name, features, and BM25 score for each service returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}", "schemaPath": "onlinebanking.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 operating systems with BM25 keyword scoring to the query 'Windows'. Show me the operating system name, version, and the BM25 score for each object returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OperatingSystem(\n      bm25: {\n        query: \"Windows\"\n      },\n      limit: 3\n    ) {\n      osName\n      version\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 operating systems with BM25 keyword scoring to the query 'Windows'. Show me the operating system name, version, and the BM25 score for each object returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "operatingsystem.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 freelancers with BM25 keyword scoring to the query 'web development'. Show me their names, skills, and the BM25 score for each freelancer returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Freelancer(\n      bm25: {\n        query: \"web development\"\n      },\n      limit: 10\n    ) {\n      freelancerName\n      skills\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 freelancers with BM25 keyword scoring to the query 'web development'. Show me their names, skills, and the BM25 score for each freelancer returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}", "schemaPath": "freelancers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 tea shops with BM25 keyword scoring to the query 'green tea'. For each tea shop, show the shop name, location, and the best-selling teas. For each best-selling tea, show the tea name, origin, flavor profile, and the BM25 score. \n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TeaShop(\n      bm25: {\n        query: \"green tea\"\n      },\n      limit: 10\n    ) {\n      shopName\n      location\n      bestSellingTeas {\n        ... on TeaVariety {\n          teaName\n          origin\n          flavorProfile\n          _additional {\n            score\n          }\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 tea shops with BM25 keyword scoring to the query 'green tea'. For each tea shop, show the shop name, location, and the best-selling teas. For each best-selling tea, show the tea name, origin, flavor profile, and the BM25 score. \n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}", "schemaPath": "teashops.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 space missions with BM25 keyword scoring to the query 'moon landing', and show the mission name, objective, and BM25 score for each mission returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SpaceMission(\n      bm25: {\n        query: \"moon landing\"\n      },\n      limit: 3\n    ) {\n      missionName\n      objective\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 space missions with BM25 keyword scoring to the query 'moon landing', and show the mission name, objective, and BM25 score for each mission returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 biographies with BM25 keyword scoring to the query 'Albert Einstein'. Show the subject name, overview, author's name, and the BM25 score for each biography returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Biography(\n      bm25: {\n        query: \"Albert Einstein\"\n      },\n      limit: 3\n    ) {\n      subjectName\n      overview\n      author {\n        ... on Author {\n          name\n        }\n      }\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 biographies with BM25 keyword scoring to the query 'Albert Einstein'. Show the subject name, overview, author's name, and the BM25 score for each biography returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 Nanotech Applications with BM25 keyword scoring to the query 'nanomedicine', and show the application name, overview, and BM25 score for each object returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NanotechApplication(\n      bm25: {\n        query: \"nanomedicine\"\n      },\n      limit: 5\n    ) {\n      applicationName\n      overview\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 Nanotech Applications with BM25 keyword scoring to the query 'nanomedicine', and show the application name, overview, and BM25 score for each object returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}", "schemaPath": "nanotechnology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 non-profit organizations with BM25 keyword scoring to the query 'education'. Show me the name and mission of each organization. Please include the BM25 score for each organization returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NonProfit(\n      bm25: {\n        query: \"education\"\n      },\n      limit: 10\n    ) {\n      name\n      mission\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 non-profit organizations with BM25 keyword scoring to the query 'education'. Show me the name and mission of each organization. Please include the BM25 score for each organization returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 hiking trails with BM25 keyword scoring to the query 'mountain'. For each trail, show the trail name, location, length in kilometers, difficulty level, nearest town's name, population, and the BM25 score. \n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HikingTrail(\n      bm25: {\n        query: \"mountain\"\n      },\n      limit: 10\n    ) {\n      trailName\n      location\n      lengthKm\n      difficultyLevel\n      nearestTown {\n        ... on Town {\n          townName\n          population\n        }\n      }\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 hiking trails with BM25 keyword scoring to the query 'mountain'. For each trail, show the trail name, location, length in kilometers, difficulty level, nearest town's name, population, and the BM25 score. \n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}", "schemaPath": "hikingtrails.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 food trucks with BM25 keyword scoring to the query 'tacos', and show the truck name, cuisine type, and BM25 score for each truck returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FoodTruck(\n      bm25: {\n        query: \"tacos\"\n      },\n      limit: 5\n    ) {\n      truckName\n      cuisineType\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 food trucks with BM25 keyword scoring to the query 'tacos', and show the truck name, cuisine type, and BM25 score for each truck returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}", "schemaPath": "foodtrucks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 AR applications with BM25 keyword scoring to the query 'augmented reality', and show the application name, description, and BM25 score for each application returned.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ARApplication(\n      bm25: {\n        query: \"augmented reality\"\n      },\n      limit: 5\n    ) {\n      appName\n      description\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 AR applications with BM25 keyword scoring to the query 'augmented reality', and show the application name, description, and BM25 score for each application returned.\n```", "apiRef": "Get score from BM25 search\n\nScore\n\nThe\u00a0`score`\u00a0sub-property is the BM25F score used to rank the outputs. It can be retrieved under the\u00a0`_additional`\u00a0property.\n\nThe below example adds the\u00a0`score`\u00a0property to the list of retrieved properties.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-with-score.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the chemical compounds with a BM25 score of the query 'organic' where the molar mass is greater than 100, and show the compound name, formula, molar mass, and the elements it contains including their name, symbol, atomic number, and whether they are a metal.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ChemicalCompound(\n      bm25: {\n        query: \"organic\"\n      },\n      where: {\n        path: [\"molarMass\"],\n        operator: GreaterThan,\n        valueNumber: 100\n      }\n    ) {\n      compoundName\n      formula\n      molarMass\n      containsElements {\n        ... on ChemicalElement {\n          elementName\n          symbol\n          atomicNumber\n          isMetal\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the chemical compounds with a BM25 score of the query 'organic' where the molar mass is greater than 100, and show the compound name, formula, molar mass, and the elements it contains including their name, symbol, atomic number, and whether they are a metal.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the marine species with a BM25 scoring of the query 'coral reef' where the conservation status is 'endangered', and show the species name, habitat, and the biologist's name and research area.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MarineSpecies(\n      bm25: {\n        query: \"coral reef\"\n      },\n      where: {\n        path: [\"conservationStatus\"],\n        operator: Equal,\n        valueText: \"endangered\"\n      }\n    ) {\n      speciesName\n      habitat\n      researcher {\n        ... on MarineBiologist {\n          biologistName\n          researchArea\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the marine species with a BM25 scoring of the query 'coral reef' where the conservation status is 'endangered', and show the species name, habitat, and the biologist's name and research area.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the robots with BM25 scoring of the query 'autonomous' where the function is equal to 'industrial', and show the robot name, function, manufacturer's company name, founded year, and specialization.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Robot(\n      bm25: {\n        query: \"autonomous\"\n      },\n      where: {\n        path: [\"function\"],\n        operator: Equal,\n        valueText: \"industrial\"\n      }\n    ) {\n      robotName\n      function\n      manufacturer {\n        ... on RoboticsCompany {\n          companyName\n          foundedYear\n          specialization\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the robots with BM25 scoring of the query 'autonomous' where the function is equal to 'industrial', and show the robot name, function, manufacturer's company name, founded year, and specialization.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}", "schemaPath": "robotics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the civilizations with BM25 scoring of the query 'ancient' where the timePeriod is equal to 'Classical', and show the civilization name, notable technologies, languages, and major ruins' site name and location.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Civilization(\n      bm25: {\n        query: \"ancient\"\n      },\n      where: {\n        path: [\"timePeriod\"],\n        operator: Equal,\n        valueText: \"Classical\"\n      }\n    ) {\n      civilizationName\n      notableTechnologies\n      languages\n      majorRuins {\n        ... on Ruins {\n          siteName\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the civilizations with BM25 scoring of the query 'ancient' where the timePeriod is equal to 'Classical', and show the civilization name, notable technologies, languages, and major ruins' site name and location.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}", "schemaPath": "ancientcivilization.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the streaming platforms with a BM25 scoring of the query 'Netflix' where the subscriptionCost is less than $10, and show the platform name, overview, available regions, and top shows' title, genre, release year, and description.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    StreamingPlatform(\n      bm25: {\n        query: \"Netflix\"\n      },\n      where: {\n        path: [\"subscriptionCost\"],\n        operator: LessThan,\n        valueText: \"$10\"\n      }\n    ) {\n      platformName\n      overview\n      availableRegions\n      topShows {\n        ... on Show {\n          title\n          genre\n          releaseYear\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the streaming platforms with a BM25 scoring of the query 'Netflix' where the subscriptionCost is less than $10, and show the platform name, overview, available regions, and top shows' title, genre, release year, and description.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the cosmetic products with a BM25 scoring of the query 'lipstick' where the product is vegan, and show the product name, brand name, type, shade, and ingredients.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CosmeticProduct(\n      bm25: {\n        query: \"lipstick\"\n      },\n      where: {\n        path: [\"isVegan\"],\n        operator: Equal,\n        valueBoolean: true\n      }\n    ) {\n      productName\n      brand {\n        ... on Brand {\n          brandName\n        }\n      }\n      type\n      shade\n      ingredients\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the cosmetic products with a BM25 scoring of the query 'lipstick' where the product is vegan, and show the product name, brand name, type, shade, and ingredients.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}", "schemaPath": "cosmetics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the energy sources with BM25 scoring of the query 'solar' where the annual output is greater than 100, and show the source type, description, residential availability, and provider's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EnergySource(\n      bm25: {\n        query: \"solar\"\n      },\n      where: {\n        path: [\"annualOutput\"],\n        operator: GreaterThan,\n        valueInt: 100\n      }\n    ) {\n      sourceType\n      description\n      isResidential\n      provider {\n        ... on EnergyProvider {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the energy sources with BM25 scoring of the query 'solar' where the annual output is greater than 100, and show the source type, description, residential availability, and provider's company name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the plants with BM25 scoring of the query 'flower' where isEndangered is true, and show the common name, scientific name, habitat, growth habit, isEndangered status, and fertilizer needs including the type and application frequency.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      bm25: {\n        query: \"flower\"\n      },\n      where: {\n        path: [\"isEndangered\"],\n        operator: Equal,\n        valueBoolean: true\n      }\n    ) {\n      commonName\n      scientificName\n      habitat\n      growthHabit\n      isEndangered\n      fertilizerNeeds {\n        ... on Fertilizer {\n          type\n          applicationFrequency\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the plants with BM25 scoring of the query 'flower' where isEndangered is true, and show the common name, scientific name, habitat, growth habit, isEndangered status, and fertilizer needs including the type and application frequency.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}", "schemaPath": "plants.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the people with a BM25 score of the query 'John' where the birthYear is greater than 1980, and show their full name, birth year, deceased status, parents' full names, and DNA test results including the test provider, match percentage, and whether the maternal and paternal lines were tested.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Person(\n      bm25: {\n        query: \"John\"\n      },\n      where: {\n        path: [\"birthYear\"],\n        operator: GreaterThan,\n        valueInt: 1980\n      }\n    ) {\n      fullName\n      birthYear\n      isDeceased\n      parents {\n        ... on Person {\n          fullName\n        }\n      }\n      dnatest {\n        ... on DNATestResult {\n          testProvider\n          matchPercentage\n          isMaternalLineTested\n          isPaternalLineTested\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the people with a BM25 score of the query 'John' where the birthYear is greater than 1980, and show their full name, birth year, deceased status, parents' full names, and DNA test results including the test provider, match percentage, and whether the maternal and paternal lines were tested.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the comedy specials with a BM25 scoring of the query 'funny' where the duration is greater than 1 hour, and show the special title, description, duration, comedian's name, and biography.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ComedySpecial(\n      bm25: {\n        query: \"funny\"\n      },\n      where: {\n        path: [\"duration\"],\n        operator: GreaterThan,\n        valueText: \"1 hour\"\n      }\n    ) {\n      specialTitle\n      description\n      duration\n      comedian {\n        ... on Comedian {\n          comedianName\n          biography\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the comedy specials with a BM25 scoring of the query 'funny' where the duration is greater than 1 hour, and show the special title, description, duration, comedian's name, and biography.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the mobile apps with a BM25 scoring of the query 'social media' where the rating is greater than 4.5, and show the app name, description, developer, rating, whether it is free, and the supported operating system's name and version.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MobileApp(\n      bm25: {\n        query: \"social media\"\n      },\n      where: {\n        path: [\"rating\"],\n        operator: GreaterThan,\n        valueNumber: 4.5\n      }\n    ) {\n      appName\n      description\n      developer\n      rating\n      isFree\n      supportedOS {\n        ... on OperatingSystem {\n          osName\n          version\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the mobile apps with a BM25 scoring of the query 'social media' where the rating is greater than 4.5, and show the app name, description, developer, rating, whether it is free, and the supported operating system's name and version.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}", "schemaPath": "mobileapplications.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the Magic Tricks with BM25 scoring of the query 'levitation' where the difficultyLevel is equal to 'intermediate', and show the trickName, description, and performer's magicianName.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MagicTrick(\n      bm25: {\n        query: \"levitation\"\n      },\n      where: {\n        path: [\"difficultyLevel\"],\n        operator: Equal,\n        valueText: \"intermediate\"\n      }\n    ) {\n      trickName\n      description\n      performer {\n        ... on Magician {\n          magicianName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the Magic Tricks with BM25 scoring of the query 'levitation' where the difficultyLevel is equal to 'intermediate', and show the trickName, description, and performer's magicianName.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the esports teams with a BM25 scoring of the query 'competitive' where the tournamentWinsCount is greater than 5, and show the team name, members' player name, nickname, and game specialization, games played, and whether the team is active.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EsportsTeam(\n      bm25: {\n        query: \"competitive\"\n      },\n      where: {\n        path: [\"tournamentWinsCount\"],\n        operator: GreaterThan,\n        valueInt: 5\n      }\n    ) {\n      teamName\n      members {\n        ... on Player {\n          playerName\n          nickname\n          gameSpecialization\n        }\n      }\n      gamesPlayed\n      isActive\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the esports teams with a BM25 scoring of the query 'competitive' where the tournamentWinsCount is greater than 5, and show the team name, members' player name, nickname, and game specialization, games played, and whether the team is active.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the doctors specializing in cardiology with more than 5 years of experience, and show their names, specializations, years of experience, clinic names, locations, and operational hours.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Doctor(\n      bm25: {\n        query: \"cardiology\"\n      },\n      where: {\n        path: [\"yearsOfExperience\"],\n        operator: GreaterThan,\n        valueInt: 5\n      }\n    ) {\n      doctorName\n      specialization\n      yearsOfExperience\n      clinic {\n        ... on Clinic {\n          clinicName\n          location\n          operationalHours\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the doctors specializing in cardiology with more than 5 years of experience, and show their names, specializations, years of experience, clinic names, locations, and operational hours.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the photographers specializing in landscape photography with more than 5 years of experience. Show me their full name, bio, and specialization name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Photographer(\n      bm25: {\n        query: \"landscape photography\"\n      },\n      where: {\n        path: [\"yearsActive\"],\n        operator: GreaterThan,\n        valueInt: 5\n      }\n    ) {\n      fullName\n      bio\n      specialization {\n        ... on PhotographyGenre {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the photographers specializing in landscape photography with more than 5 years of experience. Show me their full name, bio, and specialization name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the colleges that have a BM25 score for the query 'computer science' and were established after the year 2000. Show me the college name, location, established year, description, and the details of the courses offered including the course name, duration, and description.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    College(\n      bm25: {\n        query: \"computer science\"\n      },\n      where: {\n        path: [\"establishedYear\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      collegeName\n      location\n      establishedYear\n      description\n      courses {\n        ... on Course {\n          courseName\n          duration\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the colleges that have a BM25 score for the query 'computer science' and were established after the year 2000. Show me the college name, location, established year, description, and the details of the courses offered including the course name, duration, and description.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the home appliances with a BM25 scoring of the query 'refrigerator' where the energy rating is greater than 4, and show the appliance name, brand, type, whether it is a smart device, price, and warranty duration and coverage.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HomeAppliance(\n      bm25: {\n        query: \"refrigerator\"\n      },\n      where: {\n        path: [\"energyRating\"],\n        operator: GreaterThan,\n        valueInt: 4\n      }\n    ) {\n      applianceName\n      brand\n      type\n      isSmartDevice\n      price\n      warranty {\n        ... on Warranty {\n          duration\n          coverage\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the home appliances with a BM25 scoring of the query 'refrigerator' where the energy rating is greater than 4, and show the appliance name, brand, type, whether it is a smart device, price, and warranty duration and coverage.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the VR Experiences with BM25 scoring of the query 'action' where the releaseYear is greater than 2010, and show the title, developer's name, genre, and multiplayer status.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    VRExperience(\n      bm25: {\n        query: \"action\"\n      },\n      where: {\n        path: [\"releaseYear\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ) {\n      title\n      developer {\n        ... on Developer {\n          name\n        }\n      }\n      genre\n      isMultiplayer\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the VR Experiences with BM25 scoring of the query 'action' where the releaseYear is greater than 2010, and show the title, developer's name, genre, and multiplayer status.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the toys with BM25 scoring of the query 'action figure' where the price is less than 50, and show the toy name, brand, recommended age, battery-operated status, price, and related board game's name, description, and number of players.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Toy(\n      bm25: {\n        query: \"action figure\"\n      },\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 50\n      }\n    ) {\n      toyName\n      brand\n      recommendedAge\n      isBatteryOperated\n      price\n      relatedGame {\n        ... on BoardGame {\n          gameName\n          description\n          numberOfPlayers\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the toys with BM25 scoring of the query 'action figure' where the price is less than 50, and show the toy name, brand, recommended age, battery-operated status, price, and related board game's name, description, and number of players.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the drugs with BM25 scoring of the query 'pain relief' where the approvalYear is greater than 2010, and show the drugName, activeIngredient, OTC status, and manufacturer's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Drug(\n      bm25: {\n        query: \"pain relief\"\n      },\n      where: {\n        path: [\"approvalYear\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ) {\n      drugName\n      activeIngredient\n      isOTC\n      manufacturer {\n        ... on Manufacturer {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the drugs with BM25 scoring of the query 'pain relief' where the approvalYear is greater than 2010, and show the drugName, activeIngredient, OTC status, and manufacturer's company name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the rollercoasters with a BM25 scoring of the query 'thrilling' where the height is greater than 30, and show the name, description, operating status, park name, and park location.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Rollercoaster(\n      bm25: {\n        query: \"thrilling\"\n      },\n      where: {\n        path: [\"height\"],\n        operator: GreaterThan,\n        valueNumber: 30\n      }\n    ) {\n      name\n      description\n      isOperating\n      park {\n        ... on AmusementPark {\n          name\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the rollercoasters with a BM25 scoring of the query 'thrilling' where the height is greater than 30, and show the name, description, operating status, park name, and park location.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the digital artworks with a BM25 scoring of the query 'abstract' where the year is greater than 2010. Show me the title, artist's name and portfolio link, description, year, medium, and availability for sale.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DigitalArtwork(\n      bm25: {\n        query: \"abstract\"\n      },\n      where: {\n        path: [\"year\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ) {\n      title\n      artist {\n        ... on Artist {\n          name\n          portfolioLink\n        }\n      }\n      description\n      year\n      medium\n      isForSale\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the digital artworks with a BM25 scoring of the query 'abstract' where the year is greater than 2010. Show me the title, artist's name and portfolio link, description, year, medium, and availability for sale.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the film festivals with BM25 scoring of the query 'Cannes' where the location is equal to 'France', and show the festival name, description, and featured film's title and director.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FilmFestival(\n      bm25: {\n        query: \"Cannes\"\n      },\n      where: {\n        path: [\"location\"],\n        operator: Equal,\n        valueText: \"France\"\n      }\n    ) {\n      festivalName\n      description\n      featuredFilm {\n        ... on Film {\n          filmTitle\n          director\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the film festivals with BM25 scoring of the query 'Cannes' where the location is equal to 'France', and show the festival name, description, and featured film's title and director.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}", "schemaPath": "filmfestivals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the local businesses that are open, have a BM25 score for the query 'restaurant', and show their business name, description, address, contact number, opening status, rating, and services with their respective service names and prices.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LocalBusiness(\n      bm25: {\n        query: \"restaurant\"\n      },\n      where: {\n        path: [\"isOpen\"],\n        operator: Equal,\n        valueBoolean: true\n      }\n    ) {\n      businessName\n      description\n      address\n      contactNumber\n      isOpen\n      rating\n      services {\n        ... on Service {\n          serviceName\n          price\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the local businesses that are open, have a BM25 score for the query 'restaurant', and show their business name, description, address, contact number, opening status, rating, and services with their respective service names and prices.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the boats with BM25 scoring of the query 'sailboat' where the capacity is greater than 10, and show the boat name, type, capacity, motorization status, and manufacturer's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Boat(\n      bm25: {\n        query: \"sailboat\"\n      },\n      where: {\n        path: [\"capacity\"],\n        operator: GreaterThan,\n        valueInt: 10\n      }\n    ) {\n      boatName\n      type\n      capacity\n      isMotorized\n      manufacturer {\n        ... on BoatManufacturer {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the boats with BM25 scoring of the query 'sailboat' where the capacity is greater than 10, and show the boat name, type, capacity, motorization status, and manufacturer's company name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the national parks with a BM25 scoring of the query 'mountain' where the established year is greater than 2000. Show me the park name, description, location, established year, entry fee status, wildlife, and facility name with description.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NationalPark(\n      bm25: {\n        query: \"mountain\"\n      },\n      where: {\n        path: [\"establishedYear\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      parkName\n      description\n      location\n      establishedYear\n      isEntryFree\n      wildlife\n      facilities {\n        ... on Facility {\n          facilityName\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the national parks with a BM25 scoring of the query 'mountain' where the established year is greater than 2000. Show me the park name, description, location, established year, entry fee status, wildlife, and facility name with description.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the wedding venues with BM25 scoring of the query 'outdoor' where the capacity is greater than 200, and show the name, location, capacity, availability of indoor facility, and vendor details including vendor name, service type, years in business, and if they offer any discounts.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeddingVenue(\n      bm25: {\n        query: \"outdoor\"\n      },\n      where: {\n        path: [\"capacity\"],\n        operator: GreaterThan,\n        valueInt: 200\n      }\n    ) {\n      name\n      location\n      capacity\n      hasIndoorFacility\n      vendors {\n        ... on Vendor {\n          vendorName\n          serviceType\n          yearsInBusiness\n          offersDiscount\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the wedding venues with BM25 scoring of the query 'outdoor' where the capacity is greater than 200, and show the name, location, capacity, availability of indoor facility, and vendor details including vendor name, service type, years in business, and if they offer any discounts.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}", "schemaPath": "weddings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the Language Courses with BM25 scoring of the query 'beginner' where the difficultyLevel is equal to 'beginner', and show the courseName, languageTaught, difficultyLevel, and platform's platformName and website.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LanguageCourse(\n      bm25: {\n        query: \"beginner\"\n      },\n      where: {\n        path: [\"difficultyLevel\"],\n        operator: Equal,\n        valueText: \"beginner\"\n      }\n    ) {\n      courseName\n      languageTaught\n      difficultyLevel\n      platform {\n        ... on LearningPlatform {\n          platformName\n          website\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the Language Courses with BM25 scoring of the query 'beginner' where the difficultyLevel is equal to 'beginner', and show the courseName, languageTaught, difficultyLevel, and platform's platformName and website.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the pets with BM25 scoring of the query 'dog' where the age is greater than 2, and show the pet name, species, breed, age, owner's full name, address, and contact number.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Pet(\n      bm25: {\n        query: \"dog\"\n      },\n      where: {\n        path: [\"age\"],\n        operator: GreaterThan,\n        valueInt: 2\n      }\n    ) {\n      petName\n      species\n      breed\n      age\n      owner {\n        ... on Person {\n          fullName\n          address\n          contactNumber\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the pets with BM25 scoring of the query 'dog' where the age is greater than 2, and show the pet name, species, breed, age, owner's full name, address, and contact number.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the Literary Awards with BM25 scoring of the query 'Nobel Prize' where the yearEstablished is greater than 1900, and show the awardName, yearEstablished, awardingOrganization's organizationName, and genresCovered.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LiteraryAward(\n      bm25: {\n        query: \"Nobel Prize\"\n      },\n      where: {\n        path: [\"yearEstablished\"],\n        operator: GreaterThan,\n        valueInt: 1900\n      }\n    ) {\n      awardName\n      yearEstablished\n      awardingOrganization {\n        ... on Organization {\n          organizationName\n        }\n      }\n      genresCovered\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the Literary Awards with BM25 scoring of the query 'Nobel Prize' where the yearEstablished is greater than 1900, and show the awardName, yearEstablished, awardingOrganization's organizationName, and genresCovered.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the jewelry items with a BM25 scoring of the query 'diamond' where the price is less than 1000, and show the name, material, gemstone name and hardness, price, and whether it is handmade.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JewelryItem(\n      bm25: {\n        query: \"diamond\"\n      },\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 1000\n      }\n    ) {\n      name\n      material\n      gemstone {\n        ... on Gemstone {\n          name\n          hardness\n        }\n      }\n      price\n      isHandmade\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the jewelry items with a BM25 scoring of the query 'diamond' where the price is less than 1000, and show the name, material, gemstone name and hardness, price, and whether it is handmade.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the research institutes with BM25 scoring of the query 'technology' where the location is equal to 'California', and show the institute name, overview, affiliated university name, and campus location.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ResearchInstitute(\n      bm25: {\n        query: \"technology\"\n      },\n      where: {\n        path: [\"location\"],\n        operator: Equal,\n        valueText: \"California\"\n      }\n    ) {\n      instituteName\n      overview\n      affiliatedUniversity {\n        ... on University {\n          name\n          campusLocation\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the research institutes with BM25 scoring of the query 'technology' where the location is equal to 'California', and show the institute name, overview, affiliated university name, and campus location.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}", "schemaPath": "researchinstitute.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the tea shops in New York that have a BM25 score for the query 'green tea', and show me the shop name, location, and the best-selling teas with their names, origin, and flavor profiles.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TeaShop(\n      bm25: {\n        query: \"green tea\"\n      },\n      where: {\n        path: [\"location\"],\n        operator: Equal,\n        valueText: \"New York\"\n      }\n    ) {\n      shopName\n      location\n      bestSellingTeas {\n        ... on TeaVariety {\n          teaName\n          origin\n          flavorProfile\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the tea shops in New York that have a BM25 score for the query 'green tea', and show me the shop name, location, and the best-selling teas with their names, origin, and flavor profiles.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}", "schemaPath": "teashops.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the space missions with a BM25 scoring of the query 'exploration' where the launch year is greater than 2000, and show the mission name, objective, mission status, and space agency's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SpaceMission(\n      bm25: {\n        query: \"exploration\"\n      },\n      where: {\n        path: [\"launchYear\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      missionName\n      objective\n      missionStatus\n      spaceAgency {\n        ... on SpaceAgency {\n          agencyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the space missions with a BM25 scoring of the query 'exploration' where the launch year is greater than 2000, and show the mission name, objective, mission status, and space agency's name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the biographies with BM25 scoring of the query 'Albert Einstein' where the publicationYear is greater than 1900, and show the subjectName, overview, author's name, bio, and publishedWorksCount.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Biography(\n      bm25: {\n        query: \"Albert Einstein\"\n      },\n      where: {\n        path: [\"publicationYear\"],\n        operator: GreaterThan,\n        valueInt: 1900\n      }\n    ) {\n      subjectName\n      overview\n      author {\n        ... on Author {\n          name\n          bio\n          publishedWorksCount\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the biographies with BM25 scoring of the query 'Albert Einstein' where the publicationYear is greater than 1900, and show the subjectName, overview, author's name, bio, and publishedWorksCount.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the non-profit organizations with a BM25 scoring of the query 'charity' where the founded year is greater than 2000, and show the name, mission, focus area, and founder's full name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NonProfit(\n      bm25: {\n        query: \"charity\"\n      },\n      where: {\n        path: [\"foundedYear\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      name\n      mission\n      focusArea\n      founder {\n        ... on Person {\n          fullName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the non-profit organizations with a BM25 scoring of the query 'charity' where the founded year is greater than 2000, and show the name, mission, focus area, and founder's full name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the food trucks with BM25 scoring of the query 'tacos' where the cuisineType is equal to 'Mexican', and show the truckName, cuisineType, location, and owner's entrepreneurName.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FoodTruck(\n      bm25: {\n        query: \"tacos\"\n      },\n      where: {\n        path: [\"cuisineType\"],\n        operator: Equal,\n        valueText: \"Mexican\"\n      }\n    ) {\n      truckName\n      cuisineType\n      location\n      owner {\n        ... on FoodEntrepreneur {\n          entrepreneurName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the food trucks with BM25 scoring of the query 'tacos' where the cuisineType is equal to 'Mexican', and show the truckName, cuisineType, location, and owner's entrepreneurName.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}", "schemaPath": "foodtrucks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the AR applications with BM25 scoring of the query 'augmented reality' where the platform is equal to 'iOS', and show the application name, description, platform, and developer's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ARApplication(\n      bm25: {\n        query: \"augmented reality\"\n      },\n      where: {\n        path: [\"platform\"],\n        operator: Equal,\n        valueText: \"iOS\"\n      }\n    ) {\n      appName\n      description\n      platform\n      developer {\n        ... on SoftwareCompany {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the AR applications with BM25 scoring of the query 'augmented reality' where the platform is equal to 'iOS', and show the application name, description, platform, and developer's company name.\n```", "apiRef": "Query API: Combining BM25 and the Where Filter\n\nPlease note: This is a compositional API, combining the `where` filter with `bm25`.\nAdd a conditional `where` to BM25 search.\n\nYou can add a conditional filter to any BM25 search query using the `where` API, which will filter the outputs but not impact the ranking from keyword scoring.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in any field and which have the\u00a0`round`\u00a0property of\u00a0`Double Jeopardy!`, ranks them using BM25, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\"\n      },\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```\n\nIn this example, the query will filter the results where the `round` property equals \"Double Jeopardy!\" and then rank them based on the keyword scoring algorithm with the query \"food\".\n\nA Natural Language Command for this example could be: \"Show me Jeopardy Questions about food in the Double Jeopardy round, show me the question, answer and Bm25 score.\"", "apiRefPath": "get-bm25-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of chemical elements.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ChemicalElement {\n      elementName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of chemical elements.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the species names of marine species.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MarineSpecies {\n      speciesName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the species names of marine species.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of robots.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Robot {\n      robotName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of robots.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}", "schemaPath": "robotics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of civilizations.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Civilization {\n      civilizationName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of civilizations.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}", "schemaPath": "ancientcivilization.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the platform names of streaming platforms.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    StreamingPlatform {\n      platformName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the platform names of streaming platforms.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of cosmetic products.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CosmeticProduct {\n      productName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of cosmetic products.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}", "schemaPath": "cosmetics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the source type of energy sources.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EnergySource {\n      sourceType\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the source type of energy sources.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the common names of plants.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant {\n      commonName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the common names of plants.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}", "schemaPath": "plants.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the full names of people.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Person {\n      fullName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the full names of people.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of candles.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Candle {\n      candleName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of candles.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "candles.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the special titles of comedy specials.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ComedySpecial {\n      specialTitle\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the special titles of comedy specials.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of mobile apps.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MobileApp {\n      appName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of mobile apps.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}", "schemaPath": "mobileapplications.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of magic tricks.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MagicTrick {\n      trickName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of magic tricks.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of fireworks.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Firework {\n      fireworkName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of fireworks.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "fireworks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the team names of esports teams.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EsportsTeam {\n      teamName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the team names of esports teams.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of doctors.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Doctor {\n      doctorName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of doctors.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the full names of photographers.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Photographer {\n      fullName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the full names of photographers.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of colleges.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    College {\n      collegeName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of colleges.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of home appliances.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HomeAppliance {\n      applianceName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of home appliances.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the titles of VR Experiences.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    VRExperience {\n      title\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the titles of VR Experiences.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of toys.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Toy {\n      toyName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of toys.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the drug names.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Drug {\n      drugName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the drug names.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of rollercoasters.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Rollercoaster {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of rollercoasters.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of furniture.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Furniture {\n      furnitureName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of furniture.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "furniture.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title of digital artworks.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DigitalArtwork {\n      title\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title of digital artworks.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the gym names.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Gym {\n      gymName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the gym names.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}", "schemaPath": "gyms.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the festival names of film festivals.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FilmFestival {\n      festivalName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the festival names of film festivals.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}", "schemaPath": "filmfestivals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the business names of local businesses.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LocalBusiness {\n      businessName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the business names of local businesses.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of zoos.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Zoo {\n      zooName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of zoos.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}", "schemaPath": "zoos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the boat names.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Boat {\n      boatName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the boat names.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of pottery items.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PotteryItem {\n      itemName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of pottery items.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}", "schemaPath": "pottery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the park names of national parks.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NationalPark {\n      parkName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the park names of national parks.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of wedding venues.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeddingVenue {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of wedding venues.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}", "schemaPath": "weddings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the course names of language courses.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LanguageCourse {\n      courseName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the course names of language courses.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the pet names of all pets.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Pet {\n      petName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the pet names of all pets.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the award names of literary awards.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LiteraryAward {\n      awardName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the award names of literary awards.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of jewelry items.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JewelryItem {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of jewelry items.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the institute names of research institutes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ResearchInstitute {\n      instituteName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the institute names of research institutes.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}", "schemaPath": "researchinstitute.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of banking services.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BankingService {\n      serviceName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of banking services.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}", "schemaPath": "onlinebanking.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of operating systems.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OperatingSystem {\n      osName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of operating systems.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "operatingsystem.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of freelancers.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Freelancer {\n      freelancerName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of freelancers.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}", "schemaPath": "freelancers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the shop name of tea shops.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TeaShop {\n      shopName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the shop name of tea shops.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}", "schemaPath": "teashops.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the mission names of space missions.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SpaceMission {\n      missionName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the mission names of space missions.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the subject names of biographies.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Biography {\n      subjectName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the subject names of biographies.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the application names of nanotech applications.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NanotechApplication {\n      applicationName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the application names of nanotech applications.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}", "schemaPath": "nanotechnology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of non-profit organizations.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NonProfit {\n      name\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of non-profit organizations.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the trail names of hiking trails.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HikingTrail {\n      trailName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the trail names of hiking trails.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}", "schemaPath": "hikingtrails.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the truck names of food trucks.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FoodTruck {\n      truckName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the truck names of food trucks.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}", "schemaPath": "foodtrucks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the names of AR applications.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ARApplication {\n      appName\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the names of AR applications.\n```", "apiRef": "Simple Get to return a single property\n\n`Get`\u00a0function requirements\nTo retrieve objects from Weaviate, you must use the\u00a0`Get`\u00a0function and specify at least:\n\n- The target\u00a0`class`\u00a0to search, and\n- One or more\u00a0`properties`\u00a0to retrieve.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-single-property.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the chemical element objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ChemicalElement {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the chemical element objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the marine species objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MarineSpecies {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the marine species objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the robot objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Robot {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the robot objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}", "schemaPath": "robotics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the civilization objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Civilization {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the civilization objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}", "schemaPath": "ancientcivilization.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the streaming platform objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    StreamingPlatform {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the streaming platform objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the cosmetic product objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CosmeticProduct {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the cosmetic product objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}", "schemaPath": "cosmetics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the energy source objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EnergySource {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the energy source objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the plant objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the plant objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}", "schemaPath": "plants.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the person objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Person {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the person objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the candle objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Candle {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the candle objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "candles.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the comedy special objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ComedySpecial {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the comedy special objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the MobileApp objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MobileApp {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the MobileApp objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}", "schemaPath": "mobileapplications.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the MagicTrick objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MagicTrick {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the MagicTrick objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the firework objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Firework {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the firework objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "fireworks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the EsportsTeam objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EsportsTeam {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the EsportsTeam objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the doctor objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Doctor {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the doctor objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the photographer objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Photographer {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the photographer objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the college objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    College {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the college objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the home appliance objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HomeAppliance {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the home appliance objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the VRExperience objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    VRExperience {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the VRExperience objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the toy objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Toy {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the toy objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the drug objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Drug {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the drug objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the rollercoaster objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Rollercoaster {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the rollercoaster objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the furniture objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Furniture {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the furniture objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "furniture.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the digital artwork objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DigitalArtwork {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the digital artwork objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the gym objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Gym {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the gym objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}", "schemaPath": "gyms.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the film festival objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FilmFestival {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the film festival objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}", "schemaPath": "filmfestivals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the local business objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LocalBusiness {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the local business objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the zoo objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Zoo {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the zoo objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}", "schemaPath": "zoos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the boat objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Boat {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the boat objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the pottery item objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PotteryItem {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the pottery item objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}", "schemaPath": "pottery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the national park objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NationalPark {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the national park objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the wedding venue objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeddingVenue {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the wedding venue objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}", "schemaPath": "weddings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the language course objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LanguageCourse {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the language course objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the pet objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Pet {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the pet objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the LiteraryAward objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LiteraryAward {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the LiteraryAward objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the jewelry item objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JewelryItem {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the jewelry item objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the research institute objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ResearchInstitute {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the research institute objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}", "schemaPath": "researchinstitute.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the banking service objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BankingService {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the banking service objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}", "schemaPath": "onlinebanking.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the operating system objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OperatingSystem {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the operating system objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "operatingsystem.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the freelancer objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Freelancer {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the freelancer objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}", "schemaPath": "freelancers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the TeaShop objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TeaShop {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the TeaShop objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}", "schemaPath": "teashops.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the space mission objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SpaceMission {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the space mission objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the Biography objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Biography {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the Biography objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the NanotechApplication objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NanotechApplication {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the NanotechApplication objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}", "schemaPath": "nanotechnology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the NonProfit objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NonProfit {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the NonProfit objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the hiking trail objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HikingTrail {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the hiking trail objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}", "schemaPath": "hikingtrails.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the food truck objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FoodTruck {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the food truck objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}", "schemaPath": "foodtrucks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the ARApplication objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ARApplication {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the ARApplication objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Artworks class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Artwork {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Artworks class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average height of Plants in a \"Rose Garden\" with a maximum distance of 0.15?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Plant(\n      nearText: {\n        concepts: [\"Rose Garden\"],\n        distance: 0.15\n      }\n    ) {\n      height {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average height of Plants in a \"Rose Garden\" with a maximum distance of 0.15?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average waterVolume of Aquariums about \"coral reef\" with a maximum distance of 0.3.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Aquarium(\n      nearText: {\n        concepts: [\"coral reef\"],\n        distance: 0.3\n      }\n    ) {\n      waterVolume {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average waterVolume of Aquariums about \"coral reef\" with a maximum distance of 0.3.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average clipNumber of PodClips related to \"technology\" and \"innovation\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    PodClip(\n      nearText: {\n        concepts: [\"technology\", \"innovation\"],\n        distance: 0.3\n      }\n    ) {\n      clipNumber {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average clipNumber of PodClips related to \"technology\" and \"innovation\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average minPlayers of BoardGames about \"strategy\" with a maximum distance of 0.3.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    BoardGame(\n      nearText: {\n        concepts: [\"strategy\"],\n        distance: 0.3\n      }\n    ) {\n      minPlayers {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average minPlayers of BoardGames about \"strategy\" with a maximum distance of 0.3.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average year of Cars that are similar to \"Luxury Sedan\" with a maximum distance of 0.15?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Car(\n      nearText: {\n        concepts: [\"Luxury Sedan\"],\n        distance: 0.15\n      }\n    ) {\n      year {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average year of Cars that are similar to \"Luxury Sedan\" with a maximum distance of 0.15?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the sum of likes for Posts related to \"technology\" and \"innovation\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Post(\n      nearText: {\n        concepts: [\"technology\", \"innovation\"],\n        distance: 0.3\n      }\n    ) {\n      likes {\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the sum of likes for Posts related to \"technology\" and \"innovation\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the sum of stars for CodeRepositories related to \"machine learning\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CodeRepository(\n      nearText: {\n        concepts: [\"machine learning\"],\n        distance: 0.3\n      }\n    ) {\n      stars {\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the sum of stars for CodeRepositories related to \"machine learning\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the total funding of Startups related to \"technology\" and \"innovation\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Startup(\n      nearText: {\n        concepts: [\"technology\", \"innovation\"],\n        distance: 0.3\n      }\n    ) {\n      funding {\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the total funding of Startups related to \"technology\" and \"innovation\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average rating of Games about \"Action Adventure\" with a maximum distance of 0.3.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Game(\n      nearText: {\n        concepts: [\"Action Adventure\"],\n        distance: 0.3\n      }\n    ) {\n      rating {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average rating of Games about \"Action Adventure\" with a maximum distance of 0.3.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the count of Contacts with the fullName \"John Doe\" within a maximum distance of 0.2?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Contact(\n      nearText: {\n        concepts: [\"John Doe\"],\n        distance: 0.2\n      }\n    ) {\n      fullName {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the count of Contacts with the fullName \"John Doe\" within a maximum distance of 0.2?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average pageCount of Books about \"Artificial Intelligence Sci-Fi\" with a maximum distance of 0.2?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Book(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      pageCount {\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average pageCount of Books about \"Artificial Intelligence Sci-Fi\" with a maximum distance of 0.2?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the sum of marketCap for Cryptocurrencies related to \"Bitcoin\" with a maximum distance of 0.1?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Cryptocurrency(\n      nearText: {\n        concepts: [\"Bitcoin\"],\n        distance: 0.1\n      }\n    ) {\n      marketCap {\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the sum of marketCap for Cryptocurrencies related to \"Bitcoin\" with a maximum distance of 0.1?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of Houses with a maximum distance of 0.15 that are about \"Modern Architecture\"?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    House(\n      nearText: {\n        concepts: [\"Modern Architecture\"],\n        distance: 0.15\n      }\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of Houses with a maximum distance of 0.15 that are about \"Modern Architecture\"?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average salary of JobListings for the concept \"Software Engineer\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    JobListing(\n      nearText: {\n        concepts: [\"Software Engineer\"],\n        distance: 0.3\n      }\n    ) {\n      salary {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average salary of JobListings for the concept \"Software Engineer\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and descriptions of 10 historical events and ask a Large Language Model to answer \"What do these historical events have in common?\" passing in the event names and descriptions to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HistoricalEvent (\n      limit: 10\n    ) {\n      eventName\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these historical events have in common?\n            \"\"\",\n            properties: [\"eventName\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and descriptions of 10 historical events and ask a Large Language Model to answer \"What do these historical events have in common?\" passing in the event names and descriptions to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the title and synopses of 10 TV series and ask a Large Language Model to answer \"What do these TV series have in common?\" passing in the title and synopsis to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TVSeries (limit: 10){\n      title\n      synopsis\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these TV series have in common?\n            \"\"\",\n            properties: [\"title\", \"synopsis\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the title and synopses of 10 TV series and ask a Large Language Model to answer \"What do these TV series have in common?\" passing in the title and synopsis to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and descriptions of 10 workouts and ask a Large Language Model to answer \"What do these workouts have in common?\" passing in the names and descriptions to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Workout (limit: 10) {\n      name\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these workouts have in common?\n            \"\"\",\n            properties: [\"name\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and descriptions of 10 workouts and ask a Large Language Model to answer \"What do these workouts have in common?\" passing in the names and descriptions to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the title and lyrics of 10 songs and ask a Large Language Model to answer \"What do these songs have in common?\" passing in the title and lyrics to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Song (limit: 10){\n      title\n      lyrics\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these songs have in common?\n            \"\"\",\n            properties: [\"title\", \"lyrics\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the title and lyrics of 10 songs and ask a Large Language Model to answer \"What do these songs have in common?\" passing in the title and lyrics to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the species and care instructions of 10 plants and ask a Large Language Model to answer \"What do these plants have in common?\" passing in the species and care instructions to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant (limit: 10){\n      species\n      careInstructions\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these plants have in common?\n            \"\"\",\n            properties: [\"species\", \"careInstructions\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the species and care instructions of 10 plants and ask a Large Language Model to answer \"What do these plants have in common?\" passing in the species and care instructions to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the title and instructions of 10 recipes and ask a Large Language Model to answer \"What do these recipes have in common?\" passing in the title and instructions to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Recipe (\n      limit: 10\n    ) {\n      title\n      instructions\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these recipes have in common?\n            \"\"\",\n            properties: [\"title\", \"instructions\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the title and instructions of 10 recipes and ask a Large Language Model to answer \"What do these recipes have in common?\" passing in the title and instructions to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and descriptions of 10 destinations and ask a Large Language Model to answer \"What do these destinations have in common?\" passing in the name and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Destination (limit: 10){\n      name\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these destinations have in common?\n            \"\"\",\n            properties: [\"name\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and descriptions of 10 destinations and ask a Large Language Model to answer \"What do these destinations have in common?\" passing in the name and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and descriptions of 10 yoga poses and ask a Large Language Model to answer \"What do these yoga poses have in common?\" passing in the name and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    YogaPose (\n      limit: 10\n    ) {\n      name\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these yoga poses have in common?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and descriptions of 10 yoga poses and ask a Large Language Model to answer \"What do these yoga poses have in common?\" passing in the name and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the summaries and content of 10 podcast clips and ask a Large Language Model to answer \"What do these podcast clips have in common?\" passing in the summaries and content to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PodClip (\n      nearText: {\n        concepts: [\"Podcast clips\"]\n      },\n      limit: 10\n    ) {\n      summary\n      content\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these podcast clips have in common?\n            \"\"\",\n            properties: [\"summary\", \"content\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the summaries and content of 10 podcast clips and ask a Large Language Model to answer \"What do these podcast clips have in common?\" passing in the summaries and content to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and descriptions of 10 instruments and ask a Large Language Model to answer \"What do these instruments have in common?\" passing in the name and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Instrument (limit: 10){\n      name\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these instruments have in common?\n            \"\"\",\n            properties: [\"name\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and descriptions of 10 instruments and ask a Large Language Model to answer \"What do these instruments have in common?\" passing in the name and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the location and equipment of 10 weather stations and ask a Large Language Model to answer \"What do these weather stations have in common?\" passing in the location and equipment to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeatherStation (limit: 10){\n      location\n      equipment\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these weather stations have in common?\n            \"\"\",\n            properties: [\"location\", \"equipment\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the location and equipment of 10 weather stations and ask a Large Language Model to answer \"What do these weather stations have in common?\" passing in the location and equipment to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the title and genre of 10 movies and ask a Large Language Model to answer \"What do these movies have in common?\" passing in the title and genre to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Movie (limit: 10){\n      title\n      genre\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these movies have in common?\n            \"\"\",\n            properties: [\"title\", \"genre\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the title and genre of 10 movies and ask a Large Language Model to answer \"What do these movies have in common?\" passing in the title and genre to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the make and model of 10 cars and ask a Large Language Model to answer \"What do these cars have in common?\" passing in the make and model to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car (limit: 10){\n      make\n      model\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these cars have in common?\n            \"\"\",\n            properties: [\"make\", \"model\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the make and model of 10 cars and ask a Large Language Model to answer \"What do these cars have in common?\" passing in the make and model to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the case titles and summaries of 10 legal cases and ask a Large Language Model to answer \"What do these legal cases have in common?\" passing in the case title and summary to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase (limit: 10) {\n      caseTitle\n      caseSummary\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these legal cases have in common?\n            \"\"\",\n            properties: [\"caseTitle\", \"caseSummary\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the case titles and summaries of 10 legal cases and ask a Large Language Model to answer \"What do these legal cases have in common?\" passing in the case title and summary to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the device names and features of 10 smart devices and ask a Large Language Model to answer \"What do these devices have in common?\" passing in the device names and features to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SmartDevice (limit: 10){\n      deviceName\n      features\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these devices have in common?\n            \"\"\",\n            properties: [\"deviceName\", \"features\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the device names and features of 10 smart devices and ask a Large Language Model to answer \"What do these devices have in common?\" passing in the device names and features to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the content and hashtags of 10 posts and ask a Large Language Model to answer \"What do these posts have in common?\" passing in the content and hashtags to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Post (limit: 10){\n      content\n      hashtags\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these posts have in common?\n            \"\"\",\n            properties: [\"content\", \"hashtags\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the content and hashtags of 10 posts and ask a Large Language Model to answer \"What do these posts have in common?\" passing in the content and hashtags to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and species of 10 animals and ask a Large Language Model to answer \"What do these animals have in common?\" passing in the names and species to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Animal (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      name\n      species\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and species of 10 animals and ask a Large Language Model to answer \"What do these animals have in common?\" passing in the names and species to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and descriptions of 10 fashion brands and ask a Large Language Model to answer \"What do these fashion brands have in common?\" passing in the name and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FashionBrand (limit: 10){\n      name\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these fashion brands have in common?\n            \"\"\",\n            properties: [\"name\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and descriptions of 10 fashion brands and ask a Large Language Model to answer \"What do these fashion brands have in common?\" passing in the name and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and tasting notes of 10 wines and ask a Large Language Model to answer \"What do these wines have in common?\" passing in the names and tasting notes to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine (limit: 10) {\n      name\n      tastingNotes\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these wines have in common?\n            \"\"\",\n            properties: [\"name\", \"tastingNotes\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and tasting notes of 10 wines and ask a Large Language Model to answer \"What do these wines have in common?\" passing in the names and tasting notes to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and diagnoses of 10 patients and ask a Large Language Model to answer \"What do these patients have in common?\" passing in the names and diagnoses to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Patient (limit: 10){\n      name\n      diagnosis\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these patients have in common?\n            \"\"\",\n            properties: [\"name\", \"diagnosis\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and diagnoses of 10 patients and ask a Large Language Model to answer \"What do these patients have in common?\" passing in the names and diagnoses to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the model and manufacturer of 10 telescopes and ask a Large Language Model to answer \"What do these telescopes have in common?\" passing in the model and manufacturer to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Telescope (\n      limit: 10\n    ) {\n      model\n      manufacturer\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these telescopes have in common?\n            \"\"\",\n            properties: [\"model\", \"manufacturer\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the model and manufacturer of 10 telescopes and ask a Large Language Model to answer \"What do these telescopes have in common?\" passing in the model and manufacturer to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and descriptions of 10 products and ask a Large Language Model to answer \"What do these products have in common?\" passing in the names and descriptions to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product (limit: 10){\n      name\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these products have in common?\n            \"\"\",\n            properties: [\"name\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and descriptions of 10 products and ask a Large Language Model to answer \"What do these products have in common?\" passing in the names and descriptions to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the title and descriptions of 10 events and ask a Large Language Model to answer \"What do these events have in common?\" passing in the title and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Event (\n      limit: 10\n    ) {\n      title\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these events have in common?\n            \"\"\",\n            properties: [\"title\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the title and descriptions of 10 events and ask a Large Language Model to answer \"What do these events have in common?\" passing in the title and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the title and genre of 10 games and ask a Large Language Model to answer \"What do these games have in common?\" passing in the title and genre to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Game (limit: 10){\n      title\n      genre\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these games have in common?\n            \"\"\",\n            properties: [\"title\", \"genre\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the title and genre of 10 games and ask a Large Language Model to answer \"What do these games have in common?\" passing in the title and genre to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the title and medium of 10 artworks and ask a Large Language Model to answer \"What do these artworks have in common?\" passing in the title and medium to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Artwork (limit: 10){\n      title\n      medium\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these artworks have in common?\n            \"\"\",\n            properties: [\"title\", \"medium\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the title and medium of 10 artworks and ask a Large Language Model to answer \"What do these artworks have in common?\" passing in the title and medium to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the make and model of 10 cars and ask a Large Language Model to answer \"What do these cars have in common?\" passing in the make and model to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car (limit: 10){\n      make\n      model\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these cars have in common?\n            \"\"\",\n            properties: [\"make\", \"model\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the make and model of 10 cars and ask a Large Language Model to answer \"What do these cars have in common?\" passing in the make and model to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the full names and email addresses of 10 contacts and ask a Large Language Model to answer \"What do these contacts have in common?\" passing in the full name and email address to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Contact (\n      limit: 10\n    ) {\n      fullName\n      email\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these contacts have in common?\n            \"\"\",\n            properties: [\"fullName\", \"email\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the full names and email addresses of 10 contacts and ask a Large Language Model to answer \"What do these contacts have in common?\" passing in the full name and email address to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and hub airports of 10 airlines and ask a Large Language Model to answer \"What do these airlines have in common?\" passing in the names and hub airports to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Airline (limit: 10){\n      name\n      hubAirport\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these airlines have in common?\n            \"\"\",\n            properties: [\"name\", \"hubAirport\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and hub airports of 10 airlines and ask a Large Language Model to answer \"What do these airlines have in common?\" passing in the names and hub airports to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and job titles of 10 employees and ask a Large Language Model to answer \"What do these employees have in common?\" passing in the names and job titles to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Employee (limit: 10){\n      name\n      jobTitle\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these employees have in common?\n            \"\"\",\n            properties: [\"name\", \"jobTitle\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and job titles of 10 employees and ask a Large Language Model to answer \"What do these employees have in common?\" passing in the names and job titles to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and descriptions of 10 products and ask a Large Language Model to answer \"What do these products have in common?\" passing in the names and descriptions to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product (limit: 10){\n      name\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these products have in common?\n            \"\"\",\n            properties: [\"name\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and descriptions of 10 products and ask a Large Language Model to answer \"What do these products have in common?\" passing in the names and descriptions to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and locations of 10 museums and ask a Large Language Model to answer \"What do these museums have in common?\" passing in the names and locations to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Museum (limit: 10) {\n      name\n      location\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these museums have in common?\n            \"\"\",\n            properties: [\"name\", \"location\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and locations of 10 museums and ask a Large Language Model to answer \"What do these museums have in common?\" passing in the names and locations to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and cities of 10 teams and ask a Large Language Model to answer \"What do these teams have in common?\" passing in the names and cities to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team (limit: 10){\n      name\n      city\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these teams have in common?\n            \"\"\",\n            properties: [\"name\", \"city\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and cities of 10 teams and ask a Large Language Model to answer \"What do these teams have in common?\" passing in the names and cities to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the address and description of 10 houses and ask a Large Language Model to answer \"What do these houses have in common?\" passing in the address and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    House (limit: 10){\n      address\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these houses have in common?\n            \"\"\",\n            properties: [\"address\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the address and description of 10 houses and ask a Large Language Model to answer \"What do these houses have in common?\" passing in the address and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the beer names and tasting notes of 10 craft beers and ask a Large Language Model to answer \"What do these beers have in common?\" passing in the beer names and tasting notes to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CraftBeer (limit: 10){\n      beerName\n      tastingNotes\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these beers have in common?\n            \"\"\",\n            properties: [\"beerName\", \"tastingNotes\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the beer names and tasting notes of 10 craft beers and ask a Large Language Model to answer \"What do these beers have in common?\" passing in the beer names and tasting notes to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and services of 10 spas and ask a Large Language Model to answer \"What do these spas have in common?\" passing in the names and services to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Spa (\n      limit: 10\n    ) {\n      name\n      services\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these spas have in common?\n            \"\"\",\n            properties: [\"name\", \"services\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and services of 10 spas and ask a Large Language Model to answer \"What do these spas have in common?\" passing in the names and services to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the title and descriptions of 10 courses and ask a Large Language Model to answer \"What do these courses have in common?\" passing in the title and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Course (limit: 10){\n      title\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these courses have in common?\n            \"\"\",\n            properties: [\"title\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the title and descriptions of 10 courses and ask a Large Language Model to answer \"What do these courses have in common?\" passing in the title and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the title and abstract of 10 papers and ask a Large Language Model to answer \"What do these papers have in common?\" passing in the title and abstract to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Paper (\n      limit: 10\n    ) {\n      title\n      abstract\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these papers have in common?\n            \"\"\",\n            properties: [\"title\", \"abstract\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the title and abstract of 10 papers and ask a Large Language Model to answer \"What do these papers have in common?\" passing in the title and abstract to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the title and description of 10 job listings and ask a Large Language Model to answer \"What do these job listings have in common?\" passing in the title and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JobListing (limit: 10) {\n      title\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these job listings have in common?\n            \"\"\",\n            properties: [\"title\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the title and description of 10 job listings and ask a Large Language Model to answer \"What do these job listings have in common?\" passing in the title and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and descriptions of 10 programming languages and ask a Large Language Model to answer \"What do these programming languages have in common?\" passing in the name and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ProgrammingLanguage (limit: 10){\n      name\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these programming languages have in common?\n            \"\"\",\n            properties: [\"name\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and descriptions of 10 programming languages and ask a Large Language Model to answer \"What do these programming languages have in common?\" passing in the name and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of objects in the Fireworks class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Firework {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of objects in the Fireworks class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "fireworks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Rollercoasters class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Rollercoaster {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Rollercoasters class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the total count of objects in the Freelancers class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Freelancer {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the total count of objects in the Freelancers class.\n```", "apiRef": "Aggregate, retrieve a meta property\n\nThe meta property has only one sub-property (count) available. This returns the count of objects matched by the query.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-meta.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}", "schemaPath": "freelancers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average burnTime of Candles with the concept \"Vanilla\" within a maximum distance of 0.1?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Candle(\n      nearText: {\n        concepts: [\"Vanilla\"],\n        distance: 0.1\n      }\n    ) {\n      burnTime {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average burnTime of Candles with the concept \"Vanilla\" within a maximum distance of 0.1?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "candles.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average rating of MobileApps related to \"productivity\" and \"task management\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    MobileApp(\n      nearText: {\n        concepts: [\"productivity\", \"task management\"],\n        distance: 0.3\n      }\n    ) {\n      rating {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average rating of MobileApps related to \"productivity\" and \"task management\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}", "schemaPath": "mobileapplications.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average duration of Fireworks about \"Colorful Explosions\" with a maximum distance of 0.3.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Firework(\n      nearText: {\n        concepts: [\"Colorful Explosions\"],\n        distance: 0.3\n      }\n    ) {\n      duration {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average duration of Fireworks about \"Colorful Explosions\" with a maximum distance of 0.3.\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "fireworks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of Toys that are related to \"Educational Toys\" with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Toy(\n      nearText: {\n        concepts: [\"Educational Toys\"],\n        distance: 0.3\n      }\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of Toys that are related to \"Educational Toys\" with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average age of Pets that are similar to \"Golden Retriever\" with a maximum distance of 0.15?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Pet(\n      nearText: {\n        concepts: [\"Golden Retriever\"],\n        distance: 0.15\n      }\n    ) {\n      age {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average age of Pets that are similar to \"Golden Retriever\" with a maximum distance of 0.15?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of JewelryItems that are similar to \"diamond necklace\" with a maximum distance of 0.15?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    JewelryItem(\n      nearText: {\n        concepts: [\"diamond necklace\"],\n        distance: 0.15\n      }\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of JewelryItems that are similar to \"diamond necklace\" with a maximum distance of 0.15?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average rate of Freelancers specializing in web development with a maximum distance of 0.3?\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Freelancer(\n      nearText: {\n        concepts: [\"web development\"],\n        distance: 0.3\n      }\n    ) {\n      rate {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average rate of Freelancers specializing in web development with a maximum distance of 0.3?\n```", "apiRef": "With nearXXX\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\n\nSet a maximum distance\nYou can set the distance operator to specify the maximum dissimilarity (i.e. minimum similarity) of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are within a distance of 0.19 to \"animals in space\", and returns the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.19\n      }\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-distance.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}", "schemaPath": "freelancers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the compound names and formulas of 10 chemical compounds and ask a Large Language Model to answer \"What do these compounds have in common?\" passing in the compound name and formula to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ChemicalCompound (\n      limit: 10\n    ) {\n      compoundName\n      formula\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these compounds have in common?\n            \"\"\",\n            properties: [\"compoundName\", \"formula\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the compound names and formulas of 10 chemical compounds and ask a Large Language Model to answer \"What do these compounds have in common?\" passing in the compound name and formula to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the species names and habitats of 10 marine species and ask a Large Language Model to answer \"What do these marine species have in common?\" passing in the species name and habitat to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MarineSpecies (\n      limit: 10\n    ) {\n      speciesName\n      habitat\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these marine species have in common?\n            \"\"\",\n            properties: [\"speciesName\", \"habitat\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the species names and habitats of 10 marine species and ask a Large Language Model to answer \"What do these marine species have in common?\" passing in the species name and habitat to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the platform name and overviews of 10 streaming platforms and ask a Large Language Model to answer \"What do these streaming platforms have in common?\" passing in the platform name and overview to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    StreamingPlatform (limit: 10) {\n      platformName\n      overview\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these streaming platforms have in common?\n            \"\"\",\n            properties: [\"platformName\", \"overview\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the platform name and overviews of 10 streaming platforms and ask a Large Language Model to answer \"What do these streaming platforms have in common?\" passing in the platform name and overview to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the source type and descriptions of 10 energy sources and ask a Large Language Model to answer \"What do these energy sources have in common?\" passing in the source type and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EnergySource (limit: 10) {\n      sourceType\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these energy sources have in common?\n            \"\"\",\n            properties: [\"sourceType\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the source type and descriptions of 10 energy sources and ask a Large Language Model to answer \"What do these energy sources have in common?\" passing in the source type and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the common names and scientific names of 10 plants and ask a Large Language Model to answer \"What do these plants have in common?\" passing in the common name and scientific name to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant (limit: 10){\n      commonName\n      scientificName\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these plants have in common?\n            \"\"\",\n            properties: [\"commonName\", \"scientificName\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the common names and scientific names of 10 plants and ask a Large Language Model to answer \"What do these plants have in common?\" passing in the common name and scientific name to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}", "schemaPath": "plants.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the full names and birth years of 10 individuals and ask a Large Language Model to answer \"What do these individuals have in common?\" passing in the full names and birth years to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Person (\n      limit: 10\n    ) {\n      fullName\n      birthYear\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these individuals have in common?\n            \"\"\",\n            properties: [\"fullName\", \"birthYear\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the full names and birth years of 10 individuals and ask a Large Language Model to answer \"What do these individuals have in common?\" passing in the full names and birth years to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the candle names and scents of 10 candles and ask a Large Language Model to answer \"What do these candles have in common?\" passing in the candle name and scent to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Candle (limit: 10){\n      candleName\n      scent\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these candles have in common?\n            \"\"\",\n            properties: [\"candleName\", \"scent\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the candle names and scents of 10 candles and ask a Large Language Model to answer \"What do these candles have in common?\" passing in the candle name and scent to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "candles.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the special titles and descriptions of 10 comedy specials and ask a Large Language Model to answer \"What do these comedy specials have in common?\" passing in the special title and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ComedySpecial (\n      limit: 10\n    ) {\n      specialTitle\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these comedy specials have in common?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the special titles and descriptions of 10 comedy specials and ask a Large Language Model to answer \"What do these comedy specials have in common?\" passing in the special title and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the trick names and descriptions of 10 magic tricks and ask a Large Language Model to answer \"What do these magic tricks have in common?\" passing in the trick name and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MagicTrick (limit: 10) {\n      trickName\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these magic tricks have in common?\n            \"\"\",\n            properties: [\"trickName\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the trick names and descriptions of 10 magic tricks and ask a Large Language Model to answer \"What do these magic tricks have in common?\" passing in the trick name and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and effects of 10 fireworks and ask a Large Language Model to answer \"What do these fireworks have in common?\" passing in the firework names and effects to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Firework (limit: 10){\n      fireworkName\n      effects\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these fireworks have in common?\n            \"\"\",\n            properties: [\"fireworkName\", \"effects\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and effects of 10 fireworks and ask a Large Language Model to answer \"What do these fireworks have in common?\" passing in the firework names and effects to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "fireworks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the team names and player names of 10 e-sports teams and ask a Large Language Model to answer \"What do these e-sports teams have in common?\" passing in the team names and player names to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EsportsTeam (limit: 10) {\n      teamName\n      members {\n        ... on Player {\n          playerName\n          nickname\n        }\n      }\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these e-sports teams have in common?\n            \"\"\",\n            properties: [\"teamName\", \"members.playerName\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the team names and player names of 10 e-sports teams and ask a Large Language Model to answer \"What do these e-sports teams have in common?\" passing in the team names and player names to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and specializations of 10 doctors and ask a Large Language Model to answer \"What do these doctors have in common?\" passing in the doctor names and specializations to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Doctor (limit: 10){\n      doctorName\n      specialization\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these doctors have in common?\n            \"\"\",\n            properties: [\"doctorName\", \"specialization\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and specializations of 10 doctors and ask a Large Language Model to answer \"What do these doctors have in common?\" passing in the doctor names and specializations to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the full names and bios of 10 photographers and ask a Large Language Model to answer \"What do these photographers have in common?\" passing in the full name and bio to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Photographer (limit: 10){\n      fullName\n      bio\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these photographers have in common?\n            \"\"\",\n            properties: [\"fullName\", \"bio\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the full names and bios of 10 photographers and ask a Large Language Model to answer \"What do these photographers have in common?\" passing in the full name and bio to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the college names and descriptions of 10 colleges and ask a Large Language Model to answer \"What do these colleges have in common?\" passing in the college names and descriptions to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    College (limit: 10){\n      collegeName\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these colleges have in common?\n            \"\"\",\n            properties: [\"collegeName\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the college names and descriptions of 10 colleges and ask a Large Language Model to answer \"What do these colleges have in common?\" passing in the college names and descriptions to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the titles of 10 VR experiences and ask a Large Language Model to answer \"What do these VR experiences have in common?\" passing in the titles to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    VRExperience (limit: 10) {\n      title\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these VR experiences have in common?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the titles of 10 VR experiences and ask a Large Language Model to answer \"What do these VR experiences have in common?\" passing in the titles to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the toy names and brands of 10 toys and ask a Large Language Model to answer \"What do these toys have in common?\" passing in the toy name and brand to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Toy (\n      limit: 10\n    ) {\n      toyName\n      brand\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these toys have in common?\n            \"\"\",\n            properties: [\"toyName\", \"brand\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the toy names and brands of 10 toys and ask a Large Language Model to answer \"What do these toys have in common?\" passing in the toy name and brand to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the drug names and active ingredients of 10 drugs and ask a Large Language Model to answer \"What do these drugs have in common?\" passing in the drug name and active ingredient to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Drug (limit: 10){\n      drugName\n      activeIngredient\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these drugs have in common?\n            \"\"\",\n            properties: [\"drugName\", \"activeIngredient\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the drug names and active ingredients of 10 drugs and ask a Large Language Model to answer \"What do these drugs have in common?\" passing in the drug name and active ingredient to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and descriptions of 10 rollercoasters and ask a Large Language Model to answer \"What do these rollercoasters have in common?\" passing in the name and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Rollercoaster (limit: 10){\n      name\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these rollercoasters have in common?\n            \"\"\",\n            properties: [\"name\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and descriptions of 10 rollercoasters and ask a Large Language Model to answer \"What do these rollercoasters have in common?\" passing in the name and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and dimensions of 10 furniture pieces and ask a Large Language Model to answer \"What do these furniture pieces have in common?\" passing in the furniture name and dimensions to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Furniture (limit: 10) {\n      furnitureName\n      dimensions\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these furniture pieces have in common?\n            \"\"\",\n            properties: [\"furnitureName\", \"dimensions\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and dimensions of 10 furniture pieces and ask a Large Language Model to answer \"What do these furniture pieces have in common?\" passing in the furniture name and dimensions to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "furniture.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the title and description of 10 digital artworks and ask a Large Language Model to answer \"What do these artworks have in common?\" passing in the title and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DigitalArtwork (limit: 10) {\n      title\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these artworks have in common?\n            \"\"\",\n            properties: [\"title\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the title and description of 10 digital artworks and ask a Large Language Model to answer \"What do these artworks have in common?\" passing in the title and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the gym names and locations of 10 gyms and ask a Large Language Model to answer \"What do these gyms have in common?\" passing in the gym names and locations to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Gym (limit: 10){\n      gymName\n      location\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these gyms have in common?\n            \"\"\",\n            properties: [\"gymName\", \"location\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the gym names and locations of 10 gyms and ask a Large Language Model to answer \"What do these gyms have in common?\" passing in the gym names and locations to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}", "schemaPath": "gyms.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the festival name and location of 10 film festivals and ask a Large Language Model to answer \"What do these film festivals have in common?\" passing in the festival name and location to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FilmFestival (limit: 10){\n      festivalName\n      location\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these film festivals have in common?\n            \"\"\",\n            properties: [\"festivalName\", \"location\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the festival name and location of 10 film festivals and ask a Large Language Model to answer \"What do these film festivals have in common?\" passing in the festival name and location to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}", "schemaPath": "filmfestivals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the business names and descriptions of 10 local businesses and ask a Large Language Model to answer \"What do these businesses have in common?\" passing in the business name and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LocalBusiness (limit: 10) {\n      businessName\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these businesses have in common?\n            \"\"\",\n            properties: [\"businessName\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the business names and descriptions of 10 local businesses and ask a Large Language Model to answer \"What do these businesses have in common?\" passing in the business name and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the boat names and types of 10 boats and ask a Large Language Model to answer \"What do these boats have in common?\" passing in the boat names and types to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Boat (limit: 10){\n      boatName\n      type\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these boats have in common?\n            \"\"\",\n            properties: [\"boatName\", \"type\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the boat names and types of 10 boats and ask a Large Language Model to answer \"What do these boats have in common?\" passing in the boat names and types to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and descriptions of 10 pottery items and ask a Large Language Model to answer \"What do these pottery items have in common?\" passing in the item names and descriptions to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PotteryItem (limit: 10) {\n      itemName\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these pottery items have in common?\n            \"\"\",\n            properties: [\"itemName\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and descriptions of 10 pottery items and ask a Large Language Model to answer \"What do these pottery items have in common?\" passing in the item names and descriptions to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}", "schemaPath": "pottery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the park names and descriptions of 10 national parks and ask a Large Language Model to answer \"What do these national parks have in common?\" passing in the park name and description to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NationalPark (limit: 10){\n      parkName\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these national parks have in common?\n            \"\"\",\n            properties: [\"parkName\", \"description\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the park names and descriptions of 10 national parks and ask a Large Language Model to answer \"What do these national parks have in common?\" passing in the park name and description to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and locations of 10 wedding venues and ask a Large Language Model to answer \"What do these wedding venues have in common?\" passing in the names and locations to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeddingVenue (\n      limit: 10\n    ) {\n      name\n      location\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these wedding venues have in common?\n            \"\"\",\n            properties: [\"name\", \"location\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and locations of 10 wedding venues and ask a Large Language Model to answer \"What do these wedding venues have in common?\" passing in the names and locations to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}", "schemaPath": "weddings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the course name and language taught for 10 language courses and ask a Large Language Model to answer \"What do these language courses have in common?\" passing in the course name and language taught to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LanguageCourse (limit: 10) {\n      courseName\n      languageTaught\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these language courses have in common?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the course name and language taught for 10 language courses and ask a Large Language Model to answer \"What do these language courses have in common?\" passing in the course name and language taught to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the pet names and species of 10 pets and ask a Large Language Model to answer \"What do these pets have in common?\" passing in the pet names and species to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Pet (limit: 10){\n      petName\n      species\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these pets have in common?\n            \"\"\",\n            properties: [\"petName\", \"species\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the pet names and species of 10 pets and ask a Large Language Model to answer \"What do these pets have in common?\" passing in the pet names and species to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the award names and years established of 10 literary awards and ask a Large Language Model to answer \"What do these literary awards have in common?\" passing in the award name and year established to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LiteraryAward (\n      limit: 10\n    ) {\n      awardName\n      yearEstablished\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these literary awards have in common?\n            \"\"\",\n            properties: [\"awardName\", \"yearEstablished\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the award names and years established of 10 literary awards and ask a Large Language Model to answer \"What do these literary awards have in common?\" passing in the award name and year established to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and materials of 10 jewelry items and ask a Large Language Model to answer \"What do these jewelry items have in common?\" passing in the name and material to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JewelryItem (\n      limit: 10\n    ) {\n      name\n      material\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these jewelry items have in common?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and materials of 10 jewelry items and ask a Large Language Model to answer \"What do these jewelry items have in common?\" passing in the name and material to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and features of 10 banking services and ask a Large Language Model to answer \"What do these banking services have in common?\" passing in the names and features to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BankingService (limit: 10) {\n      serviceName\n      features\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these banking services have in common?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and features of 10 banking services and ask a Large Language Model to answer \"What do these banking services have in common?\" passing in the names and features to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}", "schemaPath": "onlinebanking.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and skills of 10 freelancers and ask a Large Language Model to answer \"What do these freelancers have in common?\" passing in the freelancer names and skills to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Freelancer (limit: 10){\n      freelancerName\n      skills\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these freelancers have in common?\n            \"\"\",\n            properties: [\"freelancerName\", \"skills\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and skills of 10 freelancers and ask a Large Language Model to answer \"What do these freelancers have in common?\" passing in the freelancer names and skills to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}", "schemaPath": "freelancers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the shop name and location of 10 tea shops and ask a Large Language Model to answer \"What do these tea shops have in common?\" passing in the shop name and location to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TeaShop (limit: 10) {\n      shopName\n      location\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these tea shops have in common?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the shop name and location of 10 tea shops and ask a Large Language Model to answer \"What do these tea shops have in common?\" passing in the shop name and location to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}", "schemaPath": "teashops.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the mission name and objectives of 10 space missions and ask a Large Language Model to answer \"What do these space missions have in common?\" passing in the mission name and objective to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SpaceMission (\n      limit: 10\n    ) {\n      missionName\n      objective\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these space missions have in common?\n            \"\"\",\n            properties: [\"missionName\", \"objective\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the mission name and objectives of 10 space missions and ask a Large Language Model to answer \"What do these space missions have in common?\" passing in the mission name and objective to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and missions of 10 non-profit organizations and ask a Large Language Model to answer \"What do these non-profit organizations have in common?\" passing in the name and mission to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NonProfit (limit: 10) {\n      name\n      mission\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these non-profit organizations have in common?\n            \"\"\",\n            properties: [\"name\", \"mission\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and missions of 10 non-profit organizations and ask a Large Language Model to answer \"What do these non-profit organizations have in common?\" passing in the name and mission to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the trail names and locations of 10 hiking trails and ask a Large Language Model to answer \"What do these hiking trails have in common?\" passing in the trail names and locations to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HikingTrail (limit: 10) {\n      trailName\n      location\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these hiking trails have in common?\n            \"\"\",\n            properties: [\"trailName\", \"location\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the trail names and locations of 10 hiking trails and ask a Large Language Model to answer \"What do these hiking trails have in common?\" passing in the trail names and locations to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}", "schemaPath": "hikingtrails.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the truck names and cuisine types of 10 food trucks and ask a Large Language Model to answer \"What do these food trucks have in common?\" passing in the truck name and cuisine type to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FoodTruck (limit: 10){\n      truckName\n      cuisineType\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n            What do these food trucks have in common?\n            \"\"\",\n            properties: [\"truckName\", \"cuisineType\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the truck names and cuisine types of 10 food trucks and ask a Large Language Model to answer \"What do these food trucks have in common?\" passing in the truck name and cuisine type to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}", "schemaPath": "foodtrucks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease get the names and descriptions of 10 AR applications and ask a Large Language Model to answer \"What do these AR applications have in common?\" passing in the application names and descriptions to the Large Language Model.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ARApplication (limit: 10) {\n      appName\n      description\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these AR applications have in common?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease get the names and descriptions of 10 AR applications and ask a Large Language Model to answer \"What do these AR applications have in common?\" passing in the application names and descriptions to the Large Language Model.\n```", "apiRef": "Grouped task\n\nA grouped task works by generating a response for the entire query results set.\n\nWhen using generative search with a grouped task, the required parameter is the user prompt. By default, the entire set of properties are included in the combined prompt unless specified otherwise.\n\nExample\n\nIn the below example, the query:\n\nRetrieves three JeopardyQuestion objects related to cute animals,\nCombines the user prompt with the set of retrieved objects to build the grouped task,\nRetrieves one generated text using the grouped task, and\nReturns the generated text as a part of the first object returned, as well as the requested points property.\nNote that the prompt includes information about the type of the animal (from the answer property), even though the answer property is not explicitly retrieved.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Cute animals\"]\n      },\n      limit: 3\n    ) {\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\"\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```\n\nYou can specify which properties will be included in the grouped task prompt. Use this to limit the information provided in the prompt, and to reduce the prompt length.\n\nIn the below example, the prompt will only include the question and answer properties. Note that the answer property is not explicitly retrieved in the query, but is used by the prompt.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      nearText: {\n        concepts: [\"Australian animals\"]\n      },\n      limit: 3\n    ) {\n      question\n      points\n      _additional {\n        generate(\n          groupedResult: {\n            task: \"\"\"\n              What do these animals have in common, if anything?\n            \"\"\",\n            properties: [\"answer\", \"question\"]\n          }\n        ) {\n          groupedResult\n          error\n        }\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-grouped-task.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
