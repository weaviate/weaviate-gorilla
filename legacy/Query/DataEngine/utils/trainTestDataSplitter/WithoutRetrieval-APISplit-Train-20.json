{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the historical events related to 'World War II', please use an alpha value of 0.25 in the hybrid search, and show the event name, description, year, significant impact, and the names and populations of the involved countries.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HistoricalEvent(\n      hybrid: {\n        query: \"World War II\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      eventName\n      description\n      year\n      hadSignificantImpact\n      involvedCountries {\n        ... on Country {\n          countryName\n          population\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the historical events related to 'World War II', please use an alpha value of 0.25 in the hybrid search, and show the event name, description, year, significant impact, and the names and populations of the involved countries.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the TV series with a hybrid search of 'drama', please use an alpha value of 0.25 in the hybrid search, and show the title, synopsis, on-air status, and the names of the actors.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TVSeries(\n      hybrid: {\n        query: \"drama\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      title\n      synopsis\n      isOnAir\n      hasActor {\n        ... on Actor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the TV series with a hybrid search of 'drama', please use an alpha value of 0.25 in the hybrid search, and show the title, synopsis, on-air status, and the names of the actors.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the workouts with a hybrid search of 'cardio', please use an alpha value of 0.25 in the hybrid search, and show the name, description, duration, whether it is a group workout, and the equipment name and quantity used.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Workout(\n      hybrid: {\n        query: \"cardio\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      description\n      duration\n      isGroup\n      usesEquipment {\n        ... on Equipment {\n          name\n          quantity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the workouts with a hybrid search of 'cardio', please use an alpha value of 0.25 in the hybrid search, and show the name, description, duration, whether it is a group workout, and the equipment name and quantity used.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the songs with a hybrid search of 'pop', please use an alpha value of 0.25 in the hybrid search, and show the title, lyrics, duration, explicitness, and the album's title and release year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Song(\n      hybrid: {\n        query: \"pop\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      title\n      lyrics\n      duration\n      isExplicit\n      inAlbum {\n        ... on Album {\n          title\n          releaseYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the songs with a hybrid search of 'pop', please use an alpha value of 0.25 in the hybrid search, and show the title, lyrics, duration, explicitness, and the album's title and release year.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the plants with a hybrid search of 'rose', please use an alpha value of 0.25 in the hybrid search, and show the species, care instructions, height, flowering status, and the name of the gardener who planted them.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      hybrid: {\n        query: \"rose\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      species\n      careInstructions\n      height\n      isFlowering\n      plantedBy {\n        ... on Gardener {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the plants with a hybrid search of 'rose', please use an alpha value of 0.25 in the hybrid search, and show the species, care instructions, height, flowering status, and the name of the gardener who planted them.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the recipes with a hybrid search of 'pasta', please use an alpha value of 0.25 in the hybrid search, and show the title, instructions, preparation time, vegetarian status, and the name and calories of the ingredients used.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Recipe(\n      hybrid: {\n        query: \"pasta\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      title\n      instructions\n      prepTime\n      isVegetarian\n      usesIngredient {\n        ... on Ingredient {\n          name\n          calories\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the recipes with a hybrid search of 'pasta', please use an alpha value of 0.25 in the hybrid search, and show the title, instructions, preparation time, vegetarian status, and the name and calories of the ingredients used.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the destinations with a hybrid search of 'beach', please use an alpha value of 0.25 in the hybrid search, and show the name, description, average temperature, popularity, and the names of the travelers who have visited.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Destination(\n      hybrid: {\n        query: \"beach\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      description\n      averageTemperature\n      isPopular\n      visitedBy {\n        ... on Traveler {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the destinations with a hybrid search of 'beach', please use an alpha value of 0.25 in the hybrid search, and show the name, description, average temperature, popularity, and the names of the travelers who have visited.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the aquariums with a hybrid search of 'coral reef', please use an alpha value of 0.25 in the hybrid search, and show the name, location, water volume, presence of marine fish, and caretaker's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Aquarium(\n      hybrid: {\n        query: \"coral reef\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      location\n      waterVolume\n      hasMarineFish\n      caretaker {\n        ... on Aquarist {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the aquariums with a hybrid search of 'coral reef', please use an alpha value of 0.25 in the hybrid search, and show the name, location, water volume, presence of marine fish, and caretaker's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the yoga poses with a hybrid search of 'warrior', please use an alpha value of 0.25 in the hybrid search, and show the name, description, complexity level, whether it is for beginners, and the yoga style it belongs to.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    YogaPose(\n      hybrid: {\n        query: \"warrior\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      description\n      complexityLevel\n      isForBeginners\n      fromYogaStyle {\n        ... on YogaStyle {\n          styleName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the yoga poses with a hybrid search of 'warrior', please use an alpha value of 0.25 in the hybrid search, and show the name, description, complexity level, whether it is for beginners, and the yoga style it belongs to.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the instruments with a hybrid search of 'piano', please use an alpha value of 0.25 in the hybrid search, and show the name, description, year introduced, whether it is a string instrument, and the name, genre, and years active of the musicians who play it.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Instrument(\n      hybrid: {\n        query: \"piano\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      description\n      yearIntroduced\n      isString\n      playedBy {\n        ... on Musician {\n          name\n          genre\n          yearsActive\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the instruments with a hybrid search of 'piano', please use an alpha value of 0.25 in the hybrid search, and show the name, description, year introduced, whether it is a string instrument, and the name, genre, and years active of the musicians who play it.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the board games with a hybrid search of 'strategy', please use an alpha value of 0.25 in the hybrid search, and show the name, rules, minimum number of players, whether it is cooperative, and the name of the game designer.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BoardGame(\n      hybrid: {\n        query: \"strategy\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      rules\n      minPlayers\n      isCooperative\n      createdBy {\n        ... on GameDesigner {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the board games with a hybrid search of 'strategy', please use an alpha value of 0.25 in the hybrid search, and show the name, rules, minimum number of players, whether it is cooperative, and the name of the game designer.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the weather stations with a hybrid search of 'temperature', please use an alpha value of 0.25 in the hybrid search, and show the location, equipment, altitude, activity status, and the name and years of experience of the meteorologist managing each station.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeatherStation(\n      hybrid: {\n        query: \"temperature\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      location\n      equipment\n      altitude\n      isActive\n      managedBy {\n        ... on Meteorologist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the weather stations with a hybrid search of 'temperature', please use an alpha value of 0.25 in the hybrid search, and show the location, equipment, altitude, activity status, and the name and years of experience of the meteorologist managing each station.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the movies with a hybrid search of 'action', please use an alpha value of 0.25 in the hybrid search, and show the title, genre, duration, availability, and lead actor's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Movie(\n      hybrid: {\n        query: \"action\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      title\n      genre\n      duration\n      isAvailable\n      leadActor {\n        ... on Actor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the movies with a hybrid search of 'action', please use an alpha value of 0.25 in the hybrid search, and show the title, genre, duration, availability, and lead actor's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the AI models with a hybrid search of 'image classification', please use an alpha value of 0.25 in the hybrid search, and show the model name, application, accuracy, whether it is supervised, and the algorithm's name, description, and year developed.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    AIModel(\n      hybrid: {\n        query: \"image classification\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      modelName\n      application\n      accuracy\n      isSupervised\n      basedOn {\n        ... on Algorithm {\n          name\n          description\n          yearDeveloped\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the AI models with a hybrid search of 'image classification', please use an alpha value of 0.25 in the hybrid search, and show the model name, application, accuracy, whether it is supervised, and the algorithm's name, description, and year developed.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the cars with a hybrid search of 'SUV', please use an alpha value of 0.25 in the hybrid search, and show the make, model, year, availability, and renter's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      hybrid: {\n        query: \"SUV\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      make\n      model\n      year\n      isAvailable\n      rentedBy {\n        ... on Customer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the cars with a hybrid search of 'SUV', please use an alpha value of 0.25 in the hybrid search, and show the make, model, year, availability, and renter's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the legal cases with a hybrid search of 'criminal', please use an alpha value of 0.25 in the hybrid search, and show the case title, case summary, year, ongoing status, and involved party's name, role, and number of cases.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase(\n      hybrid: {\n        query: \"criminal\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      caseTitle\n      caseSummary\n      year\n      isOngoing\n      involvedParty {\n        ... on Party {\n          name\n          role\n          numberOfCases\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the legal cases with a hybrid search of 'criminal', please use an alpha value of 0.25 in the hybrid search, and show the case title, case summary, year, ongoing status, and involved party's name, role, and number of cases.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the smart devices with a hybrid search of 'smart speaker', please use an alpha value of 0.25 in the hybrid search, and show the device name, features, price, wireless capability, and manufacturer's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SmartDevice(\n      hybrid: {\n        query: \"smart speaker\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      deviceName\n      features\n      price\n      isWireless\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the smart devices with a hybrid search of 'smart speaker', please use an alpha value of 0.25 in the hybrid search, and show the device name, features, price, wireless capability, and manufacturer's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the outdoor gear with a hybrid search of 'backpack', please use an alpha value of 0.25 in the hybrid search, and show the gear name, description, weight, waterproof status, and supplier's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OutdoorGear(\n      hybrid: {\n        query: \"backpack\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      gearName\n      description\n      weight\n      isWaterproof\n      supplier {\n        ... on Supplier {\n          supplierName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the outdoor gear with a hybrid search of 'backpack', please use an alpha value of 0.25 in the hybrid search, and show the gear name, description, weight, waterproof status, and supplier's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the restaurants with a hybrid search of 'Italian', please use an alpha value of 0.25 in the hybrid search, and show the name, cuisine, seating capacity, Michelin star status, head chef's name, specialty, and years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Restaurant(\n      hybrid: {\n        query: \"Italian\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      cuisine\n      seatingCapacity\n      hasMichelinStar\n      headChef {\n        ... on Chef {\n          name\n          specialty\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the restaurants with a hybrid search of 'Italian', please use an alpha value of 0.25 in the hybrid search, and show the name, cuisine, seating capacity, Michelin star status, head chef's name, specialty, and years of experience.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the posts with a hybrid search of 'technology', please use an alpha value of 0.25 in the hybrid search, and show the content, hashtags, number of likes, public status, and comments' text and number of likes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Post(\n      hybrid: {\n        query: \"technology\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      content\n      hashtags\n      likes\n      isPublic\n      comments {\n        ... on Comment {\n          text\n          likes\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the posts with a hybrid search of 'technology', please use an alpha value of 0.25 in the hybrid search, and show the content, hashtags, number of likes, public status, and comments' text and number of likes.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the animals with a hybrid search of 'dog', please use an alpha value of 0.25 in the hybrid search, and show the name, species, age, adoption status, and the name of the adopter.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Animal(\n      hybrid: {\n        query: \"dog\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      species\n      age\n      isAdopted\n      adoptedBy {\n        ... on Adopter {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the animals with a hybrid search of 'dog', please use an alpha value of 0.25 in the hybrid search, and show the name, species, age, adoption status, and the name of the adopter.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the fashion brands with a hybrid search of 'luxury', please use an alpha value of 0.25 in the hybrid search, and show the name, description, founding year, luxury status, and designer's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FashionBrand(\n      hybrid: {\n        query: \"luxury\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      description\n      foundingYear\n      isLuxury\n      designedBy {\n        ... on Designer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the fashion brands with a hybrid search of 'luxury', please use an alpha value of 0.25 in the hybrid search, and show the name, description, founding year, luxury status, and designer's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the code repositories with a hybrid search of 'machine learning', please use an alpha value of 0.25 in the hybrid search, and show the repository name, description, number of stars, whether it is a fork, and the username, real name, and contributions of the maintainers.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CodeRepository(\n      hybrid: {\n        query: \"machine learning\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      repositoryName\n      description\n      stars\n      isFork\n      maintainedBy {\n        ... on Developer {\n          username\n          realName\n          contributions\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the code repositories with a hybrid search of 'machine learning', please use an alpha value of 0.25 in the hybrid search, and show the repository name, description, number of stars, whether it is a fork, and the username, real name, and contributions of the maintainers.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the wines with a hybrid search of 'red wine', please use an alpha value of 0.25 in the hybrid search, and show the name, origin, grape variety, tasting notes, vintage year, whether it is red, and the name of the related winery.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine(\n      hybrid: {\n        query: \"red wine\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      origin\n      grapeVariety\n      tastingNotes\n      vintageYear\n      isRed\n      relatedWinery {\n        ... on Winery {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the wines with a hybrid search of 'red wine', please use an alpha value of 0.25 in the hybrid search, and show the name, origin, grape variety, tasting notes, vintage year, whether it is red, and the name of the related winery.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the patients with a hybrid search of 'cancer', please use an alpha value of 0.25 in the hybrid search, and show the name, diagnosis, age, insurance status, and primary doctor's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Patient(\n      hybrid: {\n        query: \"cancer\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      diagnosis\n      age\n      isInsured\n      primaryDoctor {\n        ... on Doctor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the patients with a hybrid search of 'cancer', please use an alpha value of 0.25 in the hybrid search, and show the name, diagnosis, age, insurance status, and primary doctor's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the telescopes with a hybrid search of 'astronomy', please use an alpha value of 0.25 in the hybrid search, and show the model, manufacturer, magnification, usage status, and the name of the astronomer operating it.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Telescope(\n      hybrid: {\n        query: \"astronomy\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      model\n      manufacturer\n      magnification\n      isInUse\n      operatedBy {\n        ... on Astronomer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the telescopes with a hybrid search of 'astronomy', please use an alpha value of 0.25 in the hybrid search, and show the model, manufacturer, magnification, usage status, and the name of the astronomer operating it.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the products with a hybrid search of 'electronics', please use an alpha value of 0.25 in the hybrid search, and show the name, description, price, availability, and reviews' content and rating.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      hybrid: {\n        query: \"electronics\",\n        alpha: 0.25\n      },\n      limit: 10\n    ) {\n      name\n      description\n      price\n      inStock\n      hasReview {\n        ... on Review {\n          content\n          rating\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the products with a hybrid search of 'electronics', please use an alpha value of 0.25 in the hybrid search, and show the name, description, price, availability, and reviews' content and rating.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the startups with a hybrid search of 'technology', please use an alpha value of 0.25 in the hybrid search, and show the name, product, funding, bootstrapping status, and founder's name, biography, and successful startups.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Startup(\n      hybrid: {\n        query: \"technology\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      product\n      funding\n      isBootstrapped\n      founders {\n        ... on Entrepreneur {\n          name\n          biography\n          successfulStartups\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the startups with a hybrid search of 'technology', please use an alpha value of 0.25 in the hybrid search, and show the name, product, funding, bootstrapping status, and founder's name, biography, and successful startups.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the events with a hybrid search of 'music concert', please use an alpha value of 0.25 in the hybrid search, and show the title, description, start time, virtual status, and venue's name and capacity.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Event(\n      hybrid: {\n        query: \"music concert\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      title\n      description\n      startTime\n      isVirtual\n      atVenue {\n        ... on Venue {\n          name\n          capacity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the events with a hybrid search of 'music concert', please use an alpha value of 0.25 in the hybrid search, and show the title, description, start time, virtual status, and venue's name and capacity.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the news outlets with a hybrid search of 'breaking news', please use an alpha value of 0.25 in the hybrid search, and show the name, founding year, online status, and journalist's name and years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NewsOutlet(\n      hybrid: {\n        query: \"breaking news\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      foundingYear\n      isOnline\n      hasJournalist {\n        ... on Journalist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the news outlets with a hybrid search of 'breaking news', please use an alpha value of 0.25 in the hybrid search, and show the name, founding year, online status, and journalist's name and years of experience.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the games with a hybrid search of 'action', please use an alpha value of 0.25 in the hybrid search, and show the title, genre, rating, multiplayer availability, and developer's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Game(\n      hybrid: {\n        query: \"action\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      title\n      genre\n      rating\n      isMultiplayer\n      developedBy {\n        ... on Developer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the games with a hybrid search of 'action', please use an alpha value of 0.25 in the hybrid search, and show the title, genre, rating, multiplayer availability, and developer's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the artwork with a hybrid search of 'modern art', please use an alpha value of 0.25 in the hybrid search, and show the title, medium, year created, availability, and artist's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Artwork(\n      hybrid: {\n        query: \"modern art\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      title\n      medium\n      yearCreated\n      isSold\n      createdBy {\n        ... on Artist {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the artwork with a hybrid search of 'modern art', please use an alpha value of 0.25 in the hybrid search, and show the title, medium, year created, availability, and artist's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the cars with a hybrid search of 'repair', please use an alpha value of 0.25 in the hybrid search, and show the make, model, year, repair status, and owner's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      hybrid: {\n        query: \"repair\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      make\n      model\n      year\n      isRepaired\n      ownedBy {\n        ... on Owner {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the cars with a hybrid search of 'repair', please use an alpha value of 0.25 in the hybrid search, and show the make, model, year, repair status, and owner's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the contacts with a hybrid search of 'John Doe', please use an alpha value of 0.25 in the hybrid search, and show the full name, email, phone number, lead status, and associated company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Contact(\n      hybrid: {\n        query: \"John Doe\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      fullName\n      email\n      phone\n      isLead\n      associatedCompany {\n        ... on Company {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the contacts with a hybrid search of 'John Doe', please use an alpha value of 0.25 in the hybrid search, and show the full name, email, phone number, lead status, and associated company name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the airlines with a hybrid search of 'international', please use an alpha value of 0.25 in the hybrid search, and show the name, hub airport, fleet size, whether it is international, flight number, and duration of the operated flights.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Airline(\n      hybrid: {\n        query: \"international\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      hubAirport\n      fleetSize\n      isInternational\n      operatesFlight {\n        ... on Flight {\n          flightNumber\n          duration\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the airlines with a hybrid search of 'international', please use an alpha value of 0.25 in the hybrid search, and show the name, hub airport, fleet size, whether it is international, flight number, and duration of the operated flights.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the books with a hybrid search of 'science fiction', please use an alpha value of 0.25 in the hybrid search, and show the title, summary, availability, and author's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Book(\n      hybrid: {\n        query: \"science fiction\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      title\n      summary\n      isAvailable\n      author {\n        ... on Author {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the books with a hybrid search of 'science fiction', please use an alpha value of 0.25 in the hybrid search, and show the title, summary, availability, and author's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the cryptocurrencies with a hybrid search of 'Bitcoin', please use an alpha value of 0.25 in the hybrid search, and show the name, symbol, market cap, stability status, and the exchange's name, country, and founded year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Cryptocurrency(\n      hybrid: {\n        query: \"Bitcoin\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      symbol\n      marketCap\n      isStableCoin\n      onExchange {\n        ... on Exchange {\n          name\n          country\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the cryptocurrencies with a hybrid search of 'Bitcoin', please use an alpha value of 0.25 in the hybrid search, and show the name, symbol, market cap, stability status, and the exchange's name, country, and founded year.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the employees who are software engineers. Use a hybrid search with a query of 'software engineer' and an alpha value of 0.25. Show me their names, job titles, salaries, remote work status, and the projects they work on including the project name and budget.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Employee(\n      hybrid: {\n        query: \"software engineer\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      jobTitle\n      salary\n      isRemote\n      worksOn {\n        ... on Project {\n          name\n          budget\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the employees who are software engineers. Use a hybrid search with a query of 'software engineer' and an alpha value of 0.25. Show me their names, job titles, salaries, remote work status, and the projects they work on including the project name and budget.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the products with a hybrid search of 'organic', please use an alpha value of 0.25 in the hybrid search, and show the name, description, price, organic status, and category name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      hybrid: {\n        query: \"organic\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      description\n      price\n      isOrganic\n      category {\n        ... on Category {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the products with a hybrid search of 'organic', please use an alpha value of 0.25 in the hybrid search, and show the name, description, price, organic status, and category name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the museums with a hybrid search of 'art', please use an alpha value of 0.25 in the hybrid search, and show the name, location, founding year, whether it is public, and the title, description, and year of the exhibits.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Museum(\n      hybrid: {\n        query: \"art\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      location\n      foundingYear\n      isPublic\n      hasExhibit {\n        ... on Exhibit {\n          title\n          description\n          year\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the museums with a hybrid search of 'art', please use an alpha value of 0.25 in the hybrid search, and show the name, location, founding year, whether it is public, and the title, description, and year of the exhibits.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the teams with a hybrid search of 'football', please use an alpha value of 0.25 in the hybrid search, and show the name, city, number of wins, champion status, and the name of the league they are in.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team(\n      hybrid: {\n        query: \"football\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      city\n      wins\n      isChampion\n      inLeague {\n        ... on League {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the teams with a hybrid search of 'football', please use an alpha value of 0.25 in the hybrid search, and show the name, city, number of wins, champion status, and the name of the league they are in.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the coffee shops with a hybrid search of 'latte', please use an alpha value of 0.25 in the hybrid search, and show the name, menu, year founded, franchise status, and the neighborhood they are located in.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CoffeeShop(\n      hybrid: {\n        query: \"latte\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      menu\n      yearFounded\n      isFranchise\n      locatedIn {\n        ... on Neighborhood {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the coffee shops with a hybrid search of 'latte', please use an alpha value of 0.25 in the hybrid search, and show the name, menu, year founded, franchise status, and the neighborhood they are located in.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the houses with a hybrid search of '3-bedroom', please use an alpha value of 0.5 in the hybrid search, and show the address, description, price, availability, and the name and experience of the listing agent.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    House(\n      hybrid: {\n        query: \"3-bedroom\",\n        alpha: 0.5\n      },\n      limit: 10\n    ) {\n      address\n      description\n      price\n      isSold\n      listedBy {\n        ... on Agent {\n          name\n          experience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the houses with a hybrid search of '3-bedroom', please use an alpha value of 0.5 in the hybrid search, and show the address, description, price, availability, and the name and experience of the listing agent.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the diet plans with a hybrid search of 'weight loss', please use an alpha value of 0.25 in the hybrid search, and show the name, description, duration in days, vegetarian status, and the food items contained in each diet plan with their respective names and calorie counts.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DietPlan(\n      hybrid: {\n        query: \"weight loss\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      description\n      durationDays\n      isVegetarian\n      contains {\n        ... on FoodItem {\n          itemName\n          calories\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the diet plans with a hybrid search of 'weight loss', please use an alpha value of 0.25 in the hybrid search, and show the name, description, duration in days, vegetarian status, and the food items contained in each diet plan with their respective names and calorie counts.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the craft beers with a hybrid search of 'IPA', please use an alpha value of 0.25 in the hybrid search, and show the beer name, tasting notes, alcohol content, seasonal availability, brewery name, and founded year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CraftBeer(\n      hybrid: {\n        query: \"IPA\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      beerName\n      tastingNotes\n      alcoholContent\n      isSeasonal\n      brewery {\n        ... on Brewery {\n          breweryName\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the craft beers with a hybrid search of 'IPA', please use an alpha value of 0.25 in the hybrid search, and show the beer name, tasting notes, alcohol content, seasonal availability, brewery name, and founded year.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the spas with a hybrid search of 'massage', please use an alpha value of 0.25 in the hybrid search, and show the name, services, average rating, whether it is open, and the location's name, description, and latitude.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Spa(\n      hybrid: {\n        query: \"massage\",\n        alpha: 0.25\n      },\n      limit: 3\n    ) {\n      name\n      services\n      averageRating\n      isOpen\n      locatedIn {\n        ... on Location {\n          name\n          description\n          latitude\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the spas with a hybrid search of 'massage', please use an alpha value of 0.25 in the hybrid search, and show the name, services, average rating, whether it is open, and the location's name, description, and latitude.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the courses with a hybrid search of 'programming', please use an alpha value of 0.25 in the hybrid search, and show the title, description, price, availability, and instructor's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Course(\n      hybrid: {\n        query: \"programming\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      title\n      description\n      price\n      isFree\n      taughtBy {\n        ... on Instructor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the courses with a hybrid search of 'programming', please use an alpha value of 0.25 in the hybrid search, and show the title, description, price, availability, and instructor's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the papers with a hybrid search of 'machine learning', please use an alpha value of 0.25 in the hybrid search, and show the title, abstract, year published, whether it is peer-reviewed, and the name and year of the conference it was presented at.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Paper(\n      hybrid: {\n        query: \"machine learning\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      title\n      abstract\n      yearPublished\n      isPeerReviewed\n      presentedAt {\n        ... on Conference {\n          name\n          year\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the papers with a hybrid search of 'machine learning', please use an alpha value of 0.25 in the hybrid search, and show the title, abstract, year published, whether it is peer-reviewed, and the name and year of the conference it was presented at.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the job listings with a hybrid search of 'software engineer', please use an alpha value of 0.25 in the hybrid search, and show the title, description, salary, remote availability, and the name of the company that posted the job.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JobListing(\n      hybrid: {\n        query: \"software engineer\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      title\n      description\n      salary\n      isRemote\n      postedBy {\n        ... on Company {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the job listings with a hybrid search of 'software engineer', please use an alpha value of 0.25 in the hybrid search, and show the title, description, salary, remote availability, and the name of the company that posted the job.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the programming languages with a hybrid search of 'Python', please use an alpha value of 0.25 in the hybrid search, and show the name, description, year released, whether it is compiled, and the software projects it is used in including the project name, repository URL, and lines of code.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ProgrammingLanguage(\n      hybrid: {\n        query: \"Python\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      description\n      yearReleased\n      isCompiled\n      usedIn {\n        ... on SoftwareProject {\n          projectName\n          repositoryURL\n          linesOfCode\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the programming languages with a hybrid search of 'Python', please use an alpha value of 0.25 in the hybrid search, and show the name, description, year released, whether it is compiled, and the software projects it is used in including the project name, repository URL, and lines of code.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 historical events with BM25 keyword scoring to 'World War II' in the event name, and show the event name, description, year, significant impact, and the involved countries' names and populations.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HistoricalEvent(\n      bm25: {\n        query: \"World War II\",\n        properties: [\"eventName\"]\n      },\n      limit: 5\n    ) {\n      eventName\n      description\n      year\n      hadSignificantImpact\n      involvedCountries {\n        ... on Country {\n          countryName\n          population\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 historical events with BM25 keyword scoring to 'World War II' in the event name, and show the event name, description, year, significant impact, and the involved countries' names and populations.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 TV series with BM25 keyword scoring to 'drama' in the title, and show the title, synopsis, on-air status, and the names of the actors.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TVSeries(\n      bm25: {\n        query: \"drama\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      synopsis\n      isOnAir\n      hasActor {\n        ... on Actor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 TV series with BM25 keyword scoring to 'drama' in the title, and show the title, synopsis, on-air status, and the names of the actors.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 workouts with BM25 keyword scoring to 'cardio' in the name, and show the name, description, duration, whether it is a group workout, and the equipment name and quantity used.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Workout(\n      bm25: {\n        query: \"cardio\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      duration\n      isGroup\n      usesEquipment {\n        ... on Equipment {\n          name\n          quantity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 workouts with BM25 keyword scoring to 'cardio' in the name, and show the name, description, duration, whether it is a group workout, and the equipment name and quantity used.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 songs with BM25 keyword scoring to 'love' in the title, and show the title, lyrics, duration, explicitness, and the album's title and release year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Song(\n      bm25: {\n        query: \"love\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      lyrics\n      duration\n      isExplicit\n      inAlbum {\n        ... on Album {\n          title\n          releaseYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 songs with BM25 keyword scoring to 'love' in the title, and show the title, lyrics, duration, explicitness, and the album's title and release year.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 plants with BM25 keyword scoring to 'rose' in the species, and show the species, care instructions, height, flowering status, and the name of the gardener who planted them.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      bm25: {\n        query: \"rose\",\n        properties: [\"species\"]\n      },\n      limit: 3\n    ) {\n      species\n      careInstructions\n      height\n      isFlowering\n      plantedBy {\n        ... on Gardener {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 plants with BM25 keyword scoring to 'rose' in the species, and show the species, care instructions, height, flowering status, and the name of the gardener who planted them.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 recipes with BM25 keyword scoring to 'pasta' in the title, and show the title, instructions, preparation time, vegetarian status, and the names and calories of the ingredients used.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Recipe(\n      bm25: {\n        query: \"pasta\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      instructions\n      prepTime\n      isVegetarian\n      usesIngredient {\n        ... on Ingredient {\n          name\n          calories\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 recipes with BM25 keyword scoring to 'pasta' in the title, and show the title, instructions, preparation time, vegetarian status, and the names and calories of the ingredients used.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 destinations with BM25 keyword scoring to 'beach' in the name, and show the name, description, average temperature, popularity, and the names of the travelers who have visited.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Destination(\n      bm25: {\n        query: \"beach\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      averageTemperature\n      isPopular\n      visitedBy {\n        ... on Traveler {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 destinations with BM25 keyword scoring to 'beach' in the name, and show the name, description, average temperature, popularity, and the names of the travelers who have visited.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 aquariums with BM25 keyword scoring to 'coral reef' in the name, and show the name, location, water volume, presence of marine fish, caretaker's name, and years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Aquarium(\n      bm25: {\n        query: \"coral reef\",\n        properties: [\"name\"]\n      },\n      limit: 3\n    ) {\n      name\n      location\n      waterVolume\n      hasMarineFish\n      caretaker {\n        ... on Aquarist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 aquariums with BM25 keyword scoring to 'coral reef' in the name, and show the name, location, water volume, presence of marine fish, caretaker's name, and years of experience.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 yoga poses with BM25 keyword scoring to 'warrior' in the name, and show the name, description, complexity level, whether it is for beginners, and the yoga style's name, origin, and popularity.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    YogaPose(\n      bm25: {\n        query: \"warrior\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      complexityLevel\n      isForBeginners\n      fromYogaStyle {\n        ... on YogaStyle {\n          styleName\n          origin\n          popularity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 yoga poses with BM25 keyword scoring to 'warrior' in the name, and show the name, description, complexity level, whether it is for beginners, and the yoga style's name, origin, and popularity.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 instruments with BM25 keyword scoring to 'guitar' in the name, and show the name, description, year introduced, whether it is a string instrument, and the musician's name, genre, and years active.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Instrument(\n      bm25: {\n        query: \"guitar\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      yearIntroduced\n      isString\n      playedBy {\n        ... on Musician {\n          name\n          genre\n          yearsActive\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 instruments with BM25 keyword scoring to 'guitar' in the name, and show the name, description, year introduced, whether it is a string instrument, and the musician's name, genre, and years active.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 board games with BM25 keyword scoring to 'strategy' in the name, and show the name, rules, minimum number of players, whether it is cooperative, and the name, biography, and years active of the game designer.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BoardGame(\n      bm25: {\n        query: \"strategy\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      rules\n      minPlayers\n      isCooperative\n      createdBy {\n        ... on GameDesigner {\n          name\n          biography\n          yearsActive\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 board games with BM25 keyword scoring to 'strategy' in the name, and show the name, rules, minimum number of players, whether it is cooperative, and the name, biography, and years active of the game designer.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 weather stations with BM25 keyword scoring to 'temperature' in the location, and show the location, equipment, altitude, activity status, and the name and years of experience of the meteorologist managing them.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeatherStation(\n      bm25: {\n        query: \"temperature\",\n        properties: [\"location\"]\n      },\n      limit: 3\n    ) {\n      location\n      equipment\n      altitude\n      isActive\n      managedBy {\n        ... on Meteorologist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 weather stations with BM25 keyword scoring to 'temperature' in the location, and show the location, equipment, altitude, activity status, and the name and years of experience of the meteorologist managing them.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 movies with BM25 keyword scoring to 'action' in the title, and show the title, genre, duration, availability, and lead actor's name and awards won.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Movie(\n      bm25: {\n        query: \"action\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      genre\n      duration\n      isAvailable\n      leadActor {\n        ... on Actor {\n          name\n          awardsWon\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 movies with BM25 keyword scoring to 'action' in the title, and show the title, genre, duration, availability, and lead actor's name and awards won.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 AI models with BM25 keyword scoring to 'classification' in the modelName, and show the modelName, application, accuracy, isSupervised, and basedOn algorithm's name, description, and yearDeveloped.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    AIModel(\n      bm25: {\n        query: \"classification\",\n        properties: [\"modelName\"]\n      },\n      limit: 10\n    ) {\n      modelName\n      application\n      accuracy\n      isSupervised\n      basedOn {\n        ... on Algorithm {\n          name\n          description\n          yearDeveloped\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 AI models with BM25 keyword scoring to 'classification' in the modelName, and show the modelName, application, accuracy, isSupervised, and basedOn algorithm's name, description, and yearDeveloped.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 cars with BM25 keyword scoring to 'SUV' in the make or model, and show the make, model, year, availability, and the name and age of the customer who rented it.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      bm25: {\n        query: \"SUV\",\n        properties: [\"make\", \"model\"]\n      },\n      limit: 5\n    ) {\n      make\n      model\n      year\n      isAvailable\n      rentedBy {\n        ... on Customer {\n          name\n          age\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 cars with BM25 keyword scoring to 'SUV' in the make or model, and show the make, model, year, availability, and the name and age of the customer who rented it.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 legal cases with BM25 keyword scoring to 'criminal' in the case title, and show the case title, case summary, year, ongoing status, and involved party's name, role, and number of cases.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase(\n      bm25: {\n        query: \"criminal\",\n        properties: [\"caseTitle\"]\n      },\n      limit: 5\n    ) {\n      caseTitle\n      caseSummary\n      year\n      isOngoing\n      involvedParty {\n        ... on Party {\n          name\n          role\n          numberOfCases\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 legal cases with BM25 keyword scoring to 'criminal' in the case title, and show the case title, case summary, year, ongoing status, and involved party's name, role, and number of cases.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 smart devices with BM25 keyword scoring to 'smart speaker' in the device name, and show the device name, features, price, wireless capability, and manufacturer's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SmartDevice(\n      bm25: {\n        query: \"smart speaker\",\n        properties: [\"deviceName\"]\n      },\n      limit: 5\n    ) {\n      deviceName\n      features\n      price\n      isWireless\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 smart devices with BM25 keyword scoring to 'smart speaker' in the device name, and show the device name, features, price, wireless capability, and manufacturer's name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 outdoor gears with BM25 keyword scoring to 'backpack' in the gear name, and show the gear name, description, weight, waterproof status, and supplier's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OutdoorGear(\n      bm25: {\n        query: \"backpack\",\n        properties: [\"gearName\"]\n      },\n      limit: 5\n    ) {\n      gearName\n      description\n      weight\n      isWaterproof\n      supplier {\n        ... on Supplier {\n          supplierName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 outdoor gears with BM25 keyword scoring to 'backpack' in the gear name, and show the gear name, description, weight, waterproof status, and supplier's name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 restaurants with BM25 keyword scoring to 'Italian' in the name, and show the name, cuisine, seating capacity, Michelin star status, and the head chef's name, specialty, and years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Restaurant(\n      bm25: {\n        query: \"Italian\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      cuisine\n      seatingCapacity\n      hasMichelinStar\n      headChef {\n        ... on Chef {\n          name\n          specialty\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 restaurants with BM25 keyword scoring to 'Italian' in the name, and show the name, cuisine, seating capacity, Michelin star status, and the head chef's name, specialty, and years of experience.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 posts with BM25 keyword scoring to 'technology' in the content, and show the content, hashtags, number of likes, whether it is public, and the comments' text and number of likes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Post(\n      bm25: {\n        query: \"technology\",\n        properties: [\"content\"]\n      },\n      limit: 10\n    ) {\n      content\n      hashtags\n      likes\n      isPublic\n      comments {\n        ... on Comment {\n          text\n          likes\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 posts with BM25 keyword scoring to 'technology' in the content, and show the content, hashtags, number of likes, whether it is public, and the comments' text and number of likes.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 animals with BM25 keyword scoring to 'cat' in the name, and show the name, species, age, adoption status, and the name of the adopter.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Animal(\n      bm25: {\n        query: \"cat\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      species\n      age\n      isAdopted\n      adoptedBy {\n        ... on Adopter {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 animals with BM25 keyword scoring to 'cat' in the name, and show the name, species, age, adoption status, and the name of the adopter.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 fashion brands with BM25 keyword scoring to 'luxury' in the name, and show the name, description, founding year, luxury status, and designer's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FashionBrand(\n      bm25: {\n        query: \"luxury\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      foundingYear\n      isLuxury\n      designedBy {\n        ... on Designer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 fashion brands with BM25 keyword scoring to 'luxury' in the name, and show the name, description, founding year, luxury status, and designer's name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 code repositories with BM25 keyword scoring to 'machine learning' in the description, and show the repository name, description, number of stars, whether it is a fork, and the username, real name, and contributions of the maintainers.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CodeRepository(\n      bm25: {\n        query: \"machine learning\",\n        properties: [\"description\"]\n      },\n      limit: 10\n    ) {\n      repositoryName\n      description\n      stars\n      isFork\n      maintainedBy {\n        ... on Developer {\n          username\n          realName\n          contributions\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 code repositories with BM25 keyword scoring to 'machine learning' in the description, and show the repository name, description, number of stars, whether it is a fork, and the username, real name, and contributions of the maintainers.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 wines with BM25 keyword scoring to 'chardonnay' in the name, and show the name, origin, grape variety, tasting notes, vintage year, whether it is red, and the related winery's name, location, and founded year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine(\n      bm25: {\n        query: \"chardonnay\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      origin\n      grapeVariety\n      tastingNotes\n      vintageYear\n      isRed\n      relatedWinery {\n        ... on Winery {\n          name\n          location\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 wines with BM25 keyword scoring to 'chardonnay' in the name, and show the name, origin, grape variety, tasting notes, vintage year, whether it is red, and the related winery's name, location, and founded year.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 patients with BM25 keyword scoring to 'cancer' in the diagnosis, and show their name, diagnosis, age, insurance status, and primary doctor's name and experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Patient(\n      bm25: {\n        query: \"cancer\",\n        properties: [\"diagnosis\"]\n      },\n      limit: 10\n    ) {\n      name\n      diagnosis\n      age\n      isInsured\n      primaryDoctor {\n        ... on Doctor {\n          name\n          experience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 patients with BM25 keyword scoring to 'cancer' in the diagnosis, and show their name, diagnosis, age, insurance status, and primary doctor's name and experience.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 telescopes with BM25 keyword scoring to 'astronomy' in the model, and show the model, manufacturer, magnification, usage status, and the name and years of experience of the astronomers operating them.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Telescope(\n      bm25: {\n        query: \"astronomy\",\n        properties: [\"model\"]\n      },\n      limit: 5\n    ) {\n      model\n      manufacturer\n      magnification\n      isInUse\n      operatedBy {\n        ... on Astronomer {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 telescopes with BM25 keyword scoring to 'astronomy' in the model, and show the model, manufacturer, magnification, usage status, and the name and years of experience of the astronomers operating them.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 products related to electronics with BM25 keyword scoring to 'electronics' in the name or description. Show the name, description, price, availability, and customer reviews with their content and rating.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      bm25: {\n        query: \"electronics\",\n        properties: [\"name\", \"description\"]\n      },\n      limit: 10\n    ) {\n      name\n      description\n      price\n      inStock\n      hasReview {\n        ... on Review {\n          content\n          rating\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 products related to electronics with BM25 keyword scoring to 'electronics' in the name or description. Show the name, description, price, availability, and customer reviews with their content and rating.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 startups with BM25 keyword scoring to 'technology' in the name, and show the name, product, funding, bootstrapping status, and founder's name, biography, and successful startups.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Startup(\n      bm25: {\n        query: \"technology\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      product\n      funding\n      isBootstrapped\n      founders {\n        ... on Entrepreneur {\n          name\n          biography\n          successfulStartups\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 startups with BM25 keyword scoring to 'technology' in the name, and show the name, product, funding, bootstrapping status, and founder's name, biography, and successful startups.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 events with BM25 keyword scoring to 'music' in the title, and show the title, description, start time, virtual status, and venue's name and capacity.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Event(\n      bm25: {\n        query: \"music\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      description\n      startTime\n      isVirtual\n      atVenue {\n        ... on Venue {\n          name\n          capacity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 events with BM25 keyword scoring to 'music' in the title, and show the title, description, start time, virtual status, and venue's name and capacity.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 news outlets with BM25 keyword scoring to 'breaking news' in the name, and show the name, founding year, online status, and journalist's name and years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NewsOutlet(\n      bm25: {\n        query: \"breaking news\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      foundingYear\n      isOnline\n      hasJournalist {\n        ... on Journalist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 news outlets with BM25 keyword scoring to 'breaking news' in the name, and show the name, founding year, online status, and journalist's name and years of experience.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 games with BM25 keyword scoring to 'action' in the title, and show the title, genre, rating, multiplayer availability, and developer's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Game(\n      bm25: {\n        query: \"action\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      genre\n      rating\n      isMultiplayer\n      developedBy {\n        ... on Developer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 games with BM25 keyword scoring to 'action' in the title, and show the title, genre, rating, multiplayer availability, and developer's name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 artworks with BM25 keyword scoring to 'abstract' in the title, and show the title, medium, year created, availability, and artist's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Artwork(\n      bm25: {\n        query: \"abstract\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      medium\n      yearCreated\n      isSold\n      createdBy {\n        ... on Artist {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 artworks with BM25 keyword scoring to 'abstract' in the title, and show the title, medium, year created, availability, and artist's name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 cars with BM25 keyword scoring to 'repair' in the make, and show the make, model, year, repair status, and owner's name and number of owned cars.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      bm25: {\n        query: \"repair\",\n        properties: [\"make\"]\n      },\n      limit: 5\n    ) {\n      make\n      model\n      year\n      isRepaired\n      ownedBy {\n        ... on Owner {\n          name\n          ownedCars\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 cars with BM25 keyword scoring to 'repair' in the make, and show the make, model, year, repair status, and owner's name and number of owned cars.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 contacts with BM25 keyword scoring to 'John' in the full name, and show the full name, email, phone, lead status, and associated company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Contact(\n      bm25: {\n        query: \"John\",\n        properties: [\"fullName\"]\n      },\n      limit: 5\n    ) {\n      fullName\n      email\n      phone\n      isLead\n      associatedCompany {\n        ... on Company {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 contacts with BM25 keyword scoring to 'John' in the full name, and show the full name, email, phone, lead status, and associated company name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 airlines with BM25 keyword scoring to 'United' in the name, and show the name, hub airport, fleet size, international status, and flight number with duration.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Airline(\n      bm25: {\n        query: \"United\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      hubAirport\n      fleetSize\n      isInternational\n      operatesFlight {\n        ... on Flight {\n          flightNumber\n          duration\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 airlines with BM25 keyword scoring to 'United' in the name, and show the name, hub airport, fleet size, international status, and flight number with duration.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 books with BM25 keyword scoring to 'science fiction' in the title, and show the title, summary, availability, and author's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Book(\n      bm25: {\n        query: \"science fiction\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      summary\n      isAvailable\n      author {\n        ... on Author {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 books with BM25 keyword scoring to 'science fiction' in the title, and show the title, summary, availability, and author's name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 cryptocurrencies with BM25 keyword scoring to 'Bitcoin' in the name, and show the name, symbol, market cap, stability, and exchange details including name, country, and founded year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Cryptocurrency(\n      bm25: {\n        query: \"Bitcoin\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      symbol\n      marketCap\n      isStableCoin\n      onExchange {\n        ... on Exchange {\n          name\n          country\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 cryptocurrencies with BM25 keyword scoring to 'Bitcoin' in the name, and show the name, symbol, market cap, stability, and exchange details including name, country, and founded year.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 employees who are software engineers based on their job title. Show their name, job title, salary, remote work availability, and the projects they are currently working on including the project name and budget.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Employee(\n      bm25: {\n        query: \"software engineer\",\n        properties: [\"jobTitle\"]\n      },\n      limit: 5\n    ) {\n      name\n      jobTitle\n      salary\n      isRemote\n      worksOn {\n        ... on Project {\n          name\n          budget\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 employees who are software engineers based on their job title. Show their name, job title, salary, remote work availability, and the projects they are currently working on including the project name and budget.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 products with BM25 keyword scoring to 'organic' in the name, and show the name, description, price, organic status, and category name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      bm25: {\n        query: \"organic\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      price\n      isOrganic\n      category {\n        ... on Category {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 products with BM25 keyword scoring to 'organic' in the name, and show the name, description, price, organic status, and category name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 museums with BM25 keyword scoring to 'art' in the name, and show the name, location, founding year, and information about their exhibits including the title, description, and year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Museum(\n      bm25: {\n        query: \"art\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      location\n      foundingYear\n      isPublic\n      hasExhibit {\n        ... on Exhibit {\n          title\n          description\n          year\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 museums with BM25 keyword scoring to 'art' in the name, and show the name, location, founding year, and information about their exhibits including the title, description, and year.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 teams with BM25 keyword scoring to 'football' in the name, and show the name, city, number of wins, champion status, and the name of the league they belong to.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team(\n      bm25: {\n        query: \"football\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      city\n      wins\n      isChampion\n      inLeague {\n        ... on League {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 teams with BM25 keyword scoring to 'football' in the name, and show the name, city, number of wins, champion status, and the name of the league they belong to.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 coffee shops with BM25 keyword scoring to 'latte' in the menu, and show the name, menu, year founded, franchise status, and the neighborhood's name, description, and average rent.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CoffeeShop(\n      bm25: {\n        query: \"latte\",\n        properties: [\"menu\"]\n      },\n      limit: 5\n    ) {\n      name\n      menu\n      yearFounded\n      isFranchise\n      locatedIn {\n        ... on Neighborhood {\n          name\n          description\n          averageRent\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 coffee shops with BM25 keyword scoring to 'latte' in the menu, and show the name, menu, year founded, franchise status, and the neighborhood's name, description, and average rent.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 houses with BM25 keyword scoring to '3 bedrooms' in the description, and show the address, description, price, availability, and the name and experience of the agent who listed them.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    House(\n      bm25: {\n        query: \"3 bedrooms\",\n        properties: [\"description\"]\n      },\n      limit: 5\n    ) {\n      address\n      description\n      price\n      isSold\n      listedBy {\n        ... on Agent {\n          name\n          experience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 houses with BM25 keyword scoring to '3 bedrooms' in the description, and show the address, description, price, availability, and the name and experience of the agent who listed them.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 diet plans with BM25 keyword scoring to 'weight loss' in the name, and show the name, description, duration in days, vegetarian status, and the food items it contains with their respective names and calorie counts.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DietPlan(\n      bm25: {\n        query: \"weight loss\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      durationDays\n      isVegetarian\n      contains {\n        ... on FoodItem {\n          itemName\n          calories\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 diet plans with BM25 keyword scoring to 'weight loss' in the name, and show the name, description, duration in days, vegetarian status, and the food items it contains with their respective names and calorie counts.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 craft beers with BM25 keyword scoring to 'IPA' in the beer name, and show the beer name, tasting notes, alcohol content, seasonal availability, brewery name, and founded year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CraftBeer(\n      bm25: {\n        query: \"IPA\",\n        properties: [\"beerName\"]\n      },\n      limit: 5\n    ) {\n      beerName\n      tastingNotes\n      alcoholContent\n      isSeasonal\n      brewery {\n        ... on Brewery {\n          breweryName\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 craft beers with BM25 keyword scoring to 'IPA' in the beer name, and show the beer name, tasting notes, alcohol content, seasonal availability, brewery name, and founded year.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 spas with BM25 keyword scoring to 'massage' in the services, and show the name, services, average rating, availability, and location details including name, description, and latitude.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Spa(\n      bm25: {\n        query: \"massage\",\n        properties: [\"services\"]\n      },\n      limit: 3\n    ) {\n      name\n      services\n      averageRating\n      isOpen\n      locatedIn {\n        ... on Location {\n          name\n          description\n          latitude\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 spas with BM25 keyword scoring to 'massage' in the services, and show the name, services, average rating, availability, and location details including name, description, and latitude.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 courses with BM25 keyword scoring to 'programming' in the title, and show the title, description, price, availability, and instructor's name and years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Course(\n      bm25: {\n        query: \"programming\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      description\n      price\n      isFree\n      taughtBy {\n        ... on Instructor {\n          name\n          yearsOfExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 courses with BM25 keyword scoring to 'programming' in the title, and show the title, description, price, availability, and instructor's name and years of experience.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 papers with BM25 keyword scoring to 'machine learning' in the title, and show the title, abstract, year published, whether it is peer-reviewed, and the name and year of the conference it was presented at.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Paper(\n      bm25: {\n        query: \"machine learning\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      abstract\n      yearPublished\n      isPeerReviewed\n      presentedAt {\n        ... on Conference {\n          name\n          year\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 papers with BM25 keyword scoring to 'machine learning' in the title, and show the title, abstract, year published, whether it is peer-reviewed, and the name and year of the conference it was presented at.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 job listings with BM25 keyword scoring to 'software engineer' in the title, and show the title, description, salary, remote availability, and the name of the company that posted the job.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JobListing(\n      bm25: {\n        query: \"software engineer\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      description\n      salary\n      isRemote\n      postedBy {\n        ... on Company {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 job listings with BM25 keyword scoring to 'software engineer' in the title, and show the title, description, salary, remote availability, and the name of the company that posted the job.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 programming languages with BM25 keyword scoring to 'Python' in the name, and show the name, description, year released, whether it is compiled, and the software projects it is used in including the project name, repository URL, and lines of code.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ProgrammingLanguage(\n      bm25: {\n        query: \"Python\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      description\n      yearReleased\n      isCompiled\n      usedIn {\n        ... on SoftwareProject {\n          projectName\n          repositoryURL\n          linesOfCode\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 programming languages with BM25 keyword scoring to 'Python' in the name, and show the name, description, year released, whether it is compiled, and the software projects it is used in including the project name, repository URL, and lines of code.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the event name, description, year, significant impact, and linked country's name and population of historical events that occurred after 1900.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HistoricalEvent(\n      where: {\n        path: [\"year\"],\n        operator: GreaterThan,\n        valueInt: 1900\n      }\n    ) {\n      eventName\n      description\n      year\n      hadSignificantImpact\n      involvedCountries {\n        ... on Country {\n          countryName\n          population\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the event name, description, year, significant impact, and linked country's name and population of historical events that occurred after 1900.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title, synopsis, on-air status, and linked actor's name of TV series with more than 5 seasons.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TVSeries(\n      where: {\n        path: [\"seasons\"],\n        operator: GreaterThan,\n        valueInt: 5\n      }\n    ) {\n      title\n      synopsis\n      isOnAir\n      hasActor {\n        ... on Actor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title, synopsis, on-air status, and linked actor's name of TV series with more than 5 seasons.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, description, group status, and linked equipment name of workouts with a duration greater than 30 minutes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Workout(\n      where: {\n        path: [\"duration\"],\n        operator: GreaterThan,\n        valueInt: 30\n      }\n    ) {\n      name\n      description\n      isGroup\n      usesEquipment {\n        ... on Equipment {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, description, group status, and linked equipment name of workouts with a duration greater than 30 minutes.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title, lyrics, explicitness, and linked album's title and release year of songs with a duration greater than 180 seconds.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Song(\n      where: {\n        path: [\"duration\"],\n        operator: GreaterThan,\n        valueInt: 180\n      }\n    ) {\n      title\n      lyrics\n      isExplicit\n      inAlbum {\n        ... on Album {\n          title\n          releaseYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title, lyrics, explicitness, and linked album's title and release year of songs with a duration greater than 180 seconds.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the species, care instructions, flowering status, and linked gardener's name of plants with a height greater than 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      where: {\n        path: [\"height\"],\n        operator: GreaterThan,\n        valueNumber: 50\n      }\n    ) {\n      species\n      careInstructions\n      isFlowering\n      plantedBy {\n        ... on Gardener {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the species, care instructions, flowering status, and linked gardener's name of plants with a height greater than 50.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title, instructions, vegetarian status, and linked ingredient's name of recipes with a prep time greater than 30 minutes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Recipe(\n      where: {\n        path: [\"prepTime\"],\n        operator: GreaterThan,\n        valueInt: 30\n      }\n    ) {\n      title\n      instructions\n      isVegetarian\n      usesIngredient {\n        ... on Ingredient {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title, instructions, vegetarian status, and linked ingredient's name of recipes with a prep time greater than 30 minutes.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, description, popularity, and linked traveler's name of destinations with an average temperature greater than 25.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Destination(\n      where: {\n        path: [\"averageTemperature\"],\n        operator: GreaterThan,\n        valueNumber: 25\n      }\n    ) {\n      name\n      description\n      isPopular\n      visitedBy {\n        ... on Traveler {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, description, popularity, and linked traveler's name of destinations with an average temperature greater than 25.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, location, availability of marine fish, and linked caretaker's name and years of experience of aquariums with a water volume greater than 1000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Aquarium(\n      where: {\n        path: [\"waterVolume\"],\n        operator: GreaterThan,\n        valueNumber: 1000\n      }\n    ) {\n      name\n      location\n      hasMarineFish\n      caretaker {\n        ... on Aquarist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, location, availability of marine fish, and linked caretaker's name and years of experience of aquariums with a water volume greater than 1000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, description, whether it is for beginners, and linked yoga style's name of yoga poses with a complexity level greater than 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    YogaPose(\n      where: {\n        path: [\"complexityLevel\"],\n        operator: GreaterThan,\n        valueInt: 5\n      }\n    ) {\n      name\n      description\n      isForBeginners\n      fromYogaStyle {\n        ... on YogaStyle {\n          styleName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, description, whether it is for beginners, and linked yoga style's name of yoga poses with a complexity level greater than 5.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, description, whether it is a string instrument, and the names and genres of musicians who play instruments introduced after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Instrument(\n      where: {\n        path: [\"yearIntroduced\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      name\n      description\n      isString\n      playedBy {\n        ... on Musician {\n          name\n          genre\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, description, whether it is a string instrument, and the names and genres of musicians who play instruments introduced after the year 2000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, rules, cooperative status, and linked game designer's name of board games with more than 2 minimum players.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BoardGame(\n      where: {\n        path: [\"minPlayers\"],\n        operator: GreaterThan,\n        valueInt: 2\n      }\n    ) {\n      name\n      rules\n      isCooperative\n      createdBy {\n        ... on GameDesigner {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, rules, cooperative status, and linked game designer's name of board games with more than 2 minimum players.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the location, equipment, activity status, and linked meteorologist's name and years of experience of weather stations with an altitude greater than 1000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeatherStation(\n      where: {\n        path: [\"altitude\"],\n        operator: GreaterThan,\n        valueNumber: 1000\n      }\n    ) {\n      location\n      equipment\n      isActive\n      managedBy {\n        ... on Meteorologist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the location, equipment, activity status, and linked meteorologist's name and years of experience of weather stations with an altitude greater than 1000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title, genre, availability, and lead actor's name of movies with a duration greater than 120 minutes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Movie(\n      where: {\n        path: [\"duration\"],\n        operator: GreaterThan,\n        valueInt: 120\n      }\n    ) {\n      title\n      genre\n      isAvailable\n      leadActor {\n        ... on Actor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title, genre, availability, and lead actor's name of movies with a duration greater than 120 minutes.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the model name, application, supervised status, and linked algorithm's name and description of AI models with an accuracy greater than 0.8.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    AIModel(\n      where: {\n        path: [\"accuracy\"],\n        operator: GreaterThan,\n        valueNumber: 0.8\n      }\n    ) {\n      modelName\n      application\n      isSupervised\n      basedOn {\n        ... on Algorithm {\n          name\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the model name, application, supervised status, and linked algorithm's name and description of AI models with an accuracy greater than 0.8.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the make, model, availability, and linked customer's name of cars with a year greater than 2015.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      where: {\n        path: [\"year\"],\n        operator: GreaterThan,\n        valueInt: 2015\n      }\n    ) {\n      make\n      model\n      isAvailable\n      rentedBy {\n        ... on Customer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the make, model, availability, and linked customer's name of cars with a year greater than 2015.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the case title, case summary, ongoing status, and names and roles of involved parties for legal cases that occurred after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase(\n      where: {\n        path: [\"year\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      caseTitle\n      caseSummary\n      isOngoing\n      involvedParty {\n        ... on Party {\n          name\n          role\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the case title, case summary, ongoing status, and names and roles of involved parties for legal cases that occurred after the year 2000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the device name, features, wireless capability, and linked manufacturer's name of smart devices with a price less than 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SmartDevice(\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 100\n      }\n    ) {\n      deviceName\n      features\n      isWireless\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the device name, features, wireless capability, and linked manufacturer's name of smart devices with a price less than 100.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the gear name, description, waterproof status, and linked supplier's name of outdoor gear with a weight greater than 500.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OutdoorGear(\n      where: {\n        path: [\"weight\"],\n        operator: GreaterThan,\n        valueNumber: 500\n      }\n    ) {\n      gearName\n      description\n      isWaterproof\n      supplier {\n        ... on Supplier {\n          supplierName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the gear name, description, waterproof status, and linked supplier's name of outdoor gear with a weight greater than 500.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, cuisine, Michelin star status, and linked head chef's name and specialty of restaurants with a seating capacity greater than 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Restaurant(\n      where: {\n        path: [\"seatingCapacity\"],\n        operator: GreaterThan,\n        valueInt: 50\n      }\n    ) {\n      name\n      cuisine\n      hasMichelinStar\n      headChef {\n        ... on Chef {\n          name\n          specialty\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, cuisine, Michelin star status, and linked head chef's name and specialty of restaurants with a seating capacity greater than 50.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the content, hashtags, public status, and text of comments for posts with more than 100 likes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Post(\n      where: {\n        path: [\"likes\"],\n        operator: GreaterThan,\n        valueInt: 100\n      }\n    ) {\n      content\n      hashtags\n      isPublic\n      comments {\n        ... on Comment {\n          text\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the content, hashtags, public status, and text of comments for posts with more than 100 likes.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, species, adoption status, and linked adopter's name of animals older than 5 years.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Animal(\n      where: {\n        path: [\"age\"],\n        operator: GreaterThan,\n        valueInt: 5\n      }\n    ) {\n      name\n      species\n      isAdopted\n      adoptedBy {\n        ... on Adopter {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, species, adoption status, and linked adopter's name of animals older than 5 years.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, description, luxury status, and linked designer's name, biography, and years active of fashion brands founded after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FashionBrand(\n      where: {\n        path: [\"foundingYear\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      name\n      description\n      isLuxury\n      designedBy {\n        ... on Designer {\n          name\n          biography\n          yearsActive\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, description, luxury status, and linked designer's name, biography, and years active of fashion brands founded after the year 2000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the repository name, description, fork status, and details of developers who have contributed to code repositories with more than 1000 stars.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CodeRepository(\n      where: {\n        path: [\"stars\"],\n        operator: GreaterThan,\n        valueInt: 1000\n      }\n    ) {\n      repositoryName\n      description\n      isFork\n      maintainedBy {\n        ... on Developer {\n          username\n          realName\n          contributions\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the repository name, description, fork status, and details of developers who have contributed to code repositories with more than 1000 stars.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, origin, grape variety, tasting notes, whether it is red, and the related winery's name, location, and founded year of wines with a vintage year greater than 2010.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine(\n      where: {\n        path: [\"vintageYear\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ) {\n      name\n      origin\n      grapeVariety\n      tastingNotes\n      isRed\n      relatedWinery {\n        ... on Winery {\n          name\n          location\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, origin, grape variety, tasting notes, whether it is red, and the related winery's name, location, and founded year of wines with a vintage year greater than 2010.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, diagnosis, insurance status, and linked primary doctor's name and experience of patients over the age of 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Patient(\n      where: {\n        path: [\"age\"],\n        operator: GreaterThan,\n        valueInt: 50\n      }\n    ) {\n      name\n      diagnosis\n      isInsured\n      primaryDoctor {\n        ... on Doctor {\n          name\n          experience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, diagnosis, insurance status, and linked primary doctor's name and experience of patients over the age of 50.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the model, manufacturer, usage status, and linked astronomer's name of telescopes with a magnification greater than 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Telescope(\n      where: {\n        path: [\"magnification\"],\n        operator: GreaterThan,\n        valueNumber: 100\n      }\n    ) {\n      model\n      manufacturer\n      isInUse\n      operatedBy {\n        ... on Astronomer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the model, manufacturer, usage status, and linked astronomer's name of telescopes with a magnification greater than 100.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, description, in-stock status, and content with rating of products with a price less than 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 50\n      }\n    ) {\n      name\n      description\n      inStock\n      hasReview {\n        ... on Review {\n          content\n          rating\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, description, in-stock status, and content with rating of products with a price less than 50.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, product, bootstrapped status, and linked founder's name, biography, and successful startups of startups with funding greater than 1,000,000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Startup(\n      where: {\n        path: [\"funding\"],\n        operator: GreaterThan,\n        valueNumber: 1000000\n      }\n    ) {\n      name\n      product\n      isBootstrapped\n      founders {\n        ... on Entrepreneur {\n          name\n          biography\n          successfulStartups\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, product, bootstrapped status, and linked founder's name, biography, and successful startups of startups with funding greater than 1,000,000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, online status, and linked journalist's name and years of experience of news outlets founded after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NewsOutlet(\n      where: {\n        path: [\"foundingYear\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      name\n      isOnline\n      hasJournalist {\n        ... on Journalist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, online status, and linked journalist's name and years of experience of news outlets founded after the year 2000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title, genre, multiplayer status, and linked developer's name of games with a rating greater than 8.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Game(\n      where: {\n        path: [\"rating\"],\n        operator: GreaterThan,\n        valueInt: 8\n      }\n    ) {\n      title\n      genre\n      isMultiplayer\n      developedBy {\n        ... on Developer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title, genre, multiplayer status, and linked developer's name of games with a rating greater than 8.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title, medium, availability, and linked artist's name of artwork created after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Artwork(\n      where: {\n        path: [\"yearCreated\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      title\n      medium\n      isSold\n      createdBy {\n        ... on Artist {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title, medium, availability, and linked artist's name of artwork created after the year 2000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the make, model, repair status, and linked owner's name and owned cars of cars with a year greater than 2010.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      where: {\n        path: [\"year\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ) {\n      make\n      model\n      isRepaired\n      ownedBy {\n        ... on Owner {\n          name\n          ownedCars\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the make, model, repair status, and linked owner's name and owned cars of cars with a year greater than 2010.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the full name, email, phone number, and associated company's name, industry, and revenue of contacts who are leads.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Contact(\n      where: {\n        path: [\"isLead\"],\n        operator: Equal,\n        valueBoolean: true\n      }\n    ) {\n      fullName\n      email\n      phone\n      associatedCompany {\n        ... on Company {\n          name\n          industry\n          revenue\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the full name, email, phone number, and associated company's name, industry, and revenue of contacts who are leads.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, hub airport, international status, and flight number with duration of airlines with more than 100 fleet size.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Airline(\n      where: {\n        path: [\"fleetSize\"],\n        operator: GreaterThan,\n        valueInt: 100\n      }\n    ) {\n      name\n      hubAirport\n      isInternational\n      operatesFlight {\n        ... on Flight {\n          flightNumber\n          duration\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, hub airport, international status, and flight number with duration of airlines with more than 100 fleet size.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title, summary, availability, and linked author's name of books with less than 100 pages.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Book(\n      where: {\n        path: [\"pageCount\"],\n        operator: LessThan,\n        valueInt: 100\n      }\n    ) {\n      title\n      summary\n      isAvailable\n      author {\n        ... on Author {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title, summary, availability, and linked author's name of books with less than 100 pages.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, symbol, market cap, stability, and linked exchange's name, country, and founded year of cryptocurrencies with a market cap greater than 1 billion.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Cryptocurrency(\n      where: {\n        path: [\"marketCap\"],\n        operator: GreaterThan,\n        valueNumber: 1000000000\n      }\n    ) {\n      name\n      symbol\n      marketCap\n      isStableCoin\n      onExchange {\n        ... on Exchange {\n          name\n          country\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, symbol, market cap, stability, and linked exchange's name, country, and founded year of cryptocurrencies with a market cap greater than 1 billion.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, job title, remote status, and linked project's name and budget of employees with a salary greater than $50,000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Employee(\n      where: {\n        path: [\"salary\"],\n        operator: GreaterThan,\n        valueNumber: 50000\n      }\n    ) {\n      name\n      jobTitle\n      isRemote\n      worksOn {\n        ... on Project {\n          name\n          budget\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, job title, remote status, and linked project's name and budget of employees with a salary greater than $50,000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, description, organic status, and linked category name of products with a price less than $10.99.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 10.99\n      }\n    ) {\n      name\n      description\n      isOrganic\n      category {\n        ... on Category {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, description, organic status, and linked category name of products with a price less than $10.99.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, location, public status, and linked exhibit's title, description, and year of museums founded after 1800.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Museum(\n      where: {\n        path: [\"foundingYear\"],\n        operator: GreaterThan,\n        valueInt: 1800\n      }\n    ) {\n      name\n      location\n      isPublic\n      hasExhibit {\n        ... on Exhibit {\n          title\n          description\n          year\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, location, public status, and linked exhibit's title, description, and year of museums founded after 1800.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, city, champion status, and linked league name of teams with more than 10 wins.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team(\n      where: {\n        path: [\"wins\"],\n        operator: GreaterThan,\n        valueInt: 10\n      }\n    ) {\n      name\n      city\n      isChampion\n      inLeague {\n        ... on League {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, city, champion status, and linked league name of teams with more than 10 wins.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, menu, franchise status, and linked neighborhood's name, description, and average rent of coffee shops founded after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CoffeeShop(\n      where: {\n        path: [\"yearFounded\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      name\n      menu\n      isFranchise\n      locatedIn {\n        ... on Neighborhood {\n          name\n          description\n          averageRent\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, menu, franchise status, and linked neighborhood's name, description, and average rent of coffee shops founded after the year 2000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the address, description, sold status, and linked agent's name of houses with a price greater than $500,000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    House(\n      where: {\n        path: [\"price\"],\n        operator: GreaterThan,\n        valueNumber: 500000\n      }\n    ) {\n      address\n      description\n      isSold\n      listedBy {\n        ... on Agent {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the address, description, sold status, and linked agent's name of houses with a price greater than $500,000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, description, vegetarian status, and linked food item's name and calories of diet plans with a duration of more than 30 days.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DietPlan(\n      where: {\n        path: [\"durationDays\"],\n        operator: GreaterThan,\n        valueInt: 30\n      }\n    ) {\n      name\n      description\n      isVegetarian\n      contains {\n        ... on FoodItem {\n          itemName\n          calories\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, description, vegetarian status, and linked food item's name and calories of diet plans with a duration of more than 30 days.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the beer name, tasting notes, seasonal availability, and linked brewery's name of craft beers with an alcohol content greater than 5.0.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CraftBeer(\n      where: {\n        path: [\"alcoholContent\"],\n        operator: GreaterThan,\n        valueNumber: 5.0\n      }\n    ) {\n      beerName\n      tastingNotes\n      isSeasonal\n      brewery {\n        ... on Brewery {\n          breweryName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the beer name, tasting notes, seasonal availability, and linked brewery's name of craft beers with an alcohol content greater than 5.0.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, services, availability, and linked location's name, description, and latitude of spas with an average rating greater than 4.5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Spa(\n      where: {\n        path: [\"averageRating\"],\n        operator: GreaterThan,\n        valueNumber: 4.5\n      }\n    ) {\n      name\n      services\n      isOpen\n      locatedIn {\n        ... on Location {\n          name\n          description\n          latitude\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, services, availability, and linked location's name, description, and latitude of spas with an average rating greater than 4.5.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title, description, availability, and linked instructor's name of courses with a price less than 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Course(\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 100\n      }\n    ) {\n      title\n      description\n      isFree\n      taughtBy {\n        ... on Instructor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title, description, availability, and linked instructor's name of courses with a price less than 100.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title, abstract, peer-reviewed status, and conference name and year of papers published after 2010.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Paper(\n      where: {\n        path: [\"yearPublished\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ) {\n      title\n      abstract\n      isPeerReviewed\n      presentedAt {\n        ... on Conference {\n          name\n          year\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title, abstract, peer-reviewed status, and conference name and year of papers published after 2010.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title, description, remote availability, and linked company's name of job listings with a salary greater than $50,000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JobListing(\n      where: {\n        path: [\"salary\"],\n        operator: GreaterThan,\n        valueNumber: 50000\n      }\n    ) {\n      title\n      description\n      isRemote\n      postedBy {\n        ... on Company {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title, description, remote availability, and linked company's name of job listings with a salary greater than $50,000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, description, compilation status, and linked software project's name, repository URL, and lines of code of programming languages released after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ProgrammingLanguage(\n      where: {\n        path: [\"yearReleased\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      name\n      description\n      isCompiled\n      usedIn {\n        ... on SoftwareProject {\n          projectName\n          repositoryURL\n          linesOfCode\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, description, compilation status, and linked software project's name, repository URL, and lines of code of programming languages released after the year 2000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average number of seasons in TVSeries about \"Sci-Fi\" with a maximum distance of 0.2? Please limit results to the top 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    TVSeries(\n      nearText: {\n        concepts: [\"Sci-Fi\"],\n        distance: 0.2\n      },\n      objectLimit: 100\n    ) {\n      seasons {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average number of seasons in TVSeries about \"Sci-Fi\" with a maximum distance of 0.2? Please limit results to the top 100.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average duration of Workouts about \"HIIT Cardio\" with a maximum distance of 0.3. Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Workout(\n      nearText: {\n        concepts: [\"HIIT Cardio\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      duration {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average duration of Workouts about \"HIIT Cardio\" with a maximum distance of 0.3. Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average duration of Songs that are similar to \"love song\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Song(\n      nearText: {\n        concepts: [\"love song\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      duration {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average duration of Songs that are similar to \"love song\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average height of Plants in a \"Rose Garden\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Plant(\n      nearText: {\n        concepts: [\"Rose Garden\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      height {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average height of Plants in a \"Rose Garden\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average prepTime of Recipes about \"Italian Pasta\" with a maximum distance of 0.3. Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Recipe(\n      nearText: {\n        concepts: [\"Italian Pasta\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      prepTime {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average prepTime of Recipes about \"Italian Pasta\" with a maximum distance of 0.3. Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average mean temperature of Destinations related to \"beach vacation\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Destination(\n      nearText: {\n        concepts: [\"beach vacation\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      averageTemperature {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average mean temperature of Destinations related to \"beach vacation\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average complexityLevel of YogaPoses that are similar to \"Warrior Pose\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    YogaPose(\n      nearText: {\n        concepts: [\"Warrior Pose\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      complexityLevel {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average complexityLevel of YogaPoses that are similar to \"Warrior Pose\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average altitude of Weather Stations near \"New York\" with a maximum distance of 0.5? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    WeatherStation(\n      nearText: {\n        concepts: [\"New York\"],\n        distance: 0.5\n      },\n      objectLimit: 50\n    ) {\n      altitude {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average altitude of Weather Stations near \"New York\" with a maximum distance of 0.5? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average duration of Movies about \"Action Adventure\" with a maximum distance of 0.3. Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Movie(\n      nearText: {\n        concepts: [\"Action Adventure\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      duration {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average duration of Movies about \"Action Adventure\" with a maximum distance of 0.3. Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average accuracy of AIModels related to \"Natural Language Processing\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    AIModel(\n      nearText: {\n        concepts: [\"Natural Language Processing\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      accuracy {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average accuracy of AIModels related to \"Natural Language Processing\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average year of Cars that are similar to \"Luxury Sedan\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Car(\n      nearText: {\n        concepts: [\"Luxury Sedan\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      year {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average year of Cars that are similar to \"Luxury Sedan\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of Smart Devices related to \"smart home device\" with a maximum distance of 0.2? Please limit the results to the top 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    SmartDevice(\n      nearText: {\n        concepts: [\"smart home device\"],\n        distance: 0.2\n      },\n      objectLimit: 100\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of Smart Devices related to \"smart home device\" with a maximum distance of 0.2? Please limit the results to the top 100.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average weight of OutdoorGear items related to \"hiking boots\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    OutdoorGear(\n      nearText: {\n        concepts: [\"hiking boots\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      weight {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average weight of OutdoorGear items related to \"hiking boots\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average seating capacity of Restaurants that serve Italian Cuisine with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Restaurant(\n      nearText: {\n        concepts: [\"Italian Cuisine\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      seatingCapacity {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average seating capacity of Restaurants that serve Italian Cuisine with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the sum of likes for Posts about \"technology\" and \"innovation\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Post(\n      nearText: {\n        concepts: [\"technology\", \"innovation\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      likes {\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the sum of likes for Posts about \"technology\" and \"innovation\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average age of Animals that are similar to \"Cats\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Animal(\n      nearText: {\n        concepts: [\"Cats\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      age {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average age of Animals that are similar to \"Cats\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average founding year of Fashion Brands related to \"luxury fashion\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    FashionBrand(\n      nearText: {\n        concepts: [\"luxury fashion\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      foundingYear {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average founding year of Fashion Brands related to \"luxury fashion\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the sum of stars for CodeRepositories related to \"machine learning\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CodeRepository(\n      nearText: {\n        concepts: [\"machine learning\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      stars {\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the sum of stars for CodeRepositories related to \"machine learning\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average vintageYear of Wine with the concept \"Cabernet Sauvignon\" within a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Wine(\n      nearText: {\n        concepts: [\"Cabernet Sauvignon\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      vintageYear {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average vintageYear of Wine with the concept \"Cabernet Sauvignon\" within a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average age of Patients with a maximum distance of 0.3 who have the concept \"COVID-19\"? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Patient(\n      nearText: {\n        concepts: [\"COVID-19\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      age {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average age of Patients with a maximum distance of 0.3 who have the concept \"COVID-19\"? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average magnification of Telescopes used for astronomical observations? Please limit the results to the top 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Telescope(\n      nearText: {\n        concepts: [\"astronomical observations\"]\n      },\n      objectLimit: 10\n    ) {\n      magnification {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average magnification of Telescopes used for astronomical observations? Please limit the results to the top 10.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of Products that are similar to \"smartphone\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Product(\n      nearText: {\n        concepts: [\"smartphone\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of Products that are similar to \"smartphone\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average foundingYear of NewsOutlet objects related to \"CNN News\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    NewsOutlet(\n      nearText: {\n        concepts: [\"CNN News\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      foundingYear {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average foundingYear of NewsOutlet objects related to \"CNN News\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average rating of Games about \"Action Adventure\" with a maximum distance of 0.3. Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Game(\n      nearText: {\n        concepts: [\"Action Adventure\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      rating {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average rating of Games about \"Action Adventure\" with a maximum distance of 0.3. Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average year of Cars that are similar to \"Toyota Camry\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Car(\n      nearText: {\n        concepts: [\"Toyota Camry\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      year {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average year of Cars that are similar to \"Toyota Camry\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average fleetSize of Airline objects related to \"United Airlines\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Airline(\n      nearText: {\n        concepts: [\"United Airlines\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      fleetSize {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average fleetSize of Airline objects related to \"United Airlines\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average pageCount of Books about \"Artificial Intelligence Science Fiction\" with a maximum distance of 0.2. Please limit results to the top 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Book(\n      nearText: {\n        concepts: [\"Artificial Intelligence Sci-Fi\"],\n        distance: 0.2\n      },\n      objectLimit: 100\n    ) {\n      pageCount {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average pageCount of Books about \"Artificial Intelligence Science Fiction\" with a maximum distance of 0.2. Please limit results to the top 100.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the total market cap of Cryptocurrencies related to \"Bitcoin\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Cryptocurrency(\n      nearText: {\n        concepts: [\"Bitcoin\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      marketCap {\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the total market cap of Cryptocurrencies related to \"Bitcoin\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average salary of Employees with the job title \"Software Engineer\" within a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Employee(\n      nearText: {\n        concepts: [\"Software Engineer\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      salary {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average salary of Employees with the job title \"Software Engineer\" within a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of Products that are related to \"Organic Food\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Product(\n      nearText: {\n        concepts: [\"Organic Food\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of Products that are related to \"Organic Food\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average foundingYear of Museums about \"art history science\" with a maximum distance of 0.2. Please limit results to the top 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Museum(\n      nearText: {\n        concepts: [\"art history science\"],\n        distance: 0.2\n      },\n      objectLimit: 100\n    ) {\n      foundingYear {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average foundingYear of Museums about \"art history science\" with a maximum distance of 0.2. Please limit results to the top 100.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the total number of wins for the Team \"Los Angeles Lakers\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Team(\n      nearText: {\n        concepts: [\"Los Angeles Lakers\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      wins {\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the total number of wins for the Team \"Los Angeles Lakers\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average yearFounded of CoffeeShops that are franchises with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CoffeeShop(\n      nearText: {\n        concepts: [\"coffee shop franchise\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      yearFounded {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average yearFounded of CoffeeShops that are franchises with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of Houses that are similar to \"Luxury Villa\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    House(\n      nearText: {\n        concepts: [\"Luxury Villa\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of Houses that are similar to \"Luxury Villa\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average durationDays of DietPlans about \"weight loss\" with a maximum distance of 0.3? Please limit results to the top 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    DietPlan(\n      nearText: {\n        concepts: [\"weight loss\"],\n        distance: 0.3\n      },\n      objectLimit: 5\n    ) {\n      durationDays {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average durationDays of DietPlans about \"weight loss\" with a maximum distance of 0.3? Please limit results to the top 5.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average alcohol content of Craft Beers that are similar to \"IPA\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CraftBeer(\n      nearText: {\n        concepts: [\"IPA\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      alcoholContent {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average alcohol content of Craft Beers that are similar to \"IPA\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average rating of Spas that are related to \"relaxation\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Spa(\n      nearText: {\n        concepts: [\"relaxation\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      averageRating {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average rating of Spas that are related to \"relaxation\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of Courses about \"Web Development\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Course(\n      nearText: {\n        concepts: [\"Web Development\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of Courses about \"Web Development\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average yearPublished of Papers about \"Artificial Intelligence Science Fiction\" with a maximum distance of 0.2. Please limit results to the top 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Paper(\n      nearText: {\n        concepts: [\"Artificial Intelligence Sci-Fi\"],\n        distance: 0.2\n      },\n      objectLimit: 100\n    ) {\n      yearPublished {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average yearPublished of Papers about \"Artificial Intelligence Science Fiction\" with a maximum distance of 0.2. Please limit results to the top 100.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average salary of Job Listings for \"Software Engineer\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    JobListing(\n      nearText: {\n        concepts: [\"Software Engineer\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      salary {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average salary of Job Listings for \"Software Engineer\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average yearReleased of ProgrammingLanguages related to \"Python\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ProgrammingLanguage(\n      nearText: {\n        concepts: [\"Python\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      yearReleased {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average yearReleased of ProgrammingLanguages related to \"Python\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the historical events related to 'World War II'. Please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the eventName and description properties, weighting description twice as high. Please show the eventName, description, year, hadSignificantImpact, and the involved countries' country name and population.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HistoricalEvent(\n      hybrid: {\n        query: \"World War II\",\n        properties: [\"eventName\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      eventName\n      description\n      year\n      hadSignificantImpact\n      involvedCountries {\n        ... on Country {\n          countryName\n          population\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the historical events related to 'World War II'. Please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the eventName and description properties, weighting description twice as high. Please show the eventName, description, year, hadSignificantImpact, and the involved countries' country name and population.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the TV series with a hybrid search of 'drama', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and synopsis properties, weighting synopsis twice as high. Please show the title, synopsis, number of seasons, whether it is currently on air, and the names of the actors.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TVSeries(\n      hybrid: {\n        query: \"drama\",\n        properties: [\"title\", \"synopsis^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      title\n      synopsis\n      seasons\n      isOnAir\n      hasActor {\n        ... on Actor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the TV series with a hybrid search of 'drama', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and synopsis properties, weighting synopsis twice as high. Please show the title, synopsis, number of seasons, whether it is currently on air, and the names of the actors.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the workouts with a hybrid search of 'cardio', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, duration, whether it is a group workout, and the equipment name and quantity used.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Workout(\n      hybrid: {\n        query: \"cardio\",\n        properties: [\"name\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      name\n      description\n      duration\n      isGroup\n      usesEquipment {\n        ... on Equipment {\n          name\n          quantity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the workouts with a hybrid search of 'cardio', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, duration, whether it is a group workout, and the equipment name and quantity used.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the songs with a hybrid search of 'love', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the title and lyrics properties, weighting lyrics twice as high. Please show the title, lyrics, duration, explicitness, and the album's title and release year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Song(\n      hybrid: {\n        query: \"love\",\n        properties: [\"title\", \"lyrics^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      title\n      lyrics\n      duration\n      isExplicit\n      inAlbum {\n        ... on Album {\n          title\n          releaseYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the songs with a hybrid search of 'love', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the title and lyrics properties, weighting lyrics twice as high. Please show the title, lyrics, duration, explicitness, and the album's title and release year.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the plants with a hybrid search of 'rose', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the species and careInstructions properties, weighting careInstructions twice as high. Please show the species, care instructions, height, flowering status, and the name of the gardener who planted them.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      hybrid: {\n        query: \"rose\",\n        properties: [\"species\", \"careInstructions^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      species\n      careInstructions\n      height\n      isFlowering\n      plantedBy {\n        ... on Gardener {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the plants with a hybrid search of 'rose', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the species and careInstructions properties, weighting careInstructions twice as high. Please show the species, care instructions, height, flowering status, and the name of the gardener who planted them.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the recipes with a hybrid search of 'pasta', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and instructions properties, weighting instructions twice as high. Please show the title, instructions, preparation time, vegetarian status, and the name and calorie information of the used ingredients.\n```\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Recipe(\n      hybrid: {\n        query: \"pasta\",\n        properties: [\"title\", \"instructions^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      title\n      instructions\n      prepTime\n      isVegetarian\n      usesIngredient {\n        ... on Ingredient {\n          name\n          calories\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the recipes with a hybrid search of 'pasta', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and instructions properties, weighting instructions twice as high. Please show the title, instructions, preparation time, vegetarian status, and the name and calorie information of the used ingredients.\n```\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the destinations with a hybrid search of 'beach', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, average temperature, popularity, and the names and ages of the travelers who have visited.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Destination(\n      hybrid: {\n        query: \"beach\",\n        properties: [\"name\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      name\n      description\n      averageTemperature\n      isPopular\n      visitedBy {\n        ... on Traveler {\n          name\n          age\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the destinations with a hybrid search of 'beach', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, average temperature, popularity, and the names and ages of the travelers who have visited.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the aquariums with a hybrid search of 'coral reef', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and location properties, weighting location twice as high. Please show the name, location, water volume, presence of marine fish, and the caretaker's name and years of experience.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Aquarium(\n      hybrid: {\n        query: \"coral reef\",\n        properties: [\"name\", \"location^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      name\n      location\n      waterVolume\n      hasMarineFish\n      caretaker {\n        ... on Aquarist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the aquariums with a hybrid search of 'coral reef', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and location properties, weighting location twice as high. Please show the name, location, water volume, presence of marine fish, and the caretaker's name and years of experience.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the yoga poses with a hybrid search of 'beginner', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, complexity level, whether it is for beginners, and the yoga style it belongs to.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    YogaPose(\n      hybrid: {\n        query: \"beginner\",\n        properties: [\"name\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      name\n      description\n      complexityLevel\n      isForBeginners\n      fromYogaStyle {\n        ... on YogaStyle {\n          styleName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the yoga poses with a hybrid search of 'beginner', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, complexity level, whether it is for beginners, and the yoga style it belongs to.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the instruments with a hybrid search of 'guitar', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, year introduced, whether it is a string instrument, and the name and genre of the musician who plays it.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Instrument(\n      hybrid: {\n        query: \"guitar\",\n        properties: [\"name\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      name\n      description\n      yearIntroduced\n      isString\n      playedBy {\n        ... on Musician {\n          name\n          genre\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the instruments with a hybrid search of 'guitar', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, year introduced, whether it is a string instrument, and the name and genre of the musician who plays it.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the board games with a hybrid search of 'strategy', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and rules properties, weighting rules twice as high. Please show the name, rules, minimum number of players, whether it is cooperative, and the name, biography, and years active of the game designer.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BoardGame(\n      hybrid: {\n        query: \"strategy\",\n        properties: [\"name\", \"rules^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      name\n      rules\n      minPlayers\n      isCooperative\n      createdBy {\n        ... on GameDesigner {\n          name\n          biography\n          yearsActive\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the board games with a hybrid search of 'strategy', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and rules properties, weighting rules twice as high. Please show the name, rules, minimum number of players, whether it is cooperative, and the name, biography, and years active of the game designer.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the weather stations with a hybrid search of 'temperature', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the location and equipment properties, weighting equipment twice as high. Please show the location, equipment, altitude, activity status, and the name and years of experience of the meteorologist managing the station.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeatherStation(\n      hybrid: {\n        query: \"temperature\",\n        properties: [\"location\", \"equipment^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      location\n      equipment\n      altitude\n      isActive\n      managedBy {\n        ... on Meteorologist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the weather stations with a hybrid search of 'temperature', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the location and equipment properties, weighting equipment twice as high. Please show the location, equipment, altitude, activity status, and the name and years of experience of the meteorologist managing the station.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the movies with a hybrid search of 'action', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and genre properties, weighting genre twice as high. Please show the title, genre, duration, availability, and lead actor's name and awards won.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Movie(\n      hybrid: {\n        query: \"action\",\n        properties: [\"title\", \"genre^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      title\n      genre\n      duration\n      isAvailable\n      leadActor {\n        ... on Actor {\n          name\n          awardsWon\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the movies with a hybrid search of 'action', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and genre properties, weighting genre twice as high. Please show the title, genre, duration, availability, and lead actor's name and awards won.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the AI models with a hybrid search of 'classification', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the modelName and application properties, weighting application twice as high. Please show the modelName, application, accuracy, isSupervised, and basedOn algorithm's name, description, and yearDeveloped.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    AIModel(\n      hybrid: {\n        query: \"classification\",\n        properties: [\"modelName\", \"application^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      modelName\n      application\n      accuracy\n      isSupervised\n      basedOn {\n        ... on Algorithm {\n          name\n          description\n          yearDeveloped\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the AI models with a hybrid search of 'classification', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the modelName and application properties, weighting application twice as high. Please show the modelName, application, accuracy, isSupervised, and basedOn algorithm's name, description, and yearDeveloped.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the cars with a hybrid search of 'SUV', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the make and model properties, weighting model twice as high. Please show the make, model, year, availability, and the name of the customer who rented the car.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      hybrid: {\n        query: \"SUV\",\n        properties: [\"make\", \"model^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      make\n      model\n      year\n      isAvailable\n      rentedBy {\n        ... on Customer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the cars with a hybrid search of 'SUV', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the make and model properties, weighting model twice as high. Please show the make, model, year, availability, and the name of the customer who rented the car.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the legal cases with a hybrid search of 'criminal', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the caseTitle and caseSummary properties, weighting caseSummary twice as high. Please show the caseTitle, caseSummary, year, ongoing status, and the involved party's name, role, and number of cases.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase(\n      hybrid: {\n        query: \"criminal\",\n        properties: [\"caseTitle\", \"caseSummary^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      caseTitle\n      caseSummary\n      year\n      isOngoing\n      involvedParty {\n        ... on Party {\n          name\n          role\n          numberOfCases\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the legal cases with a hybrid search of 'criminal', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the caseTitle and caseSummary properties, weighting caseSummary twice as high. Please show the caseTitle, caseSummary, year, ongoing status, and the involved party's name, role, and number of cases.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the smart devices with a hybrid search of 'smart home', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the deviceName and features properties, weighting features twice as high. Please show the deviceName, features, price, wireless capability, and manufacturer's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SmartDevice(\n      hybrid: {\n        query: \"smart home\",\n        properties: [\"deviceName\", \"features^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      deviceName\n      features\n      price\n      isWireless\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the smart devices with a hybrid search of 'smart home', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the deviceName and features properties, weighting features twice as high. Please show the deviceName, features, price, wireless capability, and manufacturer's name.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the outdoor gear with a hybrid search of 'hiking boots', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the gearName and description properties, weighting description twice as high. Please show the gearName, description, weight, waterproof status, and supplier's name.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OutdoorGear(\n      hybrid: {\n        query: \"hiking boots\",\n        properties: [\"gearName\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      gearName\n      description\n      weight\n      isWaterproof\n      supplier {\n        ... on Supplier {\n          supplierName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the outdoor gear with a hybrid search of 'hiking boots', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the gearName and description properties, weighting description twice as high. Please show the gearName, description, weight, waterproof status, and supplier's name.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the restaurants with a hybrid search of 'Italian', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and cuisine properties, weighting cuisine twice as high. Please show the name, cuisine, seating capacity, Michelin star status, head chef's name, and head chef's specialty.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Restaurant(\n      hybrid: {\n        query: \"Italian\",\n        properties: [\"name\", \"cuisine^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      name\n      cuisine\n      seatingCapacity\n      hasMichelinStar\n      headChef {\n        ... on Chef {\n          name\n          specialty\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the restaurants with a hybrid search of 'Italian', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and cuisine properties, weighting cuisine twice as high. Please show the name, cuisine, seating capacity, Michelin star status, head chef's name, and head chef's specialty.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the posts with a hybrid search of 'technology', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the content and hashtags properties, weighting hashtags twice as high. Please show the content, hashtags, number of likes, whether it is public, and the comments' text and number of likes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Post(\n      hybrid: {\n        query: \"technology\",\n        properties: [\"content\", \"hashtags^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      content\n      hashtags\n      likes\n      isPublic\n      comments {\n        ... on Comment {\n          text\n          likes\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the posts with a hybrid search of 'technology', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the content and hashtags properties, weighting hashtags twice as high. Please show the content, hashtags, number of likes, whether it is public, and the comments' text and number of likes.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the animals with a hybrid search of 'dog', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and species properties, weighting species twice as high. Please show the name, species, age, adoption status, and the name of the adopter.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Animal(\n      hybrid: {\n        query: \"dog\",\n        properties: [\"name\", \"species^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      name\n      species\n      age\n      isAdopted\n      adoptedBy {\n        ... on Adopter {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the animals with a hybrid search of 'dog', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and species properties, weighting species twice as high. Please show the name, species, age, adoption status, and the name of the adopter.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the fashion brands with a hybrid search of 'luxury', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, founding year, luxury status, and the name of the designer.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FashionBrand(\n      hybrid: {\n        query: \"luxury\",\n        properties: [\"name\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      name\n      description\n      foundingYear\n      isLuxury\n      designedBy {\n        ... on Designer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the fashion brands with a hybrid search of 'luxury', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, founding year, luxury status, and the name of the designer.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the code repositories with a hybrid search of 'machine learning', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the repository name and description properties, weighting description twice as high. Please show the repository name, description, number of stars, whether it is a fork, and the username, real name, and contributions of the maintainers.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CodeRepository(\n      hybrid: {\n        query: \"machine learning\",\n        properties: [\"repositoryName\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      repositoryName\n      description\n      stars\n      isFork\n      maintainedBy {\n        ... on Developer {\n          username\n          realName\n          contributions\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the code repositories with a hybrid search of 'machine learning', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the repository name and description properties, weighting description twice as high. Please show the repository name, description, number of stars, whether it is a fork, and the username, real name, and contributions of the maintainers.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the wines with a hybrid search of 'red wine', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and tastingNotes properties, weighting tastingNotes twice as high. Please show the name, origin, grape variety, tasting notes, vintage year, whether it is red, and the related winery's name, location, and founded year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine(\n      hybrid: {\n        query: \"red wine\",\n        properties: [\"name\", \"tastingNotes^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      name\n      origin\n      grapeVariety\n      tastingNotes\n      vintageYear\n      isRed\n      relatedWinery {\n        ... on Winery {\n          name\n          location\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the wines with a hybrid search of 'red wine', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and tastingNotes properties, weighting tastingNotes twice as high. Please show the name, origin, grape variety, tasting notes, vintage year, whether it is red, and the related winery's name, location, and founded year.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the patients with a hybrid search of 'cancer', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the name and diagnosis properties, weighting diagnosis twice as high. Please show the name, diagnosis, age, insurance status, and primary doctor's name and experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Patient(\n      hybrid: {\n        query: \"cancer\",\n        properties: [\"name\", \"diagnosis^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      name\n      diagnosis\n      age\n      isInsured\n      primaryDoctor {\n        ... on Doctor {\n          name\n          experience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the patients with a hybrid search of 'cancer', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the name and diagnosis properties, weighting diagnosis twice as high. Please show the name, diagnosis, age, insurance status, and primary doctor's name and experience.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the telescopes with a hybrid search of 'astronomy', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the model and manufacturer properties, weighting manufacturer twice as high. Please show the model, manufacturer, magnification, usage status, and the name and years of experience of the astronomer operating it.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Telescope(\n      hybrid: {\n        query: \"astronomy\",\n        properties: [\"model\", \"manufacturer^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      model\n      manufacturer\n      magnification\n      isInUse\n      operatedBy {\n        ... on Astronomer {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the telescopes with a hybrid search of 'astronomy', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the model and manufacturer properties, weighting manufacturer twice as high. Please show the model, manufacturer, magnification, usage status, and the name and years of experience of the astronomer operating it.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the products with a hybrid search of 'electronics', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, price, in-stock status, and the content and rating of any reviews.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      hybrid: {\n        query: \"electronics\",\n        properties: [\"name\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      name\n      description\n      price\n      inStock\n      hasReview {\n        ... on Review {\n          content\n          rating\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the products with a hybrid search of 'electronics', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, price, in-stock status, and the content and rating of any reviews.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the startups with a hybrid search of 'technology', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and product properties, weighting product twice as high. Please show the name, product, funding, isBootstrapped, and founders' name, biography, and successful startups.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Startup(\n      hybrid: {\n        query: \"technology\",\n        properties: [\"name\", \"product^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      name\n      product\n      funding\n      isBootstrapped\n      founders {\n        ... on Entrepreneur {\n          name\n          biography\n          successfulStartups\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the startups with a hybrid search of 'technology', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and product properties, weighting product twice as high. Please show the name, product, funding, isBootstrapped, and founders' name, biography, and successful startups.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the events with a hybrid search of 'music concert', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the title and description properties, weighting description twice as high. Please show the title, description, start time, virtual status, and the name and capacity of the venue.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Event(\n      hybrid: {\n        query: \"music concert\",\n        properties: [\"title\", \"description^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      title\n      description\n      startTime\n      isVirtual\n      atVenue {\n        ... on Venue {\n          name\n          capacity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the events with a hybrid search of 'music concert', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the title and description properties, weighting description twice as high. Please show the title, description, start time, virtual status, and the name and capacity of the venue.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the games with a hybrid search of 'action adventure', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and genre properties, weighting genre twice as high. Please show the title, genre, rating, multiplayer availability, and developer's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Game(\n      hybrid: {\n        query: \"action adventure\",\n        properties: [\"title\", \"genre^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      title\n      genre\n      rating\n      isMultiplayer\n      developedBy {\n        ... on Developer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the games with a hybrid search of 'action adventure', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and genre properties, weighting genre twice as high. Please show the title, genre, rating, multiplayer availability, and developer's name.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the artwork with a hybrid search of 'modern art', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the title and medium properties, weighting medium twice as high. Please show the title, medium, year created, sold status, and the name of the artist.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Artwork(\n      hybrid: {\n        query: \"modern art\",\n        properties: [\"title\", \"medium^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      title\n      medium\n      yearCreated\n      isSold\n      createdBy {\n        ... on Artist {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the artwork with a hybrid search of 'modern art', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the title and medium properties, weighting medium twice as high. Please show the title, medium, year created, sold status, and the name of the artist.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the cars with a hybrid search of 'repair', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the make and model properties, weighting model twice as high. Please show the make, model, year, repair status, owner's name, and number of owned cars.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      hybrid: {\n        query: \"repair\",\n        properties: [\"make\", \"model^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      make\n      model\n      year\n      isRepaired\n      ownedBy {\n        ... on Owner {\n          name\n          ownedCars\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the cars with a hybrid search of 'repair', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the make and model properties, weighting model twice as high. Please show the make, model, year, repair status, owner's name, and number of owned cars.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the contacts with a hybrid search of 'John Doe', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the fullName and email properties, weighting fullName twice as high. Please show the fullName, email, phone, lead status, and associated company's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Contact(\n      hybrid: {\n        query: \"John Doe\",\n        properties: [\"fullName^2\", \"email\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      fullName\n      email\n      phone\n      isLead\n      associatedCompany {\n        ... on Company {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the contacts with a hybrid search of 'John Doe', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the fullName and email properties, weighting fullName twice as high. Please show the fullName, email, phone, lead status, and associated company's name.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the airlines with a hybrid search of 'international flights', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and hubAirport properties, weighting hubAirport twice as high. Please show the name, hubAirport, fleetSize, isInternational, and flightNumber with duration of the operated flights.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Airline(\n      hybrid: {\n        query: \"international flights\",\n        properties: [\"name\", \"hubAirport^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      name\n      hubAirport\n      fleetSize\n      isInternational\n      operatesFlight {\n        ... on Flight {\n          flightNumber\n          duration\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the airlines with a hybrid search of 'international flights', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and hubAirport properties, weighting hubAirport twice as high. Please show the name, hubAirport, fleetSize, isInternational, and flightNumber with duration of the operated flights.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the books with a hybrid search of 'science fiction', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the title and summary properties, weighting summary twice as high. Please show the title, summary, availability, and author's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Book(\n      hybrid: {\n        query: \"science fiction\",\n        properties: [\"title\", \"summary^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      title\n      summary\n      isAvailable\n      author {\n        ... on Author {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the books with a hybrid search of 'science fiction', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the title and summary properties, weighting summary twice as high. Please show the title, summary, availability, and author's name.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the cryptocurrencies with a hybrid search of 'Bitcoin', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and symbol properties, weighting symbol twice as high. Please show the name, symbol, market cap, stability, and exchange details.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Cryptocurrency(\n      hybrid: {\n        query: \"Bitcoin\",\n        properties: [\"name\", \"symbol^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      name\n      symbol\n      marketCap\n      isStableCoin\n      onExchange {\n        ... on Exchange {\n          name\n          country\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the cryptocurrencies with a hybrid search of 'Bitcoin', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and symbol properties, weighting symbol twice as high. Please show the name, symbol, market cap, stability, and exchange details.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the employees who are software engineers. Please use a hybrid search with a query of 'software engineer', an alpha value of 0.75, and perform the BM25 search on the name and jobTitle properties, weighting jobTitle twice as high. Please show the name, jobTitle, salary, whether they are remote, and the project they work on including the project name and budget. Limit the results to 10 employees.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Employee(\n      hybrid: {\n        query: \"software engineer\",\n        properties: [\"name\", \"jobTitle^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      name\n      jobTitle\n      salary\n      isRemote\n      worksOn {\n        ... on Project {\n          name\n          budget\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the employees who are software engineers. Please use a hybrid search with a query of 'software engineer', an alpha value of 0.75, and perform the BM25 search on the name and jobTitle properties, weighting jobTitle twice as high. Please show the name, jobTitle, salary, whether they are remote, and the project they work on including the project name and budget. Limit the results to 10 employees.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the products with a hybrid search of 'organic food', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, price, isOrganic, and category name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      hybrid: {\n        query: \"organic food\",\n        properties: [\"name\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      name\n      description\n      price\n      isOrganic\n      category {\n        ... on Category {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the products with a hybrid search of 'organic food', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, price, isOrganic, and category name.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the museums with a hybrid search of 'art', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and location properties, weighting location twice as high. Please show the name, location, founding year, whether it is public, and the title, description, and year of the exhibits it has.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Museum(\n      hybrid: {\n        query: \"art\",\n        properties: [\"name\", \"location^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      name\n      location\n      foundingYear\n      isPublic\n      hasExhibit {\n        ... on Exhibit {\n          title\n          description\n          year\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the museums with a hybrid search of 'art', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and location properties, weighting location twice as high. Please show the name, location, founding year, whether it is public, and the title, description, and year of the exhibits it has.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the teams with a hybrid search of 'football', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and city properties, weighting city twice as high. Please show the name, city, number of wins, champion status, league name, and number of teams in the league.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team(\n      hybrid: {\n        query: \"football\",\n        properties: [\"name\", \"city^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      name\n      city\n      wins\n      isChampion\n      inLeague {\n        ... on League {\n          name\n          teams\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the teams with a hybrid search of 'football', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and city properties, weighting city twice as high. Please show the name, city, number of wins, champion status, league name, and number of teams in the league.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the coffee shops with a hybrid search of 'latte', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the name and menu properties, weighting menu twice as high. Please show the name, menu, year founded, whether it is a franchise, and the neighborhood's name, description, and average rent.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CoffeeShop(\n      hybrid: {\n        query: \"latte\",\n        properties: [\"name\", \"menu^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      name\n      menu\n      yearFounded\n      isFranchise\n      locatedIn {\n        ... on Neighborhood {\n          name\n          description\n          averageRent\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the coffee shops with a hybrid search of 'latte', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the name and menu properties, weighting menu twice as high. Please show the name, menu, year founded, whether it is a franchise, and the neighborhood's name, description, and average rent.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the houses with a hybrid search of '3-bedroom', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the address and description properties, weighting description twice as high. Please show the address, description, price, sold status, and the name and experience of the agent who listed the house.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    House(\n      hybrid: {\n        query: \"3-bedroom\",\n        properties: [\"address\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      address\n      description\n      price\n      isSold\n      listedBy {\n        ... on Agent {\n          name\n          experience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the houses with a hybrid search of '3-bedroom', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the address and description properties, weighting description twice as high. Please show the address, description, price, sold status, and the name and experience of the agent who listed the house.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the diet plans with a hybrid search of 'weight loss', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, duration in days, whether it is vegetarian, and the food items it contains including their names and calories.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DietPlan(\n      hybrid: {\n        query: \"weight loss\",\n        properties: [\"name\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      name\n      description\n      durationDays\n      isVegetarian\n      contains {\n        ... on FoodItem {\n          itemName\n          calories\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the diet plans with a hybrid search of 'weight loss', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, duration in days, whether it is vegetarian, and the food items it contains including their names and calories.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the craft beers with a hybrid search of 'IPA', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the beer name and tasting notes properties, weighting tasting notes twice as high. Please show the beer name, tasting notes, alcohol content, seasonal availability, brewery name, and founded year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CraftBeer(\n      hybrid: {\n        query: \"IPA\",\n        properties: [\"beerName\", \"tastingNotes^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      beerName\n      tastingNotes\n      alcoholContent\n      isSeasonal\n      brewery {\n        ... on Brewery {\n          breweryName\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the craft beers with a hybrid search of 'IPA', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the beer name and tasting notes properties, weighting tasting notes twice as high. Please show the beer name, tasting notes, alcohol content, seasonal availability, brewery name, and founded year.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the spas with a hybrid search of 'massage', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and services properties, weighting services twice as high. Please show the name, services, average rating, whether it is open, and the location's name, description, and latitude.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Spa(\n      hybrid: {\n        query: \"massage\",\n        properties: [\"name\", \"services^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      name\n      services\n      averageRating\n      isOpen\n      locatedIn {\n        ... on Location {\n          name\n          description\n          latitude\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the spas with a hybrid search of 'massage', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and services properties, weighting services twice as high. Please show the name, services, average rating, whether it is open, and the location's name, description, and latitude.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the courses with a hybrid search of 'programming', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and description properties, weighting description twice as high. Please show the title, description, price, availability, and instructor's name and years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Course(\n      hybrid: {\n        query: \"programming\",\n        properties: [\"title\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      title\n      description\n      price\n      isFree\n      taughtBy {\n        ... on Instructor {\n          name\n          yearsOfExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the courses with a hybrid search of 'programming', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and description properties, weighting description twice as high. Please show the title, description, price, availability, and instructor's name and years of experience.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the papers with a hybrid search of 'machine learning', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the title and abstract properties, weighting abstract twice as high. Please show the title, abstract, year published, whether it is peer-reviewed, and the name and year of the conference it was presented at.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Paper(\n      hybrid: {\n        query: \"machine learning\",\n        properties: [\"title\", \"abstract^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      title\n      abstract\n      yearPublished\n      isPeerReviewed\n      presentedAt {\n        ... on Conference {\n          name\n          year\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the papers with a hybrid search of 'machine learning', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the title and abstract properties, weighting abstract twice as high. Please show the title, abstract, year published, whether it is peer-reviewed, and the name and year of the conference it was presented at.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the job listings with a hybrid search of 'software engineer', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and description properties, weighting description twice as high. Please show the title, description, salary, remote availability, and the name of the company that posted the job.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JobListing(\n      hybrid: {\n        query: \"software engineer\",\n        properties: [\"title\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      title\n      description\n      salary\n      isRemote\n      postedBy {\n        ... on Company {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the job listings with a hybrid search of 'software engineer', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and description properties, weighting description twice as high. Please show the title, description, salary, remote availability, and the name of the company that posted the job.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the programming languages with a hybrid search of 'web development', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, year released, whether it is compiled, and the software projects it is used in including the project name, repository URL, and lines of code.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ProgrammingLanguage(\n      hybrid: {\n        query: \"web development\",\n        properties: [\"name\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      name\n      description\n      yearReleased\n      isCompiled\n      usedIn {\n        ... on SoftwareProject {\n          projectName\n          repositoryURL\n          linesOfCode\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the programming languages with a hybrid search of 'web development', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, year released, whether it is compiled, and the software projects it is used in including the project name, repository URL, and lines of code.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the historical events related to 'World War II', and show the event name, description, year, significant impact, and the countries involved with their names and populations. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HistoricalEvent(\n      hybrid: {\n        query: \"World War II\"\n      },\n      limit: 5\n    ) {\n      eventName\n      description\n      year\n      hadSignificantImpact\n      involvedCountries {\n        ... on Country {\n          countryName\n          population\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the historical events related to 'World War II', and show the event name, description, year, significant impact, and the countries involved with their names and populations. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the TV series with a hybrid search of 'drama', limit the results to 10. Show the title, synopsis, on-air status, and the names of the actors.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TVSeries(\n      hybrid: {\n        query: \"drama\"\n      },\n      limit: 10\n    ) {\n      title\n      synopsis\n      isOnAir\n      hasActor {\n        ... on Actor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the TV series with a hybrid search of 'drama', limit the results to 10. Show the title, synopsis, on-air status, and the names of the actors.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the workouts with a hybrid search of 'cardio', and show the name, description, duration, whether it is a group workout, and the equipment used with their names and quantities. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Workout(\n      hybrid: {\n        query: \"cardio\"\n      },\n      limit: 10\n    ) {\n      name\n      description\n      duration\n      isGroup\n      usesEquipment {\n        ... on Equipment {\n          name\n          quantity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the workouts with a hybrid search of 'cardio', and show the name, description, duration, whether it is a group workout, and the equipment used with their names and quantities. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 songs with a hybrid search of 'pop', and show the title, lyrics, duration, explicit status, and the album's title and release year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Song(\n      hybrid: {\n        query: \"pop\"\n      },\n      limit: 10\n    ) {\n      title\n      lyrics\n      duration\n      isExplicit\n      inAlbum {\n        ... on Album {\n          title\n          releaseYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 songs with a hybrid search of 'pop', and show the title, lyrics, duration, explicit status, and the album's title and release year.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the plants with a hybrid search of 'rose', and show the species, care instructions, height, flowering status, and the name of the gardener who planted them. Limit the results to 3.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      hybrid: {\n        query: \"rose\"\n      },\n      limit: 3\n    ) {\n      species\n      careInstructions\n      height\n      isFlowering\n      plantedBy {\n        ... on Gardener {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the plants with a hybrid search of 'rose', and show the species, care instructions, height, flowering status, and the name of the gardener who planted them. Limit the results to 3.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the recipes with a hybrid search of 'pasta', and show the title, instructions, preparation time, vegetarian status, and the name and calories of the ingredients used. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Recipe(\n      hybrid: {\n        query: \"pasta\"\n      },\n      limit: 5\n    ) {\n      title\n      instructions\n      prepTime\n      isVegetarian\n      usesIngredient {\n        ... on Ingredient {\n          name\n          calories\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the recipes with a hybrid search of 'pasta', and show the title, instructions, preparation time, vegetarian status, and the name and calories of the ingredients used. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 destinations with a hybrid search of 'beach', and show the name, description, average temperature, popularity, and the names of the travelers who have visited.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Destination(\n      hybrid: {\n        query: \"beach\"\n      },\n      limit: 3\n    ) {\n      name\n      description\n      averageTemperature\n      isPopular\n      visitedBy {\n        ... on Traveler {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 destinations with a hybrid search of 'beach', and show the name, description, average temperature, popularity, and the names of the travelers who have visited.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the aquariums with a hybrid search of 'coral reef', and show the name, location, water volume, availability of marine fish, and caretaker's name and years of experience. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Aquarium(\n      hybrid: {\n        query: \"coral reef\"\n      },\n      limit: 10\n    ) {\n      name\n      location\n      waterVolume\n      hasMarineFish\n      caretaker {\n        ... on Aquarist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the aquariums with a hybrid search of 'coral reef', and show the name, location, water volume, availability of marine fish, and caretaker's name and years of experience. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 yoga poses suitable for beginners. The poses should have a hybrid search with the query 'beginner'. For each pose, show the name, description, complexity level, whether it is suitable for beginners, and the yoga style it belongs to. For the yoga style, include the style name, origin, and popularity.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    YogaPose(\n      hybrid: {\n        query: \"beginner\"\n      },\n      limit: 5\n    ) {\n      name\n      description\n      complexityLevel\n      isForBeginners\n      fromYogaStyle {\n        ... on YogaStyle {\n          styleName\n          origin\n          popularity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 yoga poses suitable for beginners. The poses should have a hybrid search with the query 'beginner'. For each pose, show the name, description, complexity level, whether it is suitable for beginners, and the yoga style it belongs to. For the yoga style, include the style name, origin, and popularity.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the instruments with a hybrid search of 'guitar', and show the name, description, year introduced, whether it is a string instrument, and the musicians who play it including their name, genre, and years active. Limit the results to 3.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Instrument(\n      hybrid: {\n        query: \"guitar\"\n      },\n      limit: 3\n    ) {\n      name\n      description\n      yearIntroduced\n      isString\n      playedBy {\n        ... on Musician {\n          name\n          genre\n          yearsActive\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the instruments with a hybrid search of 'guitar', and show the name, description, year introduced, whether it is a string instrument, and the musicians who play it including their name, genre, and years active. Limit the results to 3.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the board games with a hybrid search of 'strategy', and show the name, rules, minimum number of players, whether it is cooperative, and the name of the game designer. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BoardGame(\n      hybrid: {\n        query: \"strategy\"\n      },\n      limit: 5\n    ) {\n      name\n      rules\n      minPlayers\n      isCooperative\n      createdBy {\n        ... on GameDesigner {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the board games with a hybrid search of 'strategy', and show the name, rules, minimum number of players, whether it is cooperative, and the name of the game designer. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the weather stations with a hybrid search of 'temperature', and show the location, equipment, altitude, activity status, and the name and years of experience of the meteorologist managing each station. Limit the results to 3.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeatherStation(\n      hybrid: {\n        query: \"temperature\"\n      },\n      limit: 3\n    ) {\n      location\n      equipment\n      altitude\n      isActive\n      managedBy {\n        ... on Meteorologist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the weather stations with a hybrid search of 'temperature', and show the location, equipment, altitude, activity status, and the name and years of experience of the meteorologist managing each station. Limit the results to 3.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 movies with a hybrid search of 'action', and show the title, genre, duration, availability, and lead actor's name and awards won.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Movie(\n      hybrid: {\n        query: \"action\"\n      },\n      limit: 5\n    ) {\n      title\n      genre\n      duration\n      isAvailable\n      leadActor {\n        ... on Actor {\n          name\n          awardsWon\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 movies with a hybrid search of 'action', and show the title, genre, duration, availability, and lead actor's name and awards won.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the AI models with a hybrid search of 'classification', and show the model name, application, accuracy, whether it is supervised, and the algorithm's name, description, and year developed. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    AIModel(\n      hybrid: {\n        query: \"classification\"\n      },\n      limit: 10\n    ) {\n      modelName\n      application\n      accuracy\n      isSupervised\n      basedOn {\n        ... on Algorithm {\n          name\n          description\n          yearDeveloped\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the AI models with a hybrid search of 'classification', and show the model name, application, accuracy, whether it is supervised, and the algorithm's name, description, and year developed. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the cars with a hybrid search of 'SUV', and show the make, model, year, availability, and renter's name. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      hybrid: {\n        query: \"SUV\"\n      },\n      limit: 5\n    ) {\n      make\n      model\n      year\n      isAvailable\n      rentedBy {\n        ... on Customer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the cars with a hybrid search of 'SUV', and show the make, model, year, availability, and renter's name. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the legal cases with a hybrid search of 'criminal', limit the results to 10, and show the case title, case summary, year, ongoing status, and involved party's name, role, and number of cases.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase(\n      hybrid: {\n        query: \"criminal\"\n      },\n      limit: 10\n    ) {\n      caseTitle\n      caseSummary\n      year\n      isOngoing\n      involvedParty {\n        ... on Party {\n          name\n          role\n          numberOfCases\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the legal cases with a hybrid search of 'criminal', limit the results to 10, and show the case title, case summary, year, ongoing status, and involved party's name, role, and number of cases.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the smart devices with a hybrid search of 'smart home', and show the device name, features, price, wireless capability, and manufacturer's name. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SmartDevice(\n      hybrid: {\n        query: \"smart home\"\n      },\n      limit: 5\n    ) {\n      deviceName\n      features\n      price\n      isWireless\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the smart devices with a hybrid search of 'smart home', and show the device name, features, price, wireless capability, and manufacturer's name. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the outdoor gear with a hybrid search of 'backpack', and show the gear name, description, weight, waterproof status, and supplier's name. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OutdoorGear(\n      hybrid: {\n        query: \"backpack\"\n      },\n      limit: 5\n    ) {\n      gearName\n      description\n      weight\n      isWaterproof\n      supplier {\n        ... on Supplier {\n          supplierName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the outdoor gear with a hybrid search of 'backpack', and show the gear name, description, weight, waterproof status, and supplier's name. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 restaurants with a hybrid search of 'Italian', and show the name, cuisine, seating capacity, Michelin star status, and the head chef's name, specialty, and years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Restaurant(\n      hybrid: {\n        query: \"Italian\"\n      },\n      limit: 5\n    ) {\n      name\n      cuisine\n      seatingCapacity\n      hasMichelinStar\n      headChef {\n        ... on Chef {\n          name\n          specialty\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 restaurants with a hybrid search of 'Italian', and show the name, cuisine, seating capacity, Michelin star status, and the head chef's name, specialty, and years of experience.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the posts with a hybrid search of 'social media', limit the results to 10, and show the content, hashtags, number of likes, public status, and comments' text and number of likes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Post(\n      hybrid: {\n        query: \"social media\"\n      },\n      limit: 10\n    ) {\n      content\n      hashtags\n      likes\n      isPublic\n      comments {\n        ... on Comment {\n          text\n          likes\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the posts with a hybrid search of 'social media', limit the results to 10, and show the content, hashtags, number of likes, public status, and comments' text and number of likes.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 animals with a hybrid search of 'dog', and show their name, species, age, adoption status, and the name of the adopter.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Animal(\n      hybrid: {\n        query: \"dog\"\n      },\n      limit: 3\n    ) {\n      name\n      species\n      age\n      isAdopted\n      adoptedBy {\n        ... on Adopter {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 animals with a hybrid search of 'dog', and show their name, species, age, adoption status, and the name of the adopter.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the fashion brands with a hybrid search of 'luxury', and show the name, description, founding year, luxury status, and designer's name. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FashionBrand(\n      hybrid: {\n        query: \"luxury\"\n      },\n      limit: 5\n    ) {\n      name\n      description\n      foundingYear\n      isLuxury\n      designedBy {\n        ... on Designer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the fashion brands with a hybrid search of 'luxury', and show the name, description, founding year, luxury status, and designer's name. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the code repositories with a hybrid search of 'machine learning', and show the repository name, description, number of stars, whether it is a fork, and the username, real name, and contributions of the maintainers. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CodeRepository(\n      hybrid: {\n        query: \"machine learning\"\n      },\n      limit: 10\n    ) {\n      repositoryName\n      description\n      stars\n      isFork\n      maintainedBy {\n        ... on Developer {\n          username\n          realName\n          contributions\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the code repositories with a hybrid search of 'machine learning', and show the repository name, description, number of stars, whether it is a fork, and the username, real name, and contributions of the maintainers. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 wines with a hybrid search of 'red wine', and show the name, origin, grape variety, tasting notes, vintage year, whether it is red, and the related winery's name, location, and founded year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine(\n      hybrid: {\n        query: \"red wine\"\n      },\n      limit: 5\n    ) {\n      name\n      origin\n      grapeVariety\n      tastingNotes\n      vintageYear\n      isRed\n      relatedWinery {\n        ... on Winery {\n          name\n          location\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 wines with a hybrid search of 'red wine', and show the name, origin, grape variety, tasting notes, vintage year, whether it is red, and the related winery's name, location, and founded year.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the patients with a hybrid search of 'cancer', and show their name, diagnosis, age, insurance status, and primary doctor's name and experience. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Patient(\n      hybrid: {\n        query: \"cancer\"\n      },\n      limit: 10\n    ) {\n      name\n      diagnosis\n      age\n      isInsured\n      primaryDoctor {\n        ... on Doctor {\n          name\n          experience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the patients with a hybrid search of 'cancer', and show their name, diagnosis, age, insurance status, and primary doctor's name and experience. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the telescopes with a hybrid search of 'astronomy', and show the model, manufacturer, magnification, usage status, and the name and years of experience of the astronomers operating them. Limit the results to 3.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Telescope(\n      hybrid: {\n        query: \"astronomy\"\n      },\n      limit: 3\n    ) {\n      model\n      manufacturer\n      magnification\n      isInUse\n      operatedBy {\n        ... on Astronomer {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the telescopes with a hybrid search of 'astronomy', and show the model, manufacturer, magnification, usage status, and the name and years of experience of the astronomers operating them. Limit the results to 3.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the products with a hybrid search of 'electronics', and show the name, description, price, in-stock status, and any reviews including the content and rating. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      hybrid: {\n        query: \"electronics\"\n      },\n      limit: 10\n    ) {\n      name\n      description\n      price\n      inStock\n      hasReview {\n        ... on Review {\n          content\n          rating\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the products with a hybrid search of 'electronics', and show the name, description, price, in-stock status, and any reviews including the content and rating. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the startups with a hybrid search of 'technology', and show the name, product, funding, bootstrapping status, and founders' names, biographies, and successful startups. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Startup(\n      hybrid: {\n        query: \"technology\"\n      },\n      limit: 10\n    ) {\n      name\n      product\n      funding\n      isBootstrapped\n      founders {\n        ... on Entrepreneur {\n          name\n          biography\n          successfulStartups\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the startups with a hybrid search of 'technology', and show the name, product, funding, bootstrapping status, and founders' names, biographies, and successful startups. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the events with a hybrid search of 'music concert', and show the title, description, start time, virtual status, and venue's name and capacity. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Event(\n      hybrid: {\n        query: \"music concert\"\n      },\n      limit: 5\n    ) {\n      title\n      description\n      startTime\n      isVirtual\n      atVenue {\n        ... on Venue {\n          name\n          capacity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the events with a hybrid search of 'music concert', and show the title, description, start time, virtual status, and venue's name and capacity. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the news outlets with a hybrid search of 'breaking news', and show the name, founding year, online status, and journalist's name and years of experience. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NewsOutlet(\n      hybrid: {\n        query: \"breaking news\"\n      },\n      limit: 10\n    ) {\n      name\n      foundingYear\n      isOnline\n      hasJournalist {\n        ... on Journalist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the news outlets with a hybrid search of 'breaking news', and show the name, founding year, online status, and journalist's name and years of experience. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 games with a hybrid search of 'action adventure', and show the title, genre, rating, multiplayer availability, and developer's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Game(\n      hybrid: {\n        query: \"action adventure\"\n      },\n      limit: 5\n    ) {\n      title\n      genre\n      rating\n      isMultiplayer\n      developedBy {\n        ... on Developer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 games with a hybrid search of 'action adventure', and show the title, genre, rating, multiplayer availability, and developer's name.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the artwork with a hybrid search of 'modern art', limit the results to 5, and show the title, medium, year created, sold status, and artist's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Artwork(\n      hybrid: {\n        query: \"modern art\"\n      },\n      limit: 5\n    ) {\n      title\n      medium\n      yearCreated\n      isSold\n      createdBy {\n        ... on Artist {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the artwork with a hybrid search of 'modern art', limit the results to 5, and show the title, medium, year created, sold status, and artist's name.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the cars with a hybrid search of 'repair', limit the results to 5, and show the make, model, year, repair status, and owner's name and number of owned cars.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      hybrid: {\n        query: \"repair\"\n      },\n      limit: 5\n    ) {\n      make\n      model\n      year\n      isRepaired\n      ownedBy {\n        ... on Owner {\n          name\n          ownedCars\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the cars with a hybrid search of 'repair', limit the results to 5, and show the make, model, year, repair status, and owner's name and number of owned cars.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the contacts with a hybrid search of 'John Doe', and show the full name, email, phone number, lead status, and associated company's name. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Contact(\n      hybrid: {\n        query: \"John Doe\"\n      },\n      limit: 10\n    ) {\n      fullName\n      email\n      phone\n      isLead\n      associatedCompany {\n        ... on Company {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the contacts with a hybrid search of 'John Doe', and show the full name, email, phone number, lead status, and associated company's name. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 airlines that operate international flights. Show me their name, hub airport, fleet size, and whether they are international. Also, show me the flight number and duration for each flight they operate.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Airline(\n      hybrid: {\n        query: \"international flights\"\n      },\n      limit: 5\n    ) {\n      name\n      hubAirport\n      fleetSize\n      isInternational\n      operatesFlight {\n        ... on Flight {\n          flightNumber\n          duration\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 airlines that operate international flights. Show me their name, hub airport, fleet size, and whether they are international. Also, show me the flight number and duration for each flight they operate.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the books with a hybrid search of 'science fiction', limit the results to 5, and show the title, summary, availability, and author's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Book(\n      hybrid: {\n        query: \"science fiction\"\n      },\n      limit: 5\n    ) {\n      title\n      summary\n      isAvailable\n      author {\n        ... on Author {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the books with a hybrid search of 'science fiction', limit the results to 5, and show the title, summary, availability, and author's name.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 cryptocurrencies with a hybrid search of 'Bitcoin', and show the name, symbol, market cap, stability status, and the exchange name, country, and founded year where they are listed.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Cryptocurrency(\n      hybrid: {\n        query: \"Bitcoin\"\n      },\n      limit: 10\n    ) {\n      name\n      symbol\n      marketCap\n      isStableCoin\n      onExchange {\n        ... on Exchange {\n          name\n          country\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 cryptocurrencies with a hybrid search of 'Bitcoin', and show the name, symbol, market cap, stability status, and the exchange name, country, and founded year where they are listed.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 employees who are software engineers. Show their name, job title, salary, remote work availability, and the projects they work on including the project name and budget.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Employee(\n      hybrid: {\n        query: \"software engineer\"\n      },\n      limit: 5\n    ) {\n      name\n      jobTitle\n      salary\n      isRemote\n      worksOn {\n        ... on Project {\n          name\n          budget\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 employees who are software engineers. Show their name, job title, salary, remote work availability, and the projects they work on including the project name and budget.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the products with a hybrid search of 'organic food', and show the name, description, price, organic status, and category name. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      hybrid: {\n        query: \"organic food\"\n      },\n      limit: 10\n    ) {\n      name\n      description\n      price\n      isOrganic\n      category {\n        ... on Category {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the products with a hybrid search of 'organic food', and show the name, description, price, organic status, and category name. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 museums with a hybrid search of 'art', and show the name, location, founding year, public status, and the exhibits' titles, descriptions, and years.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Museum(\n      hybrid: {\n        query: \"art\"\n      },\n      limit: 3\n    ) {\n      name\n      location\n      foundingYear\n      isPublic\n      hasExhibit {\n        ... on Exhibit {\n          title\n          description\n          year\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 museums with a hybrid search of 'art', and show the name, location, founding year, public status, and the exhibits' titles, descriptions, and years.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 football teams with a hybrid search of 'football', and show their name, city, number of wins, champion status, and the name of the league they belong to.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team(\n      hybrid: {\n        query: \"football\"\n      },\n      limit: 10\n    ) {\n      name\n      city\n      wins\n      isChampion\n      inLeague {\n        ... on League {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 football teams with a hybrid search of 'football', and show their name, city, number of wins, champion status, and the name of the league they belong to.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 coffee shops with a hybrid search of 'latte', and show me their names, menus, year founded, franchise status, and the neighborhood they are located in. For each neighborhood, also include the name, description, and average rent.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CoffeeShop(\n      hybrid: {\n        query: \"latte\"\n      },\n      limit: 3\n    ) {\n      name\n      menu\n      yearFounded\n      isFranchise\n      locatedIn {\n        ... on Neighborhood {\n          name\n          description\n          averageRent\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 coffee shops with a hybrid search of 'latte', and show me their names, menus, year founded, franchise status, and the neighborhood they are located in. For each neighborhood, also include the name, description, and average rent.\n```\n", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the diet plans with a hybrid search of 'weight loss', and show the name, description, duration in days, whether it is vegetarian, and the food items it contains. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DietPlan(\n      hybrid: {\n        query: \"weight loss\"\n      },\n      limit: 5\n    ) {\n      name\n      description\n      durationDays\n      isVegetarian\n      contains {\n        ... on FoodItem {\n          itemName\n          calories\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the diet plans with a hybrid search of 'weight loss', and show the name, description, duration in days, whether it is vegetarian, and the food items it contains. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the craft beers with a hybrid search of 'IPA', and show the beer name, tasting notes, alcohol content, seasonal availability, brewery name, and founded year. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CraftBeer(\n      hybrid: {\n        query: \"IPA\"\n      },\n      limit: 5\n    ) {\n      beerName\n      tastingNotes\n      alcoholContent\n      isSeasonal\n      brewery {\n        ... on Brewery {\n          breweryName\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the craft beers with a hybrid search of 'IPA', and show the beer name, tasting notes, alcohol content, seasonal availability, brewery name, and founded year. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 spas with a hybrid search of 'massage', and show the name, services, average rating, open status, and location details including name, description, and latitude.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Spa(\n      hybrid: {\n        query: \"massage\"\n      },\n      limit: 3\n    ) {\n      name\n      services\n      averageRating\n      isOpen\n      locatedIn {\n        ... on Location {\n          name\n          description\n          latitude\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 spas with a hybrid search of 'massage', and show the name, services, average rating, open status, and location details including name, description, and latitude.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 courses with a hybrid search of 'programming', and show the title, description, price, availability, and instructor's name and years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Course(\n      hybrid: {\n        query: \"programming\"\n      },\n      limit: 5\n    ) {\n      title\n      description\n      price\n      isFree\n      taughtBy {\n        ... on Instructor {\n          name\n          yearsOfExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 courses with a hybrid search of 'programming', and show the title, description, price, availability, and instructor's name and years of experience.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the papers with a hybrid search of 'machine learning', and show the title, abstract, year published, whether it is peer-reviewed, and the name and year of the conference it was presented at. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Paper(\n      hybrid: {\n        query: \"machine learning\"\n      },\n      limit: 10\n    ) {\n      title\n      abstract\n      yearPublished\n      isPeerReviewed\n      presentedAt {\n        ... on Conference {\n          name\n          year\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the papers with a hybrid search of 'machine learning', and show the title, abstract, year published, whether it is peer-reviewed, and the name and year of the conference it was presented at. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the job listings with a hybrid search of 'software engineer', and show the title, description, salary, remote availability, and the name and founded year of the company. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JobListing(\n      hybrid: {\n        query: \"software engineer\"\n      },\n      limit: 10\n    ) {\n      title\n      description\n      salary\n      isRemote\n      postedBy {\n        ... on Company {\n          name\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the job listings with a hybrid search of 'software engineer', and show the title, description, salary, remote availability, and the name and founded year of the company. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the programming languages related to web development. Show me the name, description, year released, and whether they are compiled. Also, include the top 5 programming languages and the software projects they are used in, including the project name, repository URL, and lines of code.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ProgrammingLanguage(\n      hybrid: {\n        query: \"web development\"\n      },\n      limit: 5\n    ) {\n      name\n      description\n      yearReleased\n      isCompiled\n      usedIn {\n        ... on SoftwareProject {\n          projectName\n          repositoryURL\n          linesOfCode\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the programming languages related to web development. Show me the name, description, year released, and whether they are compiled. Also, include the top 5 programming languages and the software projects they are used in, including the project name, repository URL, and lines of code.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the event name, description, year, significant impact, and the names of the countries involved for the 6th object in the HistoricalEvent class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HistoricalEvent(\n      limit: 1,\n      offset: 5\n    ) {\n      eventName\n      description\n      year\n      hadSignificantImpact\n      involvedCountries {\n        ... on Country {\n          countryName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the event name, description, year, significant impact, and the names of the countries involved for the 6th object in the HistoricalEvent class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title, synopsis, on-air status, and linked actor's name for the 6th object in the TVSeries class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TVSeries(\n      limit: 1,\n      offset: 5\n    ) {\n      title\n      synopsis\n      isOnAir\n      hasActor {\n        ... on Actor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title, synopsis, on-air status, and linked actor's name for the 6th object in the TVSeries class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, description, duration, whether it is a group workout, and the equipment name and quantity for the 6th object in the Workout class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Workout(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      description\n      duration\n      isGroup\n      usesEquipment {\n        ... on Equipment {\n          name\n          quantity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, description, duration, whether it is a group workout, and the equipment name and quantity for the 6th object in the Workout class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title, lyrics, duration, explicit status, and the album's title and release year for the 6th object in the Songs class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Song(\n      limit: 1,\n      offset: 5\n    ) {\n      title\n      lyrics\n      duration\n      isExplicit\n      inAlbum {\n        ... on Album {\n          title\n          releaseYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title, lyrics, duration, explicit status, and the album's title and release year for the 6th object in the Songs class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the species, care instructions, height, flowering status, and the name of the gardener who planted the 6th object in the Plant class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      limit: 1,\n      offset: 5\n    ) {\n      species\n      careInstructions\n      height\n      isFlowering\n      plantedBy {\n        ... on Gardener {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the species, care instructions, height, flowering status, and the name of the gardener who planted the 6th object in the Plant class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title, instructions, vegetarian status, and linked ingredient's name for the 6th object in the Recipe class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Recipe(\n      limit: 1,\n      offset: 5\n    ) {\n      title\n      instructions\n      isVegetarian\n      usesIngredient {\n        ... on Ingredient {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title, instructions, vegetarian status, and linked ingredient's name for the 6th object in the Recipe class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, description, average temperature, popularity, and linked traveler's name for the 6th object in the Destination class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Destination(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      description\n      averageTemperature\n      isPopular\n      visitedBy {\n        ... on Traveler {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, description, average temperature, popularity, and linked traveler's name for the 6th object in the Destination class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, location, water volume, presence of marine fish, and the name of the caretaker for the 6th object in the Aquarium class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Aquarium(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      location\n      waterVolume\n      hasMarineFish\n      caretaker {\n        ... on Aquarist {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, location, water volume, presence of marine fish, and the name of the caretaker for the 6th object in the Aquarium class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, description, complexity level, whether it is for beginners, and the linked yoga style's name for the 6th object in the YogaPose class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    YogaPose(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      description\n      complexityLevel\n      isForBeginners\n      fromYogaStyle {\n        ... on YogaStyle {\n          styleName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, description, complexity level, whether it is for beginners, and the linked yoga style's name for the 6th object in the YogaPose class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, description, year introduced, whether it is a string instrument, and the name, genre, and years active of the musician who plays the 6th object in the Instrument class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Instrument(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      description\n      yearIntroduced\n      isString\n      playedBy {\n        ... on Musician {\n          name\n          genre\n          yearsActive\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, description, year introduced, whether it is a string instrument, and the name, genre, and years active of the musician who plays the 6th object in the Instrument class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, rules, minimum players, cooperative status, and the name of the creator for the 6th object in the BoardGame class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BoardGame(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      rules\n      minPlayers\n      isCooperative\n      createdBy {\n        ... on GameDesigner {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, rules, minimum players, cooperative status, and the name of the creator for the 6th object in the BoardGame class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the location, equipment, altitude, activity status, and the name of the meteorologist managing the 6th object in the WeatherStation class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeatherStation(\n      limit: 1,\n      offset: 5\n    ) {\n      location\n      equipment\n      altitude\n      isActive\n      managedBy {\n        ... on Meteorologist {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the location, equipment, altitude, activity status, and the name of the meteorologist managing the 6th object in the WeatherStation class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title, genre, availability, and linked lead actor's name for the 6th object in the Movies class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Movie(\n      limit: 1,\n      offset: 5\n    ) {\n      title\n      genre\n      isAvailable\n      leadActor {\n        ... on Actor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title, genre, availability, and linked lead actor's name for the 6th object in the Movies class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the model name, application, accuracy, supervised status, and the name of the algorithm it is based on for the 6th object in the AIModel class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    AIModel(\n      limit: 1,\n      offset: 5\n    ) {\n      modelName\n      application\n      accuracy\n      isSupervised\n      basedOn {\n        ... on Algorithm {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the model name, application, accuracy, supervised status, and the name of the algorithm it is based on for the 6th object in the AIModel class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the make, model, year, availability, and linked customer's name for the 6th object in the Car class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      limit: 1,\n      offset: 5\n    ) {\n      make\n      model\n      year\n      isAvailable\n      rentedBy {\n        ... on Customer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the make, model, year, availability, and linked customer's name for the 6th object in the Car class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the case title, case summary, year, ongoing status, and the name, role, and number of cases for the 4th object in the LegalCase class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase(\n      limit: 1,\n      offset: 3\n    ) {\n      caseTitle\n      caseSummary\n      year\n      isOngoing\n      involvedParty {\n        ... on Party {\n          name\n          role\n          numberOfCases\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the case title, case summary, year, ongoing status, and the name, role, and number of cases for the 4th object in the LegalCase class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the device name, features, price, wireless status, and manufacturer's name for the 6th object in the SmartDevice class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SmartDevice(\n      limit: 1,\n      offset: 5\n    ) {\n      deviceName\n      features\n      price\n      isWireless\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the device name, features, price, wireless status, and manufacturer's name for the 6th object in the SmartDevice class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the gear name, description, weight, waterproof status, and the name of the supplier for the 6th object in the Outdoor Gear class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OutdoorGear(\n      limit: 1,\n      offset: 5\n    ) {\n      gearName\n      description\n      weight\n      isWaterproof\n      supplier {\n        ... on Supplier {\n          supplierName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the gear name, description, weight, waterproof status, and the name of the supplier for the 6th object in the Outdoor Gear class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, cuisine, seating capacity, Michelin star status, and the name of the head chef for the 6th object in the Restaurant class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Restaurant(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      cuisine\n      seatingCapacity\n      hasMichelinStar\n      headChef {\n        ... on Chef {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, cuisine, seating capacity, Michelin star status, and the name of the head chef for the 6th object in the Restaurant class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the content, hashtags, number of likes, public status, and comments' text and number of likes for the 6th object in the Posts class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Post(\n      limit: 1,\n      offset: 5\n    ) {\n      content\n      hashtags\n      likes\n      isPublic\n      comments {\n        ... on Comment {\n          text\n          likes\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the content, hashtags, number of likes, public status, and comments' text and number of likes for the 6th object in the Posts class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, species, age, adoption status, and the name of the adopter for the 6th object in the Animal class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Animal(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      species\n      age\n      isAdopted\n      adoptedBy {\n        ... on Adopter {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, species, age, adoption status, and the name of the adopter for the 6th object in the Animal class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, description, founding year, luxury status, and linked designer's name for the 6th object in the Fashion Brand class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FashionBrand(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      description\n      foundingYear\n      isLuxury\n      designedBy {\n        ... on Designer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, description, founding year, luxury status, and linked designer's name for the 6th object in the Fashion Brand class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the repository name, description, number of stars, whether it is a fork, and the username, real name, and contributions of the maintainer for the 6th object in the CodeRepository class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CodeRepository(\n      limit: 1,\n      offset: 5\n    ) {\n      repositoryName\n      description\n      stars\n      isFork\n      maintainedBy {\n        ... on Developer {\n          username\n          realName\n          contributions\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the repository name, description, number of stars, whether it is a fork, and the username, real name, and contributions of the maintainer for the 6th object in the CodeRepository class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, origin, grape variety, tasting notes, vintage year, whether it is red, and the name of the related winery for the 4th object in the Wine class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine(\n      limit: 1,\n      offset: 3\n    ) {\n      name\n      origin\n      grapeVariety\n      tastingNotes\n      vintageYear\n      isRed\n      relatedWinery {\n        ... on Winery {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, origin, grape variety, tasting notes, vintage year, whether it is red, and the name of the related winery for the 4th object in the Wine class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, diagnosis, age, insurance status, and linked primary doctor's name and experience for the 6th object in the Patients class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Patient(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      diagnosis\n      age\n      isInsured\n      primaryDoctor {\n        ... on Doctor {\n          name\n          experience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, diagnosis, age, insurance status, and linked primary doctor's name and experience for the 6th object in the Patients class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the model, manufacturer, magnification, usage status, and the name of the astronomer operating the 6th object in the Telescope class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Telescope(\n      limit: 1,\n      offset: 5\n    ) {\n      model\n      manufacturer\n      magnification\n      isInUse\n      operatedBy {\n        ... on Astronomer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the model, manufacturer, magnification, usage status, and the name of the astronomer operating the 6th object in the Telescope class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, description, price, in-stock status, and associated review content and rating for the 6th object in the Product class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      description\n      price\n      inStock\n      hasReview {\n        ... on Review {\n          content\n          rating\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, description, price, in-stock status, and associated review content and rating for the 6th object in the Product class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, product, funding, isBootstrapped, and linked founder's name for the 6th object in the Startup class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Startup(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      product\n      funding\n      isBootstrapped\n      founders {\n        ... on Entrepreneur {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, product, funding, isBootstrapped, and linked founder's name for the 6th object in the Startup class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title, description, start time, virtual status, and linked venue's name and capacity for the 6th object in the Events class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Event(\n      limit: 1,\n      offset: 5\n    ) {\n      title\n      description\n      startTime\n      isVirtual\n      atVenue {\n        ... on Venue {\n          name\n          capacity\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title, description, start time, virtual status, and linked venue's name and capacity for the 6th object in the Events class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, founding year, online status, and linked journalist's name and years of experience for the 6th object in the News Outlet class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NewsOutlet(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      foundingYear\n      isOnline\n      hasJournalist {\n        ... on Journalist {\n          name\n          yearsExperience\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, founding year, online status, and linked journalist's name and years of experience for the 6th object in the News Outlet class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title, genre, rating, multiplayer status, and developer's name for the 6th object in the Game class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Game(\n      limit: 1,\n      offset: 5\n    ) {\n      title\n      genre\n      rating\n      isMultiplayer\n      developedBy {\n        ... on Developer {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title, genre, rating, multiplayer status, and developer's name for the 6th object in the Game class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title, medium, year created, sold status, and the name of the creator for the 4th object in the Artwork class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Artwork(\n      limit: 1,\n      offset: 3\n    ) {\n      title\n      medium\n      yearCreated\n      isSold\n      createdBy {\n        ... on Artist {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title, medium, year created, sold status, and the name of the creator for the 4th object in the Artwork class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the make, model, year, repair status, and owner's name for the 6th object in the Car class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car(\n      limit: 1,\n      offset: 5\n    ) {\n      make\n      model\n      year\n      isRepaired\n      ownedBy {\n        ... on Owner {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the make, model, year, repair status, and owner's name for the 6th object in the Car class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the full name, email, phone number, lead status, and associated company name for the 6th object in the Contact class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Contact(\n      limit: 1,\n      offset: 5\n    ) {\n      fullName\n      email\n      phone\n      isLead\n      associatedCompany {\n        ... on Company {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the full name, email, phone number, lead status, and associated company name for the 6th object in the Contact class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, hub airport, fleet size, international status, and flight number with duration for the 6th object in the Airline class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Airline (\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      hubAirport\n      fleetSize\n      isInternational\n      operatesFlight {\n        ... on Flight {\n          flightNumber\n          duration\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, hub airport, fleet size, international status, and flight number with duration for the 6th object in the Airline class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title, summary, availability, and linked author's name for the 6th object in the Books class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Book (\n      limit: 1,\n      offset: 5\n    ) {\n      title\n      summary\n      isAvailable\n      author {\n        ... on Author {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title, summary, availability, and linked author's name for the 6th object in the Books class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, symbol, market cap, stability, and linked exchange's name, country, and founded year for the 6th object in the Cryptocurrency class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Cryptocurrency (\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      symbol\n      marketCap\n      isStableCoin\n      onExchange {\n        ... on Exchange {\n          name\n          country\n          foundedYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, symbol, market cap, stability, and linked exchange's name, country, and founded year for the 6th object in the Cryptocurrency class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, job title, salary, remote status, and linked project's name and budget for the 6th object in the Employee class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Employee(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      jobTitle\n      salary\n      isRemote\n      worksOn {\n        ... on Project {\n          name\n          budget\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, job title, salary, remote status, and linked project's name and budget for the 6th object in the Employee class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, description, price, organic status, and linked category name for the 6th object in the Product class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      description\n      price\n      isOrganic\n      category {\n        ... on Category {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, description, price, organic status, and linked category name for the 6th object in the Product class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, location, founding year, public status, and details of the 6th object in the Museum class, including the title, description, and year of its associated exhibit.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Museum(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      location\n      foundingYear\n      isPublic\n      hasExhibit {\n        ... on Exhibit {\n          title\n          description\n          year\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, location, founding year, public status, and details of the 6th object in the Museum class, including the title, description, and year of its associated exhibit.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, city, wins, isChampion, and linked league's name for the 6th object in the Team class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      city\n      wins\n      isChampion\n      inLeague {\n        ... on League {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, city, wins, isChampion, and linked league's name for the 6th object in the Team class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, menu, year founded, franchise status, and linked neighborhood name for the 6th Coffee Shop object.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CoffeeShop(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      menu\n      yearFounded\n      isFranchise\n      locatedIn {\n        ... on Neighborhood {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, menu, year founded, franchise status, and linked neighborhood name for the 6th Coffee Shop object.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the address, description, price, sold status, and the name of the agent who listed the 6th object in the House class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    House(\n      limit: 1,\n      offset: 5\n    ) {\n      address\n      description\n      price\n      isSold\n      listedBy {\n        ... on Agent {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the address, description, price, sold status, and the name of the agent who listed the 6th object in the House class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, description, duration in days, vegetarian status, and the linked food item's name and calories for the 6th object in the DietPlan class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DietPlan(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      description\n      durationDays\n      isVegetarian\n      contains {\n        ... on FoodItem {\n          itemName\n          calories\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, description, duration in days, vegetarian status, and the linked food item's name and calories for the 6th object in the DietPlan class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the beer name, tasting notes, alcohol content, seasonal availability, and linked brewery name for the 6th object in the CraftBeer class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CraftBeer(\n      limit: 1,\n      offset: 5\n    ) {\n      beerName\n      tastingNotes\n      alcoholContent\n      isSeasonal\n      brewery {\n        ... on Brewery {\n          breweryName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the beer name, tasting notes, alcohol content, seasonal availability, and linked brewery name for the 6th object in the CraftBeer class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, services, average rating, and open status for the 6th object in the Spa class. Also, include the name, description, and latitude of the location where the spa is located.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Spa(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      services\n      averageRating\n      isOpen\n      locatedIn {\n        ... on Location {\n          name\n          description\n          latitude\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, services, average rating, and open status for the 6th object in the Spa class. Also, include the name, description, and latitude of the location where the spa is located.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title, description, price, and availability of the 6th object in the Course class. Also, include the name of the instructor associated with the course.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Course(\n      limit: 1,\n      offset: 5\n    ) {\n      title\n      description\n      price\n      isFree\n      taughtBy {\n        ... on Instructor {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title, description, price, and availability of the 6th object in the Course class. Also, include the name of the instructor associated with the course.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title, abstract, year published, peer review status, and the name of the conference where the paper was presented for the 6th object in the Papers class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Paper(\n      limit: 1,\n      offset: 5\n    ) {\n      title\n      abstract\n      yearPublished\n      isPeerReviewed\n      presentedAt {\n        ... on Conference {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title, abstract, year published, peer review status, and the name of the conference where the paper was presented for the 6th object in the Papers class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title, description, salary, remote status, and the name of the company that posted the 6th object in the JobListing class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JobListing(\n      limit: 1,\n      offset: 5\n    ) {\n      title\n      description\n      salary\n      isRemote\n      postedBy {\n        ... on Company {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title, description, salary, remote status, and the name of the company that posted the 6th object in the JobListing class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, description, year released, compilation status, and details of the software projects that use the 6th object in the Programming Language class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ProgrammingLanguage(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      description\n      yearReleased\n      isCompiled\n      usedIn {\n        ... on SoftwareProject {\n          projectName\n          repositoryURL\n          linesOfCode\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, description, year released, compilation status, and details of the software projects that use the 6th object in the Programming Language class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many Historical Events have a year greater than 1800.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    HistoricalEvent(where: {\n      path: [\"year\"],\n      operator: GreaterThan,\n      valueInt: 1800\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many Historical Events have a year greater than 1800.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many TV series have more than 5 seasons.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    TVSeries(where: {\n      path: [\"seasons\"],\n      operator: GreaterThan,\n      valueInt: 5\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many TV series have more than 5 seasons.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many workouts have a duration greater than 30.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Workout(where: {\n      path: [\"duration\"],\n      operator: GreaterThan,\n      valueInt: 30\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many workouts have a duration greater than 30.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many songs have a duration greater than 180.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Song(where: {\n      path: [\"duration\"],\n      operator: GreaterThan,\n      valueInt: 180\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many songs have a duration greater than 180.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many recipes have a prepTime greater than 30.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Recipe(where: {\n      path: [\"prepTime\"],\n      operator: GreaterThan,\n      valueInt: 30\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many recipes have a prepTime greater than 30.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many destinations have an average temperature greater than 25.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Destination(where: {\n      path: [\"averageTemperature\"],\n      operator: GreaterThan,\n      valueNumber: 25\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many destinations have an average temperature greater than 25.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many YogaPoses have a complexityLevel greater than 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    YogaPose(where: {\n      path: [\"complexityLevel\"],\n      operator: GreaterThan,\n      valueInt: 5\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many YogaPoses have a complexityLevel greater than 5.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many movies have a duration greater than 120 minutes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Movie(where: {\n      path: [\"duration\"],\n      operator: GreaterThan,\n      valueInt: 120\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many movies have a duration greater than 120 minutes.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many AI models have an accuracy greater than 0.8.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    AIModel(where: {\n      path: [\"accuracy\"],\n      operator: GreaterThan,\n      valueNumber: 0.8\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many AI models have an accuracy greater than 0.8.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many legal cases have a year greater than 2010.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    LegalCase(\n      where: {\n        path: [\"year\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many legal cases have a year greater than 2010.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many OutdoorGear items have a weight greater than 500.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    OutdoorGear(where: {\n      path: [\"weight\"],\n      operator: GreaterThan,\n      valueNumber: 500\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many OutdoorGear items have a weight greater than 500.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many restaurants have a seating capacity greater than 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Restaurant(\n      where: {\n        path: [\"seatingCapacity\"],\n        operator: GreaterThan,\n        valueInt: 100\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many restaurants have a seating capacity greater than 100.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many posts have more than 100 likes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Post(\n      where: {\n        path: [\"likes\"],\n        operator: GreaterThan,\n        valueInt: 100\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many posts have more than 100 likes.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many animals have an age greater than 2.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Animal(where: {\n      path: [\"age\"],\n      operator: GreaterThan,\n      valueInt: 2\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many animals have an age greater than 2.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many wines have a vintage year greater than 2010.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Wine(\n      where: {\n        path: [\"vintageYear\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many wines have a vintage year greater than 2010.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of patients whose age is greater than 30.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Patient(where: {\n      path: [\"age\"],\n      operator: GreaterThan,\n      valueInt: 30\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of patients whose age is greater than 30.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many products have a price less than 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Product(where: {\n      path: [\"price\"],\n      operator: LessThan,\n      valueNumber: 100\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many products have a price less than 100.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of events that are virtual.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Event(where: {\n      path: [\"isVirtual\"],\n      operator: Equal,\n      valueBoolean: true\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of events that are virtual.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many news outlets were founded before the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    NewsOutlet(where: {\n      path: [\"foundingYear\"],\n      operator: LessThan,\n      valueInt: 2000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many news outlets were founded before the year 2000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of contacts that are leads.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Contact(\n      where: {\n        path: [\"isLead\"],\n        operator: Equal,\n        valueBoolean: true\n      }\n    ) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of contacts that are leads.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many airlines have a fleet size greater than 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Airline(where: {\n      path: [\"fleetSize\"],\n      operator: GreaterThan,\n      valueInt: 100\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many airlines have a fleet size greater than 100.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many employees have a salary greater than $50,000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Employee(where: {\n      path: [\"salary\"],\n      operator: GreaterThan,\n      valueNumber: 50000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many employees have a salary greater than $50,000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many spas have an average rating greater than 4.5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Spa(where: {\n      path: [\"averageRating\"],\n      operator: GreaterThan,\n      valueNumber: 4.5\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many spas have an average rating greater than 4.5.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many papers were published after the year 2010.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Paper(where: {\n      path: [\"yearPublished\"],\n      operator: GreaterThan,\n      valueInt: 2010\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many papers were published after the year 2010.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the historical event objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HistoricalEvent {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the historical event objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HistoricalEvent\",\n\"description\": \"Information about historical events\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"eventName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the historical event\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the event\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the event occurred\"\n},\n{\n\"name\": \"hadSignificantImpact\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the event had a significant impact\"\n},\n{\n\"name\": \"involvedCountries\",\n\"dataType\": [\"Country\"],\n\"description\": \"Countries involved in the event\"\n}{\n\"class\": \"Country\",\n\"description\": \"Information about countries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"countryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the country\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the country\"\n}}}", "schemaPath": "historicalevent.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the TV series objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TVSeries {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the TV series objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TVSeries\",\n\"description\": \"Information about a television series\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the series\"\n},\n{\n\"name\": \"synopsis\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief synopsis of the series\"\n},\n{\n\"name\": \"seasons\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of seasons\"\n},\n{\n\"name\": \"isOnAir\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the series currently airing?\"\n},\n{\n\"name\": \"hasActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"Actors in the series\"\n}{\n\"class\": \"Actor\",\n\"description\": \"Actors in various roles\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the actor\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the actor\"\n}}}", "schemaPath": "tvseries.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the workout objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Workout {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the workout objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Workout\",\n\"description\": \"A fitness workout session.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the workout.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the workout.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the workout in minutes.\"\n},\n{\n\"name\": \"isGroup\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a group workout?\"\n},\n{\n\"name\": \"usesEquipment\",\n\"dataType\": [\"Equipment\"],\n\"description\": \"Equipment used in the workout.\"\n}{\n\"class\": \"Equipment\",\n\"description\": \"Fitness equipment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the equipment.\"\n},\n{\n\"name\": \"quantity\",\n\"dataType\": [\"int\"],\n\"description\": \"Quantity available.\"\n}}}", "schemaPath": "workouttracker.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the song objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Song {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the song objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Song\",\n\"description\": \"A song.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the song.\"\n},\n{\n\"name\": \"lyrics\",\n\"dataType\": [\"text\"],\n\"description\": \"Lyrics of the song.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the song in seconds.\"\n},\n{\n\"name\": \"isExplicit\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the song explicit?\"\n},\n{\n\"name\": \"inAlbum\",\n\"dataType\": [\"Album\"],\n\"description\": \"Album containing the song.\"\n}{\n\"class\": \"Album\",\n\"description\": \"A music album.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the album.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the album was released.\"\n}}}", "schemaPath": "music.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the plant objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the plant objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the recipe objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Recipe {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the recipe objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Recipe\",\n\"description\": \"A cooking recipe.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the recipe.\"\n},\n{\n\"name\": \"instructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Cooking instructions.\"\n},\n{\n\"name\": \"prepTime\",\n\"dataType\": [\"int\"],\n\"description\": \"Preparation time in minutes.\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the recipe vegetarian?\"\n},\n{\n\"name\": \"usesIngredient\",\n\"dataType\": [\"Ingredient\"],\n\"description\": \"Ingredients used in the recipe.\"\n}{\n\"class\": \"Ingredient\",\n\"description\": \"An ingredient used in recipes.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ingredient.\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per 100g.\"\n}}}", "schemaPath": "recipes.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the destination objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Destination {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the destination objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Destination\",\n\"description\": \"A travel destination.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the destination.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the destination.\"\n},\n{\n\"name\": \"averageTemperature\",\n\"dataType\": [\"number\"],\n\"description\": \"Average temperature.\"\n},\n{\n\"name\": \"isPopular\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a popular destination?\"\n},\n{\n\"name\": \"visitedBy\",\n\"dataType\": [\"Traveler\"],\n\"description\": \"Travelers who visited this destination.\"\n}{\n\"class\": \"Traveler\",\n\"description\": \"A person who travels.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the traveler.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the traveler.\"\n}}}", "schemaPath": "traveldestination.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the aquarium objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Aquarium {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the aquarium objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the yoga pose objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    YogaPose {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the yoga pose objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"YogaPose\",\n\"description\": \"Different yoga poses\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga pose\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the yoga pose\"\n},\n{\n\"name\": \"complexityLevel\",\n\"dataType\": [\"int\"],\n\"description\": \"Complexity level on a scale of 1-10\"\n},\n{\n\"name\": \"isForBeginners\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the pose is suitable for beginners\"\n},\n{\n\"name\": \"fromYogaStyle\",\n\"dataType\": [\"YogaStyle\"],\n\"description\": \"The yoga style this pose belongs to\"\n}{\n\"class\": \"YogaStyle\",\n\"description\": \"Styles of Yoga\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"styleName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the yoga style\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Origin country or tradition\"\n},\n{\n\"name\": \"popularity\",\n\"dataType\": [\"int\"],\n\"description\": \"Popularity on a scale of 1-10\"\n}}}", "schemaPath": "yogapose.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the PodClip objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PodClip {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the PodClip objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the instrument objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Instrument {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the instrument objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the board game objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BoardGame {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the board game objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the weather station objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeatherStation {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the weather station objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the movie objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Movie {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the movie objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Movie\",\n\"description\": \"A movie in the database.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the movie.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the movie.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The duration of the movie in minutes.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability for streaming.\"\n},\n{\n\"name\": \"leadActor\",\n\"dataType\": [\"Actor\"],\n\"description\": \"The lead actor in the movie.\"\n}{\n\"class\": \"Actor\",\n\"description\": \"An actor in movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the actor.\"\n},\n{\n\"name\": \"awardsWon\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of awards won.\"\n}}}", "schemaPath": "movies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the AIModel objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    AIModel {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the AIModel objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"AIModel\",\n\"description\": \"A machine learning model.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"modelName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the machine learning model.\"\n},\n{\n\"name\": \"application\",\n\"dataType\": [\"text\"],\n\"description\": \"Application area of the machine learning model.\"\n},\n{\n\"name\": \"accuracy\",\n\"dataType\": [\"number\"],\n\"description\": \"Model's accuracy score.\"\n},\n{\n\"name\": \"isSupervised\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a supervised learning model?\"\n},\n{\n\"name\": \"basedOn\",\n\"dataType\": [\"Algorithm\"],\n\"description\": \"Algorithm the model is based on.\"\n}{\n\"class\": \"Algorithm\",\n\"description\": \"An algorithm used for machine learning.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the algorithm.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the algorithm.\"\n},\n{\n\"name\": \"yearDeveloped\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the algorithm was developed.\"\n}}}", "schemaPath": "AIModels.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the car objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the car objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the legal case objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LegalCase {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the legal case objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LegalCase\",\n\"description\": \"Details about a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"caseTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the legal case\"\n},\n{\n\"name\": \"caseSummary\",\n\"dataType\": [\"text\"],\n\"description\": \"Summary of the legal case\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the case was filed\"\n},\n{\n\"name\": \"isOngoing\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the case is ongoing or not\"\n},\n{\n\"name\": \"involvedParty\",\n\"dataType\": [\"Party\"],\n\"description\": \"Parties involved in the case\"\n}{\n\"class\": \"Party\",\n\"description\": \"Entities involved in a legal case\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the party\"\n},\n{\n\"name\": \"role\",\n\"dataType\": [\"text\"],\n\"description\": \"Role in the case, e.g., Plaintiff, Defendant\"\n},\n{\n\"name\": \"numberOfCases\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of cases this party has been involved in\"\n}}}", "schemaPath": "legalcases.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the smart device objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SmartDevice {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the smart device objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the outdoor gear objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OutdoorGear {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the outdoor gear objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OutdoorGear\",\n\"description\": \"An outdoor gear item.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gearName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gear.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the gear.\"\n},\n{\n\"name\": \"weight\",\n\"dataType\": [\"number\"],\n\"description\": \"Weight of the gear in grams.\"\n},\n{\n\"name\": \"isWaterproof\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the gear is waterproof.\"\n},\n{\n\"name\": \"supplier\",\n\"dataType\": [\"Supplier\"],\n\"description\": \"The supplier of the gear.\"\n}{\n\"class\": \"Supplier\",\n\"description\": \"A supplier of outdoor gear.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"supplierName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the supplier.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the supplier was established.\"\n}}}", "schemaPath": "outdoorgear.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the restaurant objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Restaurant {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the restaurant objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Restaurant\",\n\"description\": \"A fine dining restaurant.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the restaurant.\"\n},\n{\n\"name\": \"cuisine\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine served.\"\n},\n{\n\"name\": \"seatingCapacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Seating capacity of the restaurant.\"\n},\n{\n\"name\": \"hasMichelinStar\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the restaurant have a Michelin Star?\"\n},\n{\n\"name\": \"headChef\",\n\"dataType\": [\"Chef\"],\n\"description\": \"Head chef of the restaurant.\"\n}{\n\"class\": \"Chef\",\n\"description\": \"A professional chef.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chef.\"\n},\n{\n\"name\": \"specialty\",\n\"dataType\": [\"text\"],\n\"description\": \"Specialty cuisine of the chef.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as a chef.\"\n}}}", "schemaPath": "finedining.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the post objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Post {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the post objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Post\",\n\"description\": \"A post on the social media platform.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The content of the post.\"\n},\n{\n\"name\": \"hashtags\",\n\"dataType\": [\"text[]\"],\n\"description\": \"Hashtags associated with the post.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the post.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the post is public or private.\"\n},\n{\n\"name\": \"comments\",\n\"dataType\": [\"Comment\"],\n\"description\": \"Comments on the post.\"\n}{\n\"class\": \"Comment\",\n\"description\": \"A comment on a post.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"text\",\n\"dataType\": [\"text\"],\n\"description\": \"The text of the comment.\"\n},\n{\n\"name\": \"likes\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of likes on the comment.\"\n}}}", "schemaPath": "socialmedia.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the animal objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Animal {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the animal objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Animal\",\n\"description\": \"An animal in a shelter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the animal.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the animal.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the animal.\"\n},\n{\n\"name\": \"isAdopted\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the animal adopted?\"\n},\n{\n\"name\": \"adoptedBy\",\n\"dataType\": [\"Adopter\"],\n\"description\": \"The adopter of the animal.\"\n}{\n\"class\": \"Adopter\",\n\"description\": \"An adopter.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the adopter.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"Age of the adopter.\"\n}}}", "schemaPath": "animalshelter.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the fashion brand objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FashionBrand {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the fashion brand objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the code repository objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CodeRepository {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the code repository objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the wine objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Wine {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the wine objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Wine\",\n\"description\": \"Information about different types of wine\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the wine variety\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical origin of the wine\"\n},\n{\n\"name\": \"grapeVariety\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of grape used to make the wine\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"The tasting notes often associated with the wine\"\n},\n{\n\"name\": \"vintageYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The vintage year of the wine\"\n},\n{\n\"name\": \"isRed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the wine is a red wine\"\n},\n{\n\"name\": \"relatedWinery\",\n\"dataType\": [\"Winery\"],\n\"description\": \"The winery that produces this wine\"\n}{\n\"class\": \"Winery\",\n\"description\": \"Information about wineries\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the winery\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographical location of the winery\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the winery was founded\"\n},\n{\n\"name\": \"producesWine\",\n\"dataType\": [\"Wine\"],\n\"description\": \"The wines produced by this winery\"\n}}}", "schemaPath": "wines.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the patient objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Patient {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the patient objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Patient\",\n\"description\": \"A healthcare patient.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the patient.\"\n},\n{\n\"name\": \"diagnosis\",\n\"dataType\": [\"text\"],\n\"description\": \"The medical diagnosis.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the patient.\"\n},\n{\n\"name\": \"isInsured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Insurance status of the patient.\"\n},\n{\n\"name\": \"primaryDoctor\",\n\"dataType\": [\"Doctor\"],\n\"description\": \"The primary doctor treating the patient.\"\n}{\n\"class\": \"Doctor\",\n\"description\": \"A healthcare doctor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The years of experience.\"\n}}}", "schemaPath": "healthcare.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the telescope objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Telescope {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the telescope objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Telescope\",\n\"description\": \"A telescope for astronomical observations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"Model of the telescope.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"text\"],\n\"description\": \"Manufacturer of the telescope.\"\n},\n{\n\"name\": \"magnification\",\n\"dataType\": [\"number\"],\n\"description\": \"Magnification capability of the telescope.\"\n},\n{\n\"name\": \"isInUse\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the telescope currently in use?\"\n},\n{\n\"name\": \"operatedBy\",\n\"dataType\": [\"Astronomer\"],\n\"description\": \"Astronomer operating the telescope.\"\n}{\n\"class\": \"Astronomer\",\n\"description\": \"A professional astronomer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the astronomer.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in the field of astronomy.\"\n}}}", "schemaPath": "astrology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the product objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the product objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product in an online shop.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Product name.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Product description.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the product.\"\n},\n{\n\"name\": \"inStock\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the product in stock?\"\n},\n{\n\"name\": \"hasReview\",\n\"dataType\": [\"Review\"],\n\"description\": \"Product reviews.\"\n}{\n\"class\": \"Review\",\n\"description\": \"A product review.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"Review content.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"Product rating.\"\n}}}", "schemaPath": "ecommerce.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the startup objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Startup {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the startup objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the event objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Event {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the event objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Event\",\n\"description\": \"An event.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the event.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the event.\"\n},\n{\n\"name\": \"startTime\",\n\"dataType\": [\"date\"],\n\"description\": \"Start time of the event.\"\n},\n{\n\"name\": \"isVirtual\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the event virtual?\"\n},\n{\n\"name\": \"atVenue\",\n\"dataType\": [\"Venue\"],\n\"description\": \"Venue of the event.\"\n}{\n\"class\": \"Venue\",\n\"description\": \"A venue for events.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum capacity.\"\n}}}", "schemaPath": "event.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the news outlet objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NewsOutlet {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the news outlet objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NewsOutlet\",\n\"description\": \"A media organization that publishes news.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the news outlet.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the news outlet was founded.\"\n},\n{\n\"name\": \"isOnline\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the outlet operates online.\"\n},\n{\n\"name\": \"hasJournalist\",\n\"dataType\": [\"Journalist\"],\n\"description\": \"Journalists working for the outlet.\"\n}{\n\"class\": \"Journalist\",\n\"description\": \"An individual who reports and writes news stories.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the journalist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the journalist has been working.\"\n}}}", "schemaPath": "news.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the game objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Game {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the game objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the artwork objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Artwork {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the artwork objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the car objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Car {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the car objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the contact objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Contact {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the contact objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Contact\",\n\"description\": \"Individual contacts managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"The full name of the contact\"\n},\n{\n\"name\": \"email\",\n\"dataType\": [\"text\"],\n\"description\": \"The email address of the contact\"\n},\n{\n\"name\": \"phone\",\n\"dataType\": [\"text\"],\n\"description\": \"The phone number of the contact\"\n},\n{\n\"name\": \"isLead\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this contact is a sales lead\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company where this contact works\"\n}{\n\"class\": \"Company\",\n\"description\": \"Companies managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company\"\n},\n{\n\"name\": \"industry\",\n\"dataType\": [\"text\"],\n\"description\": \"The industry in which the company operates\"\n},\n{\n\"name\": \"revenue\",\n\"dataType\": [\"int\"],\n\"description\": \"The annual revenue of the company\"\n},\n{\n\"name\": \"hasContacts\",\n\"dataType\": [\"Contact\"],\n\"description\": \"Contacts associated with this company\"\n}{\n\"class\": \"Deal\",\n\"description\": \"Sales deals managed in the CRM\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the deal\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the deal\"\n},\n{\n\"name\": \"value\",\n\"dataType\": [\"int\"],\n\"description\": \"The value of the deal in dollars\"\n},\n{\n\"name\": \"isClosed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the deal is closed or not\"\n},\n{\n\"name\": \"associatedCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company associated with this deal\"\n}}}", "schemaPath": "crm.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the airline objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Airline {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the airline objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Airline\",\n\"description\": \"An organization providing air transport services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the airline.\"\n},\n{\n\"name\": \"hubAirport\",\n\"dataType\": [\"text\"],\n\"description\": \"Main hub airport.\"\n},\n{\n\"name\": \"fleetSize\",\n\"dataType\": [\"int\"],\n\"description\": \"Size of the fleet of airplanes.\"\n},\n{\n\"name\": \"isInternational\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the airline offer international flights?\"\n},\n{\n\"name\": \"operatesFlight\",\n\"dataType\": [\"Flight\"],\n\"description\": \"Flights operated by the airline.\"\n}{\n\"class\": \"Flight\",\n\"description\": \"A specific flight operated by an airline.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"flightNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The flight number.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the flight in minutes.\"\n}}}", "schemaPath": "airline.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the book objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Book {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the book objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the cryptocurrency objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Cryptocurrency {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the cryptocurrency objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the employee objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Employee {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the employee objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Employee\",\n\"description\": \"An employee in a company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the employee.\"\n},\n{\n\"name\": \"jobTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title of the employee.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary of the employee.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the employee remote?\"\n},\n{\n\"name\": \"worksOn\",\n\"dataType\": [\"Project\"],\n\"description\": \"Projects the employee is working on.\"\n}{\n\"class\": \"Project\",\n\"description\": \"A project in the company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the project.\"\n},\n{\n\"name\": \"budget\",\n\"dataType\": [\"number\"],\n\"description\": \"Budget allocated for the project.\"\n}}}", "schemaPath": "employees.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the product objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Product {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the product objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the museum objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Museum {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the museum objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the team objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Team {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the team objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the coffee shop objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CoffeeShop {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the coffee shop objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the house objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    House {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the house objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the diet plan objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DietPlan {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the diet plan objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the CraftBeer objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CraftBeer {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the CraftBeer objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the spa objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Spa {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the spa objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Spa\",\n\"description\": \"A facility for wellness and relaxation.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the spa.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"text\"],\n\"description\": \"Services offered by the spa.\"\n},\n{\n\"name\": \"averageRating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average customer rating.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the spa currently open?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Location\"],\n\"description\": \"Location where the spa is situated.\"\n}{\n\"class\": \"Location\",\n\"description\": \"A geographical location.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the location.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the location.\"\n},\n{\n\"name\": \"latitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Latitude of the location.\"\n}}}", "schemaPath": "spa.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the course objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Course {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the course objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the paper objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Paper {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the paper objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Paper\",\n\"description\": \"A research paper.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the research paper.\"\n},\n{\n\"name\": \"abstract\",\n\"dataType\": [\"text\"],\n\"description\": \"Abstract of the paper.\"\n},\n{\n\"name\": \"yearPublished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the paper was published.\"\n},\n{\n\"name\": \"isPeerReviewed\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the paper peer-reviewed?\"\n},\n{\n\"name\": \"presentedAt\",\n\"dataType\": [\"Conference\"],\n\"description\": \"Conference where the paper was presented.\"\n}{\n\"class\": \"Conference\",\n\"description\": \"A scientific conference.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the conference.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the conference took place.\"\n}}}", "schemaPath": "scientificpapers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the job listing objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JobListing {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the job listing objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the programming language objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ProgrammingLanguage {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the programming language objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the chemical compounds with a hybrid search of 'water', please use an alpha value of 0.25 in the hybrid search, and show the compound name, formula, molar mass, and information about the elements it contains including the element name, symbol, atomic number, and whether it is a metal.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ChemicalCompound(\n      hybrid: {\n        query: \"water\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      compoundName\n      formula\n      molarMass\n      containsElements {\n        ... on ChemicalElement {\n          elementName\n          symbol\n          atomicNumber\n          isMetal\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the chemical compounds with a hybrid search of 'water', please use an alpha value of 0.25 in the hybrid search, and show the compound name, formula, molar mass, and information about the elements it contains including the element name, symbol, atomic number, and whether it is a metal.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the marine species with a hybrid search of 'coral reef', please use an alpha value of 0.25 in the hybrid search, and show the species name, habitat, conservation status, and researcher's name and research area.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MarineSpecies(\n      hybrid: {\n        query: \"coral reef\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      speciesName\n      habitat\n      conservationStatus\n      researcher {\n        ... on MarineBiologist {\n          biologistName\n          researchArea\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the marine species with a hybrid search of 'coral reef', please use an alpha value of 0.25 in the hybrid search, and show the species name, habitat, conservation status, and researcher's name and research area.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the robots with a hybrid search of 'autonomous', please use an alpha value of 0.25 in the hybrid search, and show the robot name, function, and manufacturer's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Robot(\n      hybrid: {\n        query: \"autonomous\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      robotName\n      function\n      manufacturer {\n        ... on RoboticsCompany {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the robots with a hybrid search of 'autonomous', please use an alpha value of 0.25 in the hybrid search, and show the robot name, function, and manufacturer's company name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}", "schemaPath": "robotics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the civilizations with a hybrid search of 'ancient', please use an alpha value of 0.25 in the hybrid search, and show the civilization name, time period, notable technologies, languages, and major ruins' site name and location.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Civilization(\n      hybrid: {\n        query: \"ancient\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      civilizationName\n      timePeriod\n      notableTechnologies\n      languages\n      majorRuins {\n        ... on Ruins {\n          siteName\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the civilizations with a hybrid search of 'ancient', please use an alpha value of 0.25 in the hybrid search, and show the civilization name, time period, notable technologies, languages, and major ruins' site name and location.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}", "schemaPath": "ancientcivilization.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the streaming platforms with a hybrid search of 'Netflix', please use an alpha value of 0.25 in the hybrid search, and show the platform name, overview, subscription cost, available regions, and top shows' title, genre, release year, and description.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    StreamingPlatform(\n      hybrid: {\n        query: \"Netflix\",\n        alpha: 0.25\n      },\n      limit: 3\n    ) {\n      platformName\n      overview\n      subscriptionCost\n      availableRegions\n      topShows {\n        ... on Show {\n          title\n          genre\n          releaseYear\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the streaming platforms with a hybrid search of 'Netflix', please use an alpha value of 0.25 in the hybrid search, and show the platform name, overview, subscription cost, available regions, and top shows' title, genre, release year, and description.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the cosmetic products with a hybrid search of 'lipstick', please use an alpha value of 0.25 in the hybrid search, and show the product name, brand name, type, shade, ingredients, and whether it is vegan.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CosmeticProduct(\n      hybrid: {\n        query: \"lipstick\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      productName\n      brand {\n        ... on Brand {\n          brandName\n        }\n      }\n      type\n      shade\n      ingredients\n      isVegan\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the cosmetic products with a hybrid search of 'lipstick', please use an alpha value of 0.25 in the hybrid search, and show the product name, brand name, type, shade, ingredients, and whether it is vegan.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}", "schemaPath": "cosmetics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the energy sources with a hybrid search of 'solar', please use an alpha value of 0.25 in the hybrid search, and show the source type, description, annual output, residential availability, and provider's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EnergySource(\n      hybrid: {\n        query: \"solar\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      sourceType\n      description\n      annualOutput\n      isResidential\n      provider {\n        ... on EnergyProvider {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the energy sources with a hybrid search of 'solar', please use an alpha value of 0.25 in the hybrid search, and show the source type, description, annual output, residential availability, and provider's company name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the plants with a hybrid search of 'rose', please use an alpha value of 0.25 in the hybrid search, and show the common name, scientific name, habitat, growth habit, endangered status, and fertilizer needs including the type and application frequency.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      hybrid: {\n        query: \"rose\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      commonName\n      scientificName\n      habitat\n      growthHabit\n      isEndangered\n      fertilizerNeeds {\n        ... on Fertilizer {\n          type\n          applicationFrequency\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the plants with a hybrid search of 'rose', please use an alpha value of 0.25 in the hybrid search, and show the common name, scientific name, habitat, growth habit, endangered status, and fertilizer needs including the type and application frequency.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}", "schemaPath": "plants.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the people with a hybrid search of 'John Doe', please use an alpha value of 0.25 in the hybrid search, and show the full name, birth year, deceased status, parents' full names, DNA test provider, match percentage, and whether maternal and paternal lines are tested.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Person(\n      hybrid: {\n        query: \"John Doe\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      fullName\n      birthYear\n      isDeceased\n      parents {\n        ... on Person {\n          fullName\n        }\n      }\n      dnatest {\n        ... on DNATestResult {\n          testProvider\n          matchPercentage\n          isMaternalLineTested\n          isPaternalLineTested\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the people with a hybrid search of 'John Doe', please use an alpha value of 0.25 in the hybrid search, and show the full name, birth year, deceased status, parents' full names, DNA test provider, match percentage, and whether maternal and paternal lines are tested.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the candles with a hybrid search of 'lavender', please use an alpha value of 0.25 in the hybrid search, and show the candle name, scent, burn time, price, manufacturer's name, location, and contact information.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Candle(\n      hybrid: {\n        query: \"lavender\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      candleName\n      scent\n      burnTime\n      price\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the candles with a hybrid search of 'lavender', please use an alpha value of 0.25 in the hybrid search, and show the candle name, scent, burn time, price, manufacturer's name, location, and contact information.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "candles.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the comedy specials with a hybrid search of 'funny', please use an alpha value of 0.25 in the hybrid search, and show the special title, description, duration, and comedian's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ComedySpecial(\n      hybrid: {\n        query: \"funny\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      specialTitle\n      description\n      duration\n      comedian {\n        ... on Comedian {\n          comedianName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the comedy specials with a hybrid search of 'funny', please use an alpha value of 0.25 in the hybrid search, and show the special title, description, duration, and comedian's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the mobile apps with a hybrid search of 'social media', please use an alpha value of 0.25 in the hybrid search, and show the app name, description, developer, rating, whether it is free, and the supported operating system's name and version.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MobileApp(\n      hybrid: {\n        query: \"social media\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      appName\n      description\n      developer\n      rating\n      isFree\n      supportedOS {\n        ... on OperatingSystem {\n          osName\n          version\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the mobile apps with a hybrid search of 'social media', please use an alpha value of 0.25 in the hybrid search, and show the app name, description, developer, rating, whether it is free, and the supported operating system's name and version.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}", "schemaPath": "mobileapplications.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the magic tricks with a hybrid search of 'levitation', please use an alpha value of 0.25 in the hybrid search, and show the trick name, description, difficulty level, and performer's magician name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MagicTrick(\n      hybrid: {\n        query: \"levitation\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      trickName\n      description\n      difficultyLevel\n      performer {\n        ... on Magician {\n          magicianName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the magic tricks with a hybrid search of 'levitation', please use an alpha value of 0.25 in the hybrid search, and show the trick name, description, difficulty level, and performer's magician name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the fireworks with a hybrid search of 'sparklers', please use an alpha value of 0.25 in the hybrid search, and show the firework name, effects, duration, safety guidelines, manufacturer's name, location, and contact.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Firework(\n      hybrid: {\n        query: \"sparklers\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      fireworkName\n      effects\n      duration\n      safetyGuidelines\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the fireworks with a hybrid search of 'sparklers', please use an alpha value of 0.25 in the hybrid search, and show the firework name, effects, duration, safety guidelines, manufacturer's name, location, and contact.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "fireworks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the esports teams with a hybrid search of 'competitive', please use an alpha value of 0.25 in the hybrid search. Show me the team name, members' player name, nickname, game specialization, years active, retired status, games played, tournament wins count, and active status.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EsportsTeam(\n      hybrid: {\n        query: \"competitive\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      teamName\n      members {\n        ... on Player {\n          playerName\n          nickname\n          gameSpecialization\n          yearsActive\n          isRetired\n        }\n      }\n      gamesPlayed\n      tournamentWinsCount\n      isActive\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the esports teams with a hybrid search of 'competitive', please use an alpha value of 0.25 in the hybrid search. Show me the team name, members' player name, nickname, game specialization, years active, retired status, games played, tournament wins count, and active status.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the doctors specializing in cardiology, please use an alpha value of 0.25 in the hybrid search, and show their names, specializations, years of experience, clinic names, locations, and operational hours.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Doctor(\n      hybrid: {\n        query: \"cardiology\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      doctorName\n      specialization\n      yearsOfExperience\n      clinic {\n        ... on Clinic {\n          clinicName\n          location\n          operationalHours\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the doctors specializing in cardiology, please use an alpha value of 0.25 in the hybrid search, and show their names, specializations, years of experience, clinic names, locations, and operational hours.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the photographers with a hybrid search of 'portrait', please use an alpha value of 0.25 in the hybrid search, and show the full name, bio, years active, and specialization name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Photographer(\n      hybrid: {\n        query: \"portrait\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      fullName\n      bio\n      yearsActive\n      specialization {\n        ... on PhotographyGenre {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the photographers with a hybrid search of 'portrait', please use an alpha value of 0.25 in the hybrid search, and show the full name, bio, years active, and specialization name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the colleges with a hybrid search of 'engineering', please use an alpha value of 0.25 in the hybrid search, and show the college name, location, established year, description, and the details of the courses including course name, duration, and description. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    College(\n      hybrid: {\n        query: \"engineering\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      collegeName\n      location\n      establishedYear\n      description\n      courses {\n        ... on Course {\n          courseName\n          duration\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the colleges with a hybrid search of 'engineering', please use an alpha value of 0.25 in the hybrid search, and show the college name, location, established year, description, and the details of the courses including course name, duration, and description. Limit the results to 5.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the home appliances with a hybrid search of 'refrigerator', please use an alpha value of 0.25 in the hybrid search, and show the appliance name, brand, type, energy rating, whether it is a smart device, price, warranty duration, and warranty coverage.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HomeAppliance(\n      hybrid: {\n        query: \"refrigerator\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      applianceName\n      brand\n      type\n      energyRating\n      isSmartDevice\n      price\n      warranty {\n        ... on Warranty {\n          duration\n          coverage\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the home appliances with a hybrid search of 'refrigerator', please use an alpha value of 0.25 in the hybrid search, and show the appliance name, brand, type, energy rating, whether it is a smart device, price, warranty duration, and warranty coverage.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the VR experiences with a hybrid search of 'action', please use an alpha value of 0.25 in the hybrid search, and show the title, developer's name, genre, release year, and whether it is multiplayer.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    VRExperience(\n      hybrid: {\n        query: \"action\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      title\n      developer {\n        ... on Developer {\n          name\n        }\n      }\n      genre\n      releaseYear\n      isMultiplayer\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the VR experiences with a hybrid search of 'action', please use an alpha value of 0.25 in the hybrid search, and show the title, developer's name, genre, release year, and whether it is multiplayer.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the toys with a hybrid search of 'action figure', please use an alpha value of 0.25 in the hybrid search, and show the toy name, brand, recommended age, battery-operated status, price, and related board game's name, description, and number of players.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Toy(\n      hybrid: {\n        query: \"action figure\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      toyName\n      brand\n      recommendedAge\n      isBatteryOperated\n      price\n      relatedGame {\n        ... on BoardGame {\n          gameName\n          description\n          numberOfPlayers\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the toys with a hybrid search of 'action figure', please use an alpha value of 0.25 in the hybrid search, and show the toy name, brand, recommended age, battery-operated status, price, and related board game's name, description, and number of players.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the drugs with a hybrid search of 'pain relief', please use an alpha value of 0.25 in the hybrid search, and show the drug name, active ingredient, approval year, over-the-counter status, and manufacturer's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Drug(\n      hybrid: {\n        query: \"pain relief\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      drugName\n      activeIngredient\n      approvalYear\n      isOTC\n      manufacturer {\n        ... on Manufacturer {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the drugs with a hybrid search of 'pain relief', please use an alpha value of 0.25 in the hybrid search, and show the drug name, active ingredient, approval year, over-the-counter status, and manufacturer's company name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the rollercoasters with a hybrid search of 'fast', please use an alpha value of 0.25 in the hybrid search, and show the name, description, height, operating status, park name, and park location.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Rollercoaster(\n      hybrid: {\n        query: \"fast\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      description\n      height\n      isOperating\n      park {\n        ... on AmusementPark {\n          name\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the rollercoasters with a hybrid search of 'fast', please use an alpha value of 0.25 in the hybrid search, and show the name, description, height, operating status, park name, and park location.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the furniture with a hybrid search of 'chair', please use an alpha value of 0.25 in the hybrid search, and show the furniture name, material, dimensions, price, manufacturer's name, location, and contact.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Furniture(\n      hybrid: {\n        query: \"chair\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      furnitureName\n      material\n      dimensions\n      price\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the furniture with a hybrid search of 'chair', please use an alpha value of 0.25 in the hybrid search, and show the furniture name, material, dimensions, price, manufacturer's name, location, and contact.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "furniture.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the digital artworks with a hybrid search of 'abstract', please use an alpha value of 0.25 in the hybrid search, and show the title, artist's name, description, year, medium, and availability for sale.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DigitalArtwork(\n      hybrid: {\n        query: \"abstract\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      title\n      artist {\n        ... on Artist {\n          name\n        }\n      }\n      description\n      year\n      medium\n      isForSale\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the digital artworks with a hybrid search of 'abstract', please use an alpha value of 0.25 in the hybrid search, and show the title, artist's name, description, year, medium, and availability for sale.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the gyms with a hybrid search of 'cardio', please use an alpha value of 0.25 in the hybrid search, and show the gym name, location, equipment, membership price, and the classes offered including their class name, duration, instructor, and description.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Gym(\n      hybrid: {\n        query: \"cardio\",\n        alpha: 0.25\n      },\n      limit: 3\n    ) {\n      gymName\n      location\n      equipment\n      membershipPrice\n      classesOffered {\n        ... on FitnessClass {\n          className\n          duration\n          instructor\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the gyms with a hybrid search of 'cardio', please use an alpha value of 0.25 in the hybrid search, and show the gym name, location, equipment, membership price, and the classes offered including their class name, duration, instructor, and description.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}", "schemaPath": "gyms.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the film festivals with a hybrid search of 'Cannes', please use an alpha value of 0.25 in the hybrid search, and show the festival name, location, description, and featured film's title and director.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FilmFestival(\n      hybrid: {\n        query: \"Cannes\",\n        alpha: 0.25\n      },\n      limit: 3\n    ) {\n      festivalName\n      location\n      description\n      featuredFilm {\n        ... on Film {\n          filmTitle\n          director\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the film festivals with a hybrid search of 'Cannes', please use an alpha value of 0.25 in the hybrid search, and show the festival name, location, description, and featured film's title and director.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}", "schemaPath": "filmfestivals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the local businesses with a hybrid search of 'restaurant', please use an alpha value of 0.25 in the hybrid search, and show the business name, description, address, contact number, open status, rating, and services with their respective service names and prices.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LocalBusiness(\n      hybrid: {\n        query: \"restaurant\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      businessName\n      description\n      address\n      contactNumber\n      isOpen\n      rating\n      services {\n        ... on Service {\n          serviceName\n          price\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the local businesses with a hybrid search of 'restaurant', please use an alpha value of 0.25 in the hybrid search, and show the business name, description, address, contact number, open status, rating, and services with their respective service names and prices.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the zoos with a hybrid search of 'wildlife', please use an alpha value of 0.25 in the hybrid search, and show the zoo name, location, animals housed with their species, habitat, and diet, and opening hours.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Zoo(\n      hybrid: {\n        query: \"wildlife\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      zooName\n      location\n      animalsHoused {\n        ... on Animal {\n          species\n          habitat\n          diet\n        }\n      }\n      openingHours\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the zoos with a hybrid search of 'wildlife', please use an alpha value of 0.25 in the hybrid search, and show the zoo name, location, animals housed with their species, habitat, and diet, and opening hours.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}", "schemaPath": "zoos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the boats with a hybrid search of 'sailboat', please use an alpha value of 0.25 in the hybrid search, and show the boat name, type, capacity, motorization status, and manufacturer's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Boat(\n      hybrid: {\n        query: \"sailboat\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      boatName\n      type\n      capacity\n      isMotorized\n      manufacturer {\n        ... on BoatManufacturer {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the boats with a hybrid search of 'sailboat', please use an alpha value of 0.25 in the hybrid search, and show the boat name, type, capacity, motorization status, and manufacturer's company name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the pottery items with a hybrid search of 'vase', please use an alpha value of 0.25 in the hybrid search, and show the item name, description, type, date created, craftsman's name, biography, and studio location.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PotteryItem(\n      hybrid: {\n        query: \"vase\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      itemName\n      description\n      type\n      dateCreated\n      craftsman {\n        ... on Potter {\n          potterName\n          biography\n          studioLocation\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the pottery items with a hybrid search of 'vase', please use an alpha value of 0.25 in the hybrid search, and show the item name, description, type, date created, craftsman's name, biography, and studio location.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}", "schemaPath": "pottery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the national parks with a hybrid search of 'mountain', please use an alpha value of 0.25 in the hybrid search, and show the park name, description, location, established year, entry fee status, wildlife, and facility name with description.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NationalPark(\n      hybrid: {\n        query: \"mountain\",\n        alpha: 0.25\n      },\n      limit: 3\n    ) {\n      parkName\n      description\n      location\n      establishedYear\n      isEntryFree\n      wildlife\n      facilities {\n        ... on Facility {\n          facilityName\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the national parks with a hybrid search of 'mountain', please use an alpha value of 0.25 in the hybrid search, and show the park name, description, location, established year, entry fee status, wildlife, and facility name with description.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the wedding venues with a hybrid search of 'outdoor', please use an alpha value of 0.25 in the hybrid search, and show the name, location, capacity, whether it has an indoor facility, and the vendor's name, service type, years in business, and if they offer a discount. Limit the results to 3.\n```\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeddingVenue(\n      hybrid: {\n        query: \"outdoor\",\n        alpha: 0.25\n      },\n      limit: 3\n    ) {\n      name\n      location\n      capacity\n      hasIndoorFacility\n      vendors {\n        ... on Vendor {\n          vendorName\n          serviceType\n          yearsInBusiness\n          offersDiscount\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the wedding venues with a hybrid search of 'outdoor', please use an alpha value of 0.25 in the hybrid search, and show the name, location, capacity, whether it has an indoor facility, and the vendor's name, service type, years in business, and if they offer a discount. Limit the results to 3.\n```\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}", "schemaPath": "weddings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the language courses with a hybrid search of 'Spanish', please use an alpha value of 0.25 in the hybrid search, and show the course name, language taught, difficulty level, platform name, and website.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LanguageCourse(\n      hybrid: {\n        query: \"Spanish\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      courseName\n      languageTaught\n      difficultyLevel\n      platform {\n        ... on LearningPlatform {\n          platformName\n          website\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the language courses with a hybrid search of 'Spanish', please use an alpha value of 0.25 in the hybrid search, and show the course name, language taught, difficulty level, platform name, and website.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the pets with a hybrid search of 'dog', please use an alpha value of 0.25 in the hybrid search, and show the pet name, species, breed, age, owner's full name, address, and contact number.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Pet(\n      hybrid: {\n        query: \"dog\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      petName\n      species\n      breed\n      age\n      owner {\n        ... on Person {\n          fullName\n          address\n          contactNumber\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the pets with a hybrid search of 'dog', please use an alpha value of 0.25 in the hybrid search, and show the pet name, species, breed, age, owner's full name, address, and contact number.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the Literary Awards with a hybrid search of 'Nobel Prize', please use an alpha value of 0.25 in the hybrid search, and show the award name, year established, awarding organization's name, and covered genres.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LiteraryAward(\n      hybrid: {\n        query: \"Nobel Prize\",\n        alpha: 0.25\n      },\n      limit: 3\n    ) {\n      awardName\n      yearEstablished\n      awardingOrganization {\n        ... on Organization {\n          organizationName\n        }\n      }\n      genresCovered\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the Literary Awards with a hybrid search of 'Nobel Prize', please use an alpha value of 0.25 in the hybrid search, and show the award name, year established, awarding organization's name, and covered genres.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the jewelry items with a hybrid search of 'necklace', please use an alpha value of 0.25 in the hybrid search, and show the name, material, gemstone's name and hardness, price, and whether it is handmade.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JewelryItem(\n      hybrid: {\n        query: \"necklace\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      material\n      gemstone {\n        ... on Gemstone {\n          name\n          hardness\n        }\n      }\n      price\n      isHandmade\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the jewelry items with a hybrid search of 'necklace', please use an alpha value of 0.25 in the hybrid search, and show the name, material, gemstone's name and hardness, price, and whether it is handmade.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the research institutes with a hybrid search of 'technology', please use an alpha value of 0.25 in the hybrid search, and show the institute name, overview, location, affiliated university's name, campus location, and establishment year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ResearchInstitute(\n      hybrid: {\n        query: \"technology\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      instituteName\n      overview\n      location\n      affiliatedUniversity {\n        ... on University {\n          name\n          campusLocation\n          establishmentYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the research institutes with a hybrid search of 'technology', please use an alpha value of 0.25 in the hybrid search, and show the institute name, overview, location, affiliated university's name, campus location, and establishment year.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}", "schemaPath": "researchinstitute.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the banking services with a hybrid search of 'online banking', please use an alpha value of 0.25 in the hybrid search, and show the service name, features, bank name, and headquarters.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BankingService(\n      hybrid: {\n        query: \"online banking\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      serviceName\n      features\n      bank {\n        ... on Bank {\n          bankName\n          headquarters\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the banking services with a hybrid search of 'online banking', please use an alpha value of 0.25 in the hybrid search, and show the service name, features, bank name, and headquarters.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}", "schemaPath": "onlinebanking.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the operating systems with a hybrid search of 'Windows', please use an alpha value of 0.25 in the hybrid search, and show the operating system name, version, supported devices, and parent company's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OperatingSystem(\n      hybrid: {\n        query: \"Windows\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      osName\n      version\n      supportedDevices\n      parentCompany {\n        ... on Company {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the operating systems with a hybrid search of 'Windows', please use an alpha value of 0.25 in the hybrid search, and show the operating system name, version, supported devices, and parent company's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "operatingsystem.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the freelancers with a hybrid search of 'web development', please use an alpha value of 0.25 in the hybrid search, and show the freelancer's name, skills, rate, portfolio, and client reviews including the client's name, review text, and rating.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Freelancer(\n      hybrid: {\n        query: \"web development\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      freelancerName\n      skills\n      rate\n      portfolio\n      clientReviews {\n        ... on ClientReview {\n          clientName\n          reviewText\n          rating\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the freelancers with a hybrid search of 'web development', please use an alpha value of 0.25 in the hybrid search, and show the freelancer's name, skills, rate, portfolio, and client reviews including the client's name, review text, and rating.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}", "schemaPath": "freelancers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the tea shops with a hybrid search of 'green tea', please use an alpha value of 0.25 in the hybrid search, and show the shop name, location, and details of the best-selling teas including the tea name, origin, and flavor profile.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TeaShop(\n      hybrid: {\n        query: \"green tea\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      shopName\n      location\n      bestSellingTeas {\n        ... on TeaVariety {\n          teaName\n          origin\n          flavorProfile\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the tea shops with a hybrid search of 'green tea', please use an alpha value of 0.25 in the hybrid search, and show the shop name, location, and details of the best-selling teas including the tea name, origin, and flavor profile.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}", "schemaPath": "teashops.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the space missions with a hybrid search of 'moon landing', please use an alpha value of 0.25 in the hybrid search, and show the mission name, objective, launch year, mission status, and space agency's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SpaceMission(\n      hybrid: {\n        query: \"moon landing\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      missionName\n      objective\n      launchYear\n      missionStatus\n      spaceAgency {\n        ... on SpaceAgency {\n          agencyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the space missions with a hybrid search of 'moon landing', please use an alpha value of 0.25 in the hybrid search, and show the mission name, objective, launch year, mission status, and space agency's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the biographies of Albert Einstein, please use an alpha value of 0.25 in the hybrid search, and show the subject name, overview, author's name, and publication year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Biography(\n      hybrid: {\n        query: \"Albert Einstein\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      subjectName\n      overview\n      author {\n        ... on Author {\n          name\n        }\n      }\n      publicationYear\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the biographies of Albert Einstein, please use an alpha value of 0.25 in the hybrid search, and show the subject name, overview, author's name, and publication year.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the nanotech applications with a hybrid search of 'nanomedicine', please use an alpha value of 0.25 in the hybrid search, and show the application name, overview, and leading researchers' names and affiliations.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NanotechApplication(\n      hybrid: {\n        query: \"nanomedicine\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      applicationName\n      overview\n      leadingResearchers {\n        ... on Researcher {\n          name\n          affiliation\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the nanotech applications with a hybrid search of 'nanomedicine', please use an alpha value of 0.25 in the hybrid search, and show the application name, overview, and leading researchers' names and affiliations.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}", "schemaPath": "nanotechnology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the non-profit organizations with a hybrid search of 'education', please use an alpha value of 0.25 in the hybrid search, and show the name, mission, founded year, focus area, and founder's full name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NonProfit(\n      hybrid: {\n        query: \"education\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      name\n      mission\n      foundedYear\n      focusArea\n      founder {\n        ... on Person {\n          fullName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the non-profit organizations with a hybrid search of 'education', please use an alpha value of 0.25 in the hybrid search, and show the name, mission, founded year, focus area, and founder's full name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the hiking trails with a hybrid search of 'mountain', please use an alpha value of 0.25 in the hybrid search, and show the trail name, location, length in kilometers, difficulty level, nearest town's name, and population.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HikingTrail(\n      hybrid: {\n        query: \"mountain\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      trailName\n      location\n      lengthKm\n      difficultyLevel\n      nearestTown {\n        ... on Town {\n          townName\n          population\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the hiking trails with a hybrid search of 'mountain', please use an alpha value of 0.25 in the hybrid search, and show the trail name, location, length in kilometers, difficulty level, nearest town's name, and population.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}", "schemaPath": "hikingtrails.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the food trucks with a hybrid search of 'tacos', please use an alpha value of 0.25 in the hybrid search, and show the truck name, cuisine type, location, and owner's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FoodTruck(\n      hybrid: {\n        query: \"tacos\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      truckName\n      cuisineType\n      location\n      owner {\n        ... on FoodEntrepreneur {\n          entrepreneurName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the food trucks with a hybrid search of 'tacos', please use an alpha value of 0.25 in the hybrid search, and show the truck name, cuisine type, location, and owner's name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}", "schemaPath": "foodtrucks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the AR applications with a hybrid search of 'augmented reality', please use an alpha value of 0.25 in the hybrid search, and show the application name, description, platform, and developer's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ARApplication(\n      hybrid: {\n        query: \"augmented reality\",\n        alpha: 0.25\n      },\n      limit: 5\n    ) {\n      appName\n      description\n      platform\n      developer {\n        ... on SoftwareCompany {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the AR applications with a hybrid search of 'augmented reality', please use an alpha value of 0.25 in the hybrid search, and show the application name, description, platform, and developer's company name.\n```", "apiRef": "Weight keyword vs vector results in Hybrid Search\n\nYou can use the\u00a0`alpha`\u00a0argument to weight the keyword (`bm25`) or vector search results. An\u00a0`alpha`\u00a0of\u00a0`1`\u00a0is for a pure vector search and\u00a0`0`\u00a0is for a pure keyword search. The default is\u00a0`0.75`.\n\nThe following example uses an alpha of\u00a0`0.25`, favoring keyword search results.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-alpha.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 chemical compounds with BM25 keyword scoring to 'water' in the compound name, and show the compound name, formula, molar mass, and the elements it contains with their names, symbols, atomic numbers, and whether they are metals.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ChemicalCompound(\n      bm25: {\n        query: \"water\",\n        properties: [\"compoundName\"]\n      },\n      limit: 5\n    ) {\n      compoundName\n      formula\n      molarMass\n      containsElements {\n        ... on ChemicalElement {\n          elementName\n          symbol\n          atomicNumber\n          isMetal\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 chemical compounds with BM25 keyword scoring to 'water' in the compound name, and show the compound name, formula, molar mass, and the elements it contains with their names, symbols, atomic numbers, and whether they are metals.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 marine species with BM25 keyword scoring to 'coral reef' in the species name, and show the species name, habitat, conservation status, and researcher's name and research area.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MarineSpecies(\n      bm25: {\n        query: \"coral reef\",\n        properties: [\"speciesName\"]\n      },\n      limit: 5\n    ) {\n      speciesName\n      habitat\n      conservationStatus\n      researcher {\n        ... on MarineBiologist {\n          biologistName\n          researchArea\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 marine species with BM25 keyword scoring to 'coral reef' in the species name, and show the species name, habitat, conservation status, and researcher's name and research area.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 robots with BM25 keyword scoring to 'autonomous' in the function, and show the robot name, function, manufacturer's company name, founded year, and specialization.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Robot(\n      bm25: {\n        query: \"autonomous\",\n        properties: [\"function\"]\n      },\n      limit: 5\n    ) {\n      robotName\n      function\n      manufacturer {\n        ... on RoboticsCompany {\n          companyName\n          foundedYear\n          specialization\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 robots with BM25 keyword scoring to 'autonomous' in the function, and show the robot name, function, manufacturer's company name, founded year, and specialization.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}", "schemaPath": "robotics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 civilizations with BM25 keyword scoring to 'Egypt' in the civilization name, and show the civilization name, time period, notable technologies, languages, and major ruins' site name and location.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Civilization(\n      bm25: {\n        query: \"Egypt\",\n        properties: [\"civilizationName\"]\n      },\n      limit: 5\n    ) {\n      civilizationName\n      timePeriod\n      notableTechnologies\n      languages\n      majorRuins {\n        ... on Ruins {\n          siteName\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 civilizations with BM25 keyword scoring to 'Egypt' in the civilization name, and show the civilization name, time period, notable technologies, languages, and major ruins' site name and location.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}", "schemaPath": "ancientcivilization.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the streaming platform with the highest BM25 keyword scoring to 'Netflix' in the platform name. Show me the platform name, overview, subscription cost, available regions, and the top shows with their titles, genres, release years, and descriptions.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    StreamingPlatform(\n      bm25: {\n        query: \"Netflix\",\n        properties: [\"platformName\"]\n      },\n      limit: 1\n    ) {\n      platformName\n      overview\n      subscriptionCost\n      availableRegions\n      topShows {\n        ... on Show {\n          title\n          genre\n          releaseYear\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the streaming platform with the highest BM25 keyword scoring to 'Netflix' in the platform name. Show me the platform name, overview, subscription cost, available regions, and the top shows with their titles, genres, release years, and descriptions.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 cosmetic products with BM25 keyword scoring to 'lipstick' in the product name, and show the product name, brand name, type, shade, ingredients, and whether it is vegan.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CosmeticProduct(\n      bm25: {\n        query: \"lipstick\",\n        properties: [\"productName\"]\n      },\n      limit: 5\n    ) {\n      productName\n      brand {\n        ... on Brand {\n          brandName\n        }\n      }\n      type\n      shade\n      ingredients\n      isVegan\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 cosmetic products with BM25 keyword scoring to 'lipstick' in the product name, and show the product name, brand name, type, shade, ingredients, and whether it is vegan.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}", "schemaPath": "cosmetics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 energy sources with BM25 keyword scoring to 'solar' in the source type, and show the source type, description, annual output, residential availability, and provider's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EnergySource(\n      bm25: {\n        query: \"solar\",\n        properties: [\"sourceType\"]\n      },\n      limit: 5\n    ) {\n      sourceType\n      description\n      annualOutput\n      isResidential\n      provider {\n        ... on EnergyProvider {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 energy sources with BM25 keyword scoring to 'solar' in the source type, and show the source type, description, annual output, residential availability, and provider's company name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 plants with BM25 keyword scoring to 'rose' in the common name, and show the common name, scientific name, habitat, growth habit, endangered status, and fertilizer needs including the type and application frequency.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      bm25: {\n        query: \"rose\",\n        properties: [\"commonName\"]\n      },\n      limit: 5\n    ) {\n      commonName\n      scientificName\n      habitat\n      growthHabit\n      isEndangered\n      fertilizerNeeds {\n        ... on Fertilizer {\n          type\n          applicationFrequency\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 plants with BM25 keyword scoring to 'rose' in the common name, and show the common name, scientific name, habitat, growth habit, endangered status, and fertilizer needs including the type and application frequency.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}", "schemaPath": "plants.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 persons with BM25 keyword scoring to 'John' in the full name, and show the full name, birth year, deceased status, parents' full names, and DNA test results including the test provider, match percentage, and whether maternal and paternal lines are tested.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Person(\n      bm25: {\n        query: \"John\",\n        properties: [\"fullName\"]\n      },\n      limit: 5\n    ) {\n      fullName\n      birthYear\n      isDeceased\n      parents {\n        ... on Person {\n          fullName\n        }\n      }\n      dnatest {\n        ... on DNATestResult {\n          testProvider\n          matchPercentage\n          isMaternalLineTested\n          isPaternalLineTested\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 persons with BM25 keyword scoring to 'John' in the full name, and show the full name, birth year, deceased status, parents' full names, and DNA test results including the test provider, match percentage, and whether maternal and paternal lines are tested.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 candles with BM25 keyword scoring to 'vanilla' in the candle name, and show the candle name, scent, burn time, price, manufacturer's name, location, and contact.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Candle(\n      bm25: {\n        query: \"vanilla\",\n        properties: [\"candleName\"]\n      },\n      limit: 5\n    ) {\n      candleName\n      scent\n      burnTime\n      price\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 candles with BM25 keyword scoring to 'vanilla' in the candle name, and show the candle name, scent, burn time, price, manufacturer's name, location, and contact.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "candles.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 comedy specials with BM25 keyword scoring to 'funny' in the special title, and show the special title, description, duration, comedian's name, and biography.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ComedySpecial(\n      bm25: {\n        query: \"funny\",\n        properties: [\"specialTitle\"]\n      },\n      limit: 5\n    ) {\n      specialTitle\n      description\n      duration\n      comedian {\n        ... on Comedian {\n          comedianName\n          biography\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 comedy specials with BM25 keyword scoring to 'funny' in the special title, and show the special title, description, duration, comedian's name, and biography.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 mobile apps with BM25 keyword scoring to 'social media' in the app name, and show the app name, description, developer, rating, whether it is free, and the supported operating system name and version.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MobileApp(\n      bm25: {\n        query: \"social media\",\n        properties: [\"appName\"]\n      },\n      limit: 10\n    ) {\n      appName\n      description\n      developer\n      rating\n      isFree\n      supportedOS {\n        ... on OperatingSystem {\n          osName\n          version\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 mobile apps with BM25 keyword scoring to 'social media' in the app name, and show the app name, description, developer, rating, whether it is free, and the supported operating system name and version.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}", "schemaPath": "mobileapplications.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 magic tricks with BM25 keyword scoring to 'levitation' in the trick name, and show the trick name, description, difficulty level, and performer's magician name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MagicTrick(\n      bm25: {\n        query: \"levitation\",\n        properties: [\"trickName\"]\n      },\n      limit: 5\n    ) {\n      trickName\n      description\n      difficultyLevel\n      performer {\n        ... on Magician {\n          magicianName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 magic tricks with BM25 keyword scoring to 'levitation' in the trick name, and show the trick name, description, difficulty level, and performer's magician name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 fireworks with BM25 keyword scoring to 'sparkler' in the firework name, and show the firework name, effects, duration, safety guidelines, manufacturer's name, location, and contact.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Firework(\n      bm25: {\n        query: \"sparkler\",\n        properties: [\"fireworkName\"]\n      },\n      limit: 5\n    ) {\n      fireworkName\n      effects\n      duration\n      safetyGuidelines\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 fireworks with BM25 keyword scoring to 'sparkler' in the firework name, and show the firework name, effects, duration, safety guidelines, manufacturer's name, location, and contact.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "fireworks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 esports teams with BM25 keyword scoring to 'competitive' in the team name, and show the team name, members' player name, nickname, game specialization, years active, retirement status, games played, tournament wins count, and activity status.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EsportsTeam(\n      bm25: {\n        query: \"competitive\",\n        properties: [\"teamName\"]\n      },\n      limit: 10\n    ) {\n      teamName\n      members {\n        ... on Player {\n          playerName\n          nickname\n          gameSpecialization\n          yearsActive\n          isRetired\n        }\n      }\n      gamesPlayed\n      tournamentWinsCount\n      isActive\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 esports teams with BM25 keyword scoring to 'competitive' in the team name, and show the team name, members' player name, nickname, game specialization, years active, retirement status, games played, tournament wins count, and activity status.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 doctors specializing in cardiology, ranked by BM25 keyword scoring to 'cardiology' in the specialization, and show their names, years of experience, and clinic details including clinic name, location, and operational hours.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Doctor(\n      bm25: {\n        query: \"cardiology\",\n        properties: [\"specialization\"]\n      },\n      limit: 5\n    ) {\n      doctorName\n      specialization\n      yearsOfExperience\n      clinic {\n        ... on Clinic {\n          clinicName\n          location\n          operationalHours\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 doctors specializing in cardiology, ranked by BM25 keyword scoring to 'cardiology' in the specialization, and show their names, years of experience, and clinic details including clinic name, location, and operational hours.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 colleges with BM25 keyword scoring to 'computer science' in the college name, and show the college name, location, established year, description, and courses with their names, durations, and descriptions.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    College(\n      bm25: {\n        query: \"computer science\",\n        properties: [\"collegeName\"]\n      },\n      limit: 10\n    ) {\n      collegeName\n      location\n      establishedYear\n      description\n      courses {\n        ... on Course {\n          courseName\n          duration\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 colleges with BM25 keyword scoring to 'computer science' in the college name, and show the college name, location, established year, description, and courses with their names, durations, and descriptions.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 home appliances with BM25 keyword scoring to 'refrigerator' in the appliance name, and show the appliance name, brand, type, energy rating, whether it is a smart device, price, and warranty duration and coverage.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HomeAppliance(\n      bm25: {\n        query: \"refrigerator\",\n        properties: [\"applianceName\"]\n      },\n      limit: 5\n    ) {\n      applianceName\n      brand\n      type\n      energyRating\n      isSmartDevice\n      price\n      warranty {\n        ... on Warranty {\n          duration\n          coverage\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 home appliances with BM25 keyword scoring to 'refrigerator' in the appliance name, and show the appliance name, brand, type, energy rating, whether it is a smart device, price, and warranty duration and coverage.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 VR experiences with BM25 keyword scoring to 'action' in the title, and show the title, developer's name, genre, release year, and multiplayer availability.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    VRExperience(\n      bm25: {\n        query: \"action\",\n        properties: [\"title\"]\n      },\n      limit: 5\n    ) {\n      title\n      developer {\n        ... on Developer {\n          name\n        }\n      }\n      genre\n      releaseYear\n      isMultiplayer\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 VR experiences with BM25 keyword scoring to 'action' in the title, and show the title, developer's name, genre, release year, and multiplayer availability.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 toys with BM25 keyword scoring to 'action figure' in the toy name, and show the toy name, brand, recommended age, battery-operated status, price, and related board game's name, description, and number of players.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Toy(\n      bm25: {\n        query: \"action figure\",\n        properties: [\"toyName\"]\n      },\n      limit: 5\n    ) {\n      toyName\n      brand\n      recommendedAge\n      isBatteryOperated\n      price\n      relatedGame {\n        ... on BoardGame {\n          gameName\n          description\n          numberOfPlayers\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 toys with BM25 keyword scoring to 'action figure' in the toy name, and show the toy name, brand, recommended age, battery-operated status, price, and related board game's name, description, and number of players.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 drugs with BM25 keyword scoring to 'headache' in the drug name, and show the drug name, active ingredient, approval year, over-the-counter availability, and manufacturer's company name, founded year, headquarters, and global presence.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Drug(\n      bm25: {\n        query: \"headache\",\n        properties: [\"drugName\"]\n      },\n      limit: 5\n    ) {\n      drugName\n      activeIngredient\n      approvalYear\n      isOTC\n      manufacturer {\n        ... on Manufacturer {\n          companyName\n          foundedYear\n          headquarters\n          isGlobal\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 drugs with BM25 keyword scoring to 'headache' in the drug name, and show the drug name, active ingredient, approval year, over-the-counter availability, and manufacturer's company name, founded year, headquarters, and global presence.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 rollercoasters with BM25 keyword scoring to 'fast' in the name or description. Show me the name, description, height, operating status, and the park's name and location.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Rollercoaster(\n      bm25: {\n        query: \"fast\",\n        properties: [\"name\", \"description\"]\n      },\n      limit: 3\n    ) {\n      name\n      description\n      height\n      isOperating\n      park {\n        ... on AmusementPark {\n          name\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 rollercoasters with BM25 keyword scoring to 'fast' in the name or description. Show me the name, description, height, operating status, and the park's name and location.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 furniture items with BM25 keyword scoring to 'chair' in the furniture name, and show the furniture name, material, dimensions, price, manufacturer's name, location, and contact.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Furniture(\n      bm25: {\n        query: \"chair\",\n        properties: [\"furnitureName\"]\n      },\n      limit: 5\n    ) {\n      furnitureName\n      material\n      dimensions\n      price\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 furniture items with BM25 keyword scoring to 'chair' in the furniture name, and show the furniture name, material, dimensions, price, manufacturer's name, location, and contact.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "furniture.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 digital artworks with BM25 keyword scoring to 'abstract' in the description, and show the title, artist's name and portfolio link, description, year, medium, and availability for sale.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DigitalArtwork(\n      bm25: {\n        query: \"abstract\",\n        properties: [\"description\"]\n      },\n      limit: 5\n    ) {\n      title\n      artist {\n        ... on Artist {\n          name\n          portfolioLink\n        }\n      }\n      description\n      year\n      medium\n      isForSale\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 digital artworks with BM25 keyword scoring to 'abstract' in the description, and show the title, artist's name and portfolio link, description, year, medium, and availability for sale.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 gyms with BM25 keyword scoring to 'treadmill' in the equipment, and show the gym name, location, equipment, membership price, and classes offered with their names, durations, instructors, and descriptions.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Gym(\n      bm25: {\n        query: \"treadmill\",\n        properties: [\"equipment\"]\n      },\n      limit: 10\n    ) {\n      gymName\n      location\n      equipment\n      membershipPrice\n      classesOffered {\n        ... on FitnessClass {\n          className\n          duration\n          instructor\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 gyms with BM25 keyword scoring to 'treadmill' in the equipment, and show the gym name, location, equipment, membership price, and classes offered with their names, durations, instructors, and descriptions.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}", "schemaPath": "gyms.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 film festivals with BM25 keyword scoring to 'Cannes' in the festival name, and show the festival name, location, description, and featured film's title and director.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FilmFestival(\n      bm25: {\n        query: \"Cannes\",\n        properties: [\"festivalName\"]\n      },\n      limit: 3\n    ) {\n      festivalName\n      location\n      description\n      featuredFilm {\n        ... on Film {\n          filmTitle\n          director\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 film festivals with BM25 keyword scoring to 'Cannes' in the festival name, and show the festival name, location, description, and featured film's title and director.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}", "schemaPath": "filmfestivals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 local businesses with BM25 keyword scoring to 'restaurant' in the business name. Show me the business name, description, address, contact number, opening status, rating, and services with their respective service names and prices.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LocalBusiness(\n      bm25: {\n        query: \"restaurant\",\n        properties: [\"businessName\"]\n      },\n      limit: 10\n    ) {\n      businessName\n      description\n      address\n      contactNumber\n      isOpen\n      rating\n      services {\n        ... on Service {\n          serviceName\n          price\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 local businesses with BM25 keyword scoring to 'restaurant' in the business name. Show me the business name, description, address, contact number, opening status, rating, and services with their respective service names and prices.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 boats with BM25 keyword scoring to 'sailboat' in the type, and show the boat name, type, capacity, motorization status, and manufacturer's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Boat(\n      bm25: {\n        query: \"sailboat\",\n        properties: [\"type\"]\n      },\n      limit: 5\n    ) {\n      boatName\n      type\n      capacity\n      isMotorized\n      manufacturer {\n        ... on BoatManufacturer {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 boats with BM25 keyword scoring to 'sailboat' in the type, and show the boat name, type, capacity, motorization status, and manufacturer's company name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 pottery items with BM25 keyword scoring to 'vase' in the item name, and show the item name, description, type, date created, potter's name, biography, and studio location.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PotteryItem(\n      bm25: {\n        query: \"vase\",\n        properties: [\"itemName\"]\n      },\n      limit: 5\n    ) {\n      itemName\n      description\n      type\n      dateCreated\n      craftsman {\n        ... on Potter {\n          potterName\n          biography\n          studioLocation\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 pottery items with BM25 keyword scoring to 'vase' in the item name, and show the item name, description, type, date created, potter's name, biography, and studio location.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}", "schemaPath": "pottery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 national parks with BM25 keyword scoring to 'mountain' in the description, and show the park name, description, location, established year, entry fee status, wildlife, and facilities with their names and descriptions.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NationalPark(\n      bm25: {\n        query: \"mountain\",\n        properties: [\"description\"]\n      },\n      limit: 3\n    ) {\n      parkName\n      description\n      location\n      establishedYear\n      isEntryFree\n      wildlife\n      facilities {\n        ... on Facility {\n          facilityName\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 national parks with BM25 keyword scoring to 'mountain' in the description, and show the park name, description, location, established year, entry fee status, wildlife, and facilities with their names and descriptions.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 wedding venues with BM25 keyword scoring to 'outdoor' in the name, and show the name, location, capacity, availability of indoor facility, and vendor details including vendor name, service type, years in business, and if they offer any discounts.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeddingVenue(\n      bm25: {\n        query: \"outdoor\",\n        properties: [\"name\"]\n      },\n      limit: 3\n    ) {\n      name\n      location\n      capacity\n      hasIndoorFacility\n      vendors {\n        ... on Vendor {\n          vendorName\n          serviceType\n          yearsInBusiness\n          offersDiscount\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 wedding venues with BM25 keyword scoring to 'outdoor' in the name, and show the name, location, capacity, availability of indoor facility, and vendor details including vendor name, service type, years in business, and if they offer any discounts.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}", "schemaPath": "weddings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 language courses with BM25 keyword scoring to 'beginner' in the difficulty level, and show the course name, language taught, difficulty level, platform name, and website.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LanguageCourse(\n      bm25: {\n        query: \"beginner\",\n        properties: [\"difficultyLevel\"]\n      },\n      limit: 5\n    ) {\n      courseName\n      languageTaught\n      difficultyLevel\n      platform {\n        ... on LearningPlatform {\n          platformName\n          website\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 language courses with BM25 keyword scoring to 'beginner' in the difficulty level, and show the course name, language taught, difficulty level, platform name, and website.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 pets with BM25 keyword scoring to 'dog' in the pet name, and show the pet name, species, breed, age, owner's full name, address, and contact number.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Pet(\n      bm25: {\n        query: \"dog\",\n        properties: [\"petName\"]\n      },\n      limit: 5\n    ) {\n      petName\n      species\n      breed\n      age\n      owner {\n        ... on Person {\n          fullName\n          address\n          contactNumber\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 pets with BM25 keyword scoring to 'dog' in the pet name, and show the pet name, species, breed, age, owner's full name, address, and contact number.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 literary awards with BM25 keyword scoring to 'Nobel Prize' in the award name, and show the award name, year established, awarding organization's name, and covered genres.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LiteraryAward(\n      bm25: {\n        query: \"Nobel Prize\",\n        properties: [\"awardName\"]\n      },\n      limit: 3\n    ) {\n      awardName\n      yearEstablished\n      awardingOrganization {\n        ... on Organization {\n          organizationName\n        }\n      }\n      genresCovered\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 literary awards with BM25 keyword scoring to 'Nobel Prize' in the award name, and show the award name, year established, awarding organization's name, and covered genres.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 jewelry items with BM25 keyword scoring to 'diamond' in the name, and show the name, material, gemstone's name and hardness, price, and whether it is handmade.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JewelryItem(\n      bm25: {\n        query: \"diamond\",\n        properties: [\"name\"]\n      },\n      limit: 5\n    ) {\n      name\n      material\n      gemstone {\n        ... on Gemstone {\n          name\n          hardness\n        }\n      }\n      price\n      isHandmade\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 jewelry items with BM25 keyword scoring to 'diamond' in the name, and show the name, material, gemstone's name and hardness, price, and whether it is handmade.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 research institutes with BM25 keyword scoring to 'technology' in the overview, and show the institute name, overview, location, affiliated university's name, campus location, and establishment year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ResearchInstitute(\n      bm25: {\n        query: \"technology\",\n        properties: [\"overview\"]\n      },\n      limit: 5\n    ) {\n      instituteName\n      overview\n      location\n      affiliatedUniversity {\n        ... on University {\n          name\n          campusLocation\n          establishmentYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 research institutes with BM25 keyword scoring to 'technology' in the overview, and show the institute name, overview, location, affiliated university's name, campus location, and establishment year.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}", "schemaPath": "researchinstitute.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 banking services with BM25 keyword scoring to 'online banking' in the service name, and show the service name, features, bank name, and headquarters.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BankingService(\n      bm25: {\n        query: \"online banking\",\n        properties: [\"serviceName\"]\n      },\n      limit: 5\n    ) {\n      serviceName\n      features\n      bank {\n        ... on Bank {\n          bankName\n          headquarters\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 banking services with BM25 keyword scoring to 'online banking' in the service name, and show the service name, features, bank name, and headquarters.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}", "schemaPath": "onlinebanking.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 operating systems with BM25 keyword scoring to 'Windows' in the osName, and show the osName, version, supported devices, and parent company's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OperatingSystem(\n      bm25: {\n        query: \"Windows\",\n        properties: [\"osName\"]\n      },\n      limit: 5\n    ) {\n      osName\n      version\n      supportedDevices\n      parentCompany {\n        ... on Company {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 operating systems with BM25 keyword scoring to 'Windows' in the osName, and show the osName, version, supported devices, and parent company's name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "operatingsystem.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 freelancers with BM25 keyword scoring to 'web development' in their skills. Show their freelancer name, skills, rate, portfolio, and client reviews including client name, review text, and rating.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Freelancer(\n      bm25: {\n        query: \"web development\",\n        properties: [\"skills\"]\n      },\n      limit: 5\n    ) {\n      freelancerName\n      skills\n      rate\n      portfolio\n      clientReviews {\n        ... on ClientReview {\n          clientName\n          reviewText\n          rating\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 freelancers with BM25 keyword scoring to 'web development' in their skills. Show their freelancer name, skills, rate, portfolio, and client reviews including client name, review text, and rating.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}", "schemaPath": "freelancers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 tea shops with BM25 keyword scoring to 'green tea' in the shop name, and show the shop name, location, and details of the best-selling teas including the tea name, origin, and flavor profile.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TeaShop(\n      bm25: {\n        query: \"green tea\",\n        properties: [\"shopName\"]\n      },\n      limit: 5\n    ) {\n      shopName\n      location\n      bestSellingTeas {\n        ... on TeaVariety {\n          teaName\n          origin\n          flavorProfile\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 tea shops with BM25 keyword scoring to 'green tea' in the shop name, and show the shop name, location, and details of the best-selling teas including the tea name, origin, and flavor profile.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}", "schemaPath": "teashops.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 space missions with BM25 keyword scoring to 'moon landing' in the mission name, and show the mission name, objective, launch year, mission status, space agency's name, founded year, and headquarters.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SpaceMission(\n      bm25: {\n        query: \"moon landing\",\n        properties: [\"missionName\"]\n      },\n      limit: 5\n    ) {\n      missionName\n      objective\n      launchYear\n      missionStatus\n      spaceAgency {\n        ... on SpaceAgency {\n          agencyName\n          foundedYear\n          headquarters\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 space missions with BM25 keyword scoring to 'moon landing' in the mission name, and show the mission name, objective, launch year, mission status, space agency's name, founded year, and headquarters.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the biography of Albert Einstein, including the subject name, overview, author's name, author's bio, number of published works, and publication year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Biography(\n      bm25: {\n        query: \"Albert Einstein\",\n        properties: [\"subjectName\"]\n      },\n      limit: 1\n    ) {\n      subjectName\n      overview\n      author {\n        ... on Author {\n          name\n          bio\n          publishedWorksCount\n        }\n      }\n      publicationYear\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the biography of Albert Einstein, including the subject name, overview, author's name, author's bio, number of published works, and publication year.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 Nanotech Applications with BM25 keyword scoring to 'nanoparticles' in the application name, and show the application name, overview, and leading researchers' names and affiliations.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NanotechApplication(\n      bm25: {\n        query: \"nanoparticles\",\n        properties: [\"applicationName\"]\n      },\n      limit: 5\n    ) {\n      applicationName\n      overview\n      leadingResearchers {\n        ... on Researcher {\n          name\n          affiliation\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 Nanotech Applications with BM25 keyword scoring to 'nanoparticles' in the application name, and show the application name, overview, and leading researchers' names and affiliations.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}", "schemaPath": "nanotechnology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 non-profit organizations with BM25 keyword scoring to 'education' in the focus area, and show the name, mission, founded year, focus area, and founder's full name and bio.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NonProfit(\n      bm25: {\n        query: \"education\",\n        properties: [\"focusArea\"]\n      },\n      limit: 5\n    ) {\n      name\n      mission\n      foundedYear\n      focusArea\n      founder {\n        ... on Person {\n          fullName\n          bio\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 non-profit organizations with BM25 keyword scoring to 'education' in the focus area, and show the name, mission, founded year, focus area, and founder's full name and bio.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 hiking trails with BM25 keyword scoring to 'mountain' in the trail name, and show the trail name, location, length in kilometers, difficulty level, and the nearest town's name and population.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HikingTrail(\n      bm25: {\n        query: \"mountain\",\n        properties: [\"trailName\"]\n      },\n      limit: 5\n    ) {\n      trailName\n      location\n      lengthKm\n      difficultyLevel\n      nearestTown {\n        ... on Town {\n          townName\n          population\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 hiking trails with BM25 keyword scoring to 'mountain' in the trail name, and show the trail name, location, length in kilometers, difficulty level, and the nearest town's name and population.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}", "schemaPath": "hikingtrails.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 food trucks with BM25 keyword scoring to 'tacos' in the truck name, and show the truck name, cuisine type, location, and owner's entrepreneur name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FoodTruck(\n      bm25: {\n        query: \"tacos\",\n        properties: [\"truckName\"]\n      },\n      limit: 5\n    ) {\n      truckName\n      cuisineType\n      location\n      owner {\n        ... on FoodEntrepreneur {\n          entrepreneurName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 food trucks with BM25 keyword scoring to 'tacos' in the truck name, and show the truck name, cuisine type, location, and owner's entrepreneur name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}", "schemaPath": "foodtrucks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 AR applications with BM25 keyword scoring to 'augmented reality' in the description, and show the application name, description, platform, and developer's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ARApplication(\n      bm25: {\n        query: \"augmented reality\",\n        properties: [\"description\"]\n      },\n      limit: 5\n    ) {\n      appName\n      description\n      platform\n      developer {\n        ... on SoftwareCompany {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 AR applications with BM25 keyword scoring to 'augmented reality' in the description, and show the application name, description, platform, and developer's company name.\n```", "apiRef": "BM25 with Selected properties\n\nYou can specify the object\u00a0`properties`\u00a0to search in.\n\nThe below example searches for objects containing the keyword\u00a0`food`\u00a0in the\u00a0`question`\u00a0property only, ranks them using BM25F scores of the searched property, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      bm25: {\n        query: \"food\",\n        properties: [\"question\"]\n      }\n    ) {\n      question\n      answer\n      _additional {\n        score\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-bm25-select-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the compound name, formula, molar mass, and linked chemical elements' name, symbol, atomic number, and metal status of chemical compounds with a molar mass greater than 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ChemicalCompound(\n      where: {\n        path: [\"molarMass\"],\n        operator: GreaterThan,\n        valueNumber: 100\n      }\n    ) {\n      compoundName\n      formula\n      molarMass\n      containsElements {\n        ... on ChemicalElement {\n          elementName\n          symbol\n          atomicNumber\n          isMetal\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the compound name, formula, molar mass, and linked chemical elements' name, symbol, atomic number, and metal status of chemical compounds with a molar mass greater than 100.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the species name, habitat, and linked marine biologist's name and research area of marine species that are endangered.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MarineSpecies(\n      where: {\n        path: [\"conservationStatus\"],\n        operator: Equal,\n        valueText: \"endangered\"\n      }\n    ) {\n      speciesName\n      habitat\n      researcher {\n        ... on MarineBiologist {\n          biologistName\n          researchArea\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the species name, habitat, and linked marine biologist's name and research area of marine species that are endangered.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the robot name, manufacturer's company name, founded year, and specialization of robots with the function \"industrial\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Robot(\n      where: {\n        path: [\"function\"],\n        operator: Equal,\n        valueText: \"industrial\"\n      }\n    ) {\n      robotName\n      manufacturer {\n        ... on RoboticsCompany {\n          companyName\n          foundedYear\n          specialization\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the robot name, manufacturer's company name, founded year, and specialization of robots with the function \"industrial\".\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}", "schemaPath": "robotics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the civilization name, notable technologies, languages, and major ruins' site name and location of civilizations from Ancient Egypt.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Civilization(\n      where: {\n        path: [\"timePeriod\"],\n        operator: Equal,\n        valueText: \"Ancient Egypt\"\n      }\n    ) {\n      civilizationName\n      notableTechnologies\n      languages\n      majorRuins {\n        ... on Ruins {\n          siteName\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the civilization name, notable technologies, languages, and major ruins' site name and location of civilizations from Ancient Egypt.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}", "schemaPath": "ancientcivilization.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the platform name, overview, available regions, and details of the top shows that are available on streaming platforms with a subscription cost of \"Free\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    StreamingPlatform(\n      where: {\n        path: [\"subscriptionCost\"],\n        operator: Equal,\n        valueText: \"Free\"\n      }\n    ) {\n      platformName\n      overview\n      availableRegions\n      topShows {\n        ... on Show {\n          title\n          genre\n          releaseYear\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the platform name, overview, available regions, and details of the top shows that are available on streaming platforms with a subscription cost of \"Free\".\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the product name, brand name, type, shade, and ingredients of cosmetic products that are vegan.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CosmeticProduct(\n      where: {\n        path: [\"isVegan\"],\n        operator: Equal,\n        valueBoolean: true\n      }\n    ) {\n      productName\n      brand {\n        ... on Brand {\n          brandName\n        }\n      }\n      type\n      shade\n      ingredients\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the product name, brand name, type, shade, and ingredients of cosmetic products that are vegan.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}", "schemaPath": "cosmetics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the source type, description, residential status, and linked provider's company name of energy sources with an annual output greater than 1000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EnergySource(\n      where: {\n        path: [\"annualOutput\"],\n        operator: GreaterThan,\n        valueInt: 1000\n      }\n    ) {\n      sourceType\n      description\n      isResidential\n      provider {\n        ... on EnergyProvider {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the source type, description, residential status, and linked provider's company name of energy sources with an annual output greater than 1000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the common name, scientific name, habitat, growth habit, and fertilizer needs (type and application frequency) of plants that are endangered.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      where: {\n        path: [\"isEndangered\"],\n        operator: Equal,\n        valueBoolean: true\n      }\n    ) {\n      commonName\n      scientificName\n      habitat\n      growthHabit\n      isEndangered\n      fertilizerNeeds {\n        ... on Fertilizer {\n          type\n          applicationFrequency\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the common name, scientific name, habitat, growth habit, and fertilizer needs (type and application frequency) of plants that are endangered.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}", "schemaPath": "plants.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the full name, deceased status, parents' full names, and DNA test details of people born after 1990.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Person(\n      where: {\n        path: [\"birthYear\"],\n        operator: GreaterThan,\n        valueInt: 1990\n      }\n    ) {\n      fullName\n      isDeceased\n      parents {\n        ... on Person {\n          fullName\n        }\n      }\n      dnatest {\n        ... on DNATestResult {\n          testProvider\n          matchPercentage\n          isMaternalLineTested\n          isPaternalLineTested\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the full name, deceased status, parents' full names, and DNA test details of people born after 1990.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the special title, description, and linked comedian's name and biography of comedy specials that have a duration of 1 hour 30 minutes.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ComedySpecial(\n      where: {\n        path: [\"duration\"],\n        operator: Equal,\n        valueText: \"1 hour 30 minutes\"\n      }\n    ) {\n      specialTitle\n      description\n      comedian {\n        ... on Comedian {\n          comedianName\n          biography\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the special title, description, and linked comedian's name and biography of comedy specials that have a duration of 1 hour 30 minutes.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the app name, description, developer, rating, whether it is free, and the supported operating system's name and version of mobile apps with a rating greater than 4.5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MobileApp(\n      where: {\n        path: [\"rating\"],\n        operator: GreaterThan,\n        valueNumber: 4.5\n      }\n    ) {\n      appName\n      description\n      developer\n      rating\n      isFree\n      supportedOS {\n        ... on OperatingSystem {\n          osName\n          version\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the app name, description, developer, rating, whether it is free, and the supported operating system's name and version of mobile apps with a rating greater than 4.5.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}", "schemaPath": "mobileapplications.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the trick name, description, and linked performer's magician name and biography of magic tricks with a difficulty level of \"beginner\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MagicTrick(\n      where: {\n        path: [\"difficultyLevel\"],\n        operator: Equal,\n        valueText: \"beginner\"\n      }\n    ) {\n      trickName\n      description\n      performer {\n        ... on Magician {\n          magicianName\n          biography\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the trick name, description, and linked performer's magician name and biography of magic tricks with a difficulty level of \"beginner\".\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the team name, members' player name, nickname, game specialization, years active, and retirement status of esports teams with more than 5 tournament wins. Also show me the number of games played and the active status of each team.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EsportsTeam(\n      where: {\n        path: [\"tournamentWinsCount\"],\n        operator: GreaterThan,\n        valueInt: 5\n      }\n    ) {\n      teamName\n      members {\n        ... on Player {\n          playerName\n          nickname\n          gameSpecialization\n          yearsActive\n          isRetired\n        }\n      }\n      gamesPlayed\n      isActive\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the team name, members' player name, nickname, game specialization, years active, and retirement status of esports teams with more than 5 tournament wins. Also show me the number of games played and the active status of each team.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, specialization, and linked clinic's name and location of doctors with more than 5 years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Doctor(\n      where: {\n        path: [\"yearsOfExperience\"],\n        operator: GreaterThan,\n        valueInt: 5\n      }\n    ) {\n      doctorName\n      specialization\n      clinic {\n        ... on Clinic {\n          clinicName\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, specialization, and linked clinic's name and location of doctors with more than 5 years of experience.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the full name, bio, and specialization name of photographers with more than 10 years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Photographer(\n      where: {\n        path: [\"yearsActive\"],\n        operator: GreaterThan,\n        valueInt: 10\n      }\n    ) {\n      fullName\n      bio\n      specialization {\n        ... on PhotographyGenre {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the full name, bio, and specialization name of photographers with more than 10 years of experience.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the college name, location, description, and course name with their duration of colleges established after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    College(\n      where: {\n        path: [\"establishedYear\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      collegeName\n      location\n      description\n      courses {\n        ... on Course {\n          courseName\n          duration\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the college name, location, description, and course name with their duration of colleges established after the year 2000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the appliance name, brand, type, whether it is a smart device, price, and warranty duration and coverage of home appliances with an energy rating greater than 4.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HomeAppliance(\n      where: {\n        path: [\"energyRating\"],\n        operator: GreaterThan,\n        valueInt: 4\n      }\n    ) {\n      applianceName\n      brand\n      type\n      isSmartDevice\n      price\n      warranty {\n        ... on Warranty {\n          duration\n          coverage\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the appliance name, brand, type, whether it is a smart device, price, and warranty duration and coverage of home appliances with an energy rating greater than 4.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title, developer's name, genre, and multiplayer status of VR experiences released after 2010.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    VRExperience(\n      where: {\n        path: [\"releaseYear\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ) {\n      title\n      developer {\n        ... on Developer {\n          name\n        }\n      }\n      genre\n      isMultiplayer\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title, developer's name, genre, and multiplayer status of VR experiences released after 2010.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the toy name, brand, recommended age, battery-operated status, price, and linked board game's name, description, and number of players of toys with a price less than 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Toy(\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 50\n      }\n    ) {\n      toyName\n      brand\n      recommendedAge\n      isBatteryOperated\n      price\n      relatedGame {\n        ... on BoardGame {\n          gameName\n          description\n          numberOfPlayers\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the toy name, brand, recommended age, battery-operated status, price, and linked board game's name, description, and number of players of toys with a price less than 50.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the drug name, active ingredient, over-the-counter status, and linked manufacturer's company name of drugs approved after 2010.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Drug(\n      where: {\n        path: [\"approvalYear\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ) {\n      drugName\n      activeIngredient\n      isOTC\n      manufacturer {\n        ... on Manufacturer {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the drug name, active ingredient, over-the-counter status, and linked manufacturer's company name of drugs approved after 2010.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, description, operating status, and linked amusement park's name and location of rollercoasters with a height greater than 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Rollercoaster(\n      where: {\n        path: [\"height\"],\n        operator: GreaterThan,\n        valueNumber: 50\n      }\n    ) {\n      name\n      description\n      isOperating\n      park {\n        ... on AmusementPark {\n          name\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, description, operating status, and linked amusement park's name and location of rollercoasters with a height greater than 50.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the title, artist's name and portfolio link, description, medium, and availability of digital artworks created after 2010.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DigitalArtwork(\n      where: {\n        path: [\"year\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ) {\n      title\n      artist {\n        ... on Artist {\n          name\n          portfolioLink\n        }\n      }\n      description\n      medium\n      isForSale\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the title, artist's name and portfolio link, description, medium, and availability of digital artworks created after 2010.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the festival name, description, and featured film's title and director of film festivals in Los Angeles.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FilmFestival(\n      where: {\n        path: [\"location\"],\n        operator: Equal,\n        valueText: \"Los Angeles\"\n      }\n    ) {\n      festivalName\n      description\n      featuredFilm {\n        ... on Film {\n          filmTitle\n          director\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the festival name, description, and featured film's title and director of film festivals in Los Angeles.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}", "schemaPath": "filmfestivals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the business name, description, address, contact number, open status, rating, and services' names and prices of local businesses with a rating greater than 4.5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LocalBusiness(\n      where: {\n        path: [\"rating\"],\n        operator: GreaterThan,\n        valueNumber: 4.5\n      }\n    ) {\n      businessName\n      description\n      address\n      contactNumber\n      isOpen\n      rating\n      services {\n        ... on Service {\n          serviceName\n          price\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the business name, description, address, contact number, open status, rating, and services' names and prices of local businesses with a rating greater than 4.5.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the zoo name, location, species, habitat, and diet of animals housed in zoos with opening hours from 9am to 5pm.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Zoo(\n      where: {\n        path: [\"openingHours\"],\n        operator: Equal,\n        valueText: \"9am - 5pm\"\n      }\n    ) {\n      zooName\n      location\n      animalsHoused {\n        ... on Animal {\n          species\n          habitat\n          diet\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the zoo name, location, species, habitat, and diet of animals housed in zoos with opening hours from 9am to 5pm.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}", "schemaPath": "zoos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the boat name, type, motorization status, and linked manufacturer's company name of boats with a capacity greater than 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Boat(\n      where: {\n        path: [\"capacity\"],\n        operator: GreaterThan,\n        valueInt: 10\n      }\n    ) {\n      boatName\n      type\n      isMotorized\n      manufacturer {\n        ... on BoatManufacturer {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the boat name, type, motorization status, and linked manufacturer's company name of boats with a capacity greater than 10.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the item name, description, date created, and linked potter's name, biography, and studio location of pottery items that are vases.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PotteryItem(\n      where: {\n        path: [\"type\"],\n        operator: Equal,\n        valueText: \"vase\"\n      }\n    ) {\n      itemName\n      description\n      dateCreated\n      craftsman {\n        ... on Potter {\n          potterName\n          biography\n          studioLocation\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the item name, description, date created, and linked potter's name, biography, and studio location of pottery items that are vases.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}", "schemaPath": "pottery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the park name, description, location, entry fee status, wildlife, and facility name with description of national parks established after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NationalPark(\n      where: {\n        path: [\"establishedYear\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      parkName\n      description\n      location\n      isEntryFree\n      wildlife\n      facilities {\n        ... on Facility {\n          facilityName\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the park name, description, location, entry fee status, wildlife, and facility name with description of national parks established after the year 2000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, location, availability of indoor facility, and linked vendor's name, service type, years in business, and discount offers of wedding venues with a capacity greater than 200.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeddingVenue(\n      where: {\n        path: [\"capacity\"],\n        operator: GreaterThan,\n        valueInt: 200\n      }\n    ) {\n      name\n      location\n      hasIndoorFacility\n      vendors {\n        ... on Vendor {\n          vendorName\n          serviceType\n          yearsInBusiness\n          offersDiscount\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, location, availability of indoor facility, and linked vendor's name, service type, years in business, and discount offers of wedding venues with a capacity greater than 200.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}", "schemaPath": "weddings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the course name, language taught, platform name, and website of language courses for beginners.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LanguageCourse(\n      where: {\n        path: [\"difficultyLevel\"],\n        operator: Equal,\n        valueText: \"beginner\"\n      }\n    ) {\n      courseName\n      languageTaught\n      platform {\n        ... on LearningPlatform {\n          platformName\n          website\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the course name, language taught, platform name, and website of language courses for beginners.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the pet name, species, breed, age, owner's full name, address, and contact number of pets older than 5 years.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Pet(\n      where: {\n        path: [\"age\"],\n        operator: GreaterThan,\n        valueInt: 5\n      }\n    ) {\n      petName\n      species\n      breed\n      age\n      owner {\n        ... on Person {\n          fullName\n          address\n          contactNumber\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the pet name, species, breed, age, owner's full name, address, and contact number of pets older than 5 years.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the award name, year established, and awarding organization's name of literary awards established after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LiteraryAward(\n      where: {\n        path: [\"yearEstablished\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      awardName\n      yearEstablished\n      awardingOrganization {\n        ... on Organization {\n          organizationName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the award name, year established, and awarding organization's name of literary awards established after the year 2000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, material, and linked gemstone's name and hardness of jewelry items with a price less than 1000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JewelryItem(\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 1000\n      }\n    ) {\n      name\n      material\n      gemstone {\n        ... on Gemstone {\n          name\n          hardness\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, material, and linked gemstone's name and hardness of jewelry items with a price less than 1000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, overview, and affiliated university's name and campus location of research institutes located in New York.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ResearchInstitute(\n      where: {\n        path: [\"location\"],\n        operator: Equal,\n        valueText: \"New York\"\n      }\n    ) {\n      instituteName\n      overview\n      affiliatedUniversity {\n        ... on University {\n          name\n          campusLocation\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, overview, and affiliated university's name and campus location of research institutes located in New York.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}", "schemaPath": "researchinstitute.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the service name, features, bank name, and headquarters of the banking services with the name \"Online Banking\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BankingService(\n      where: {\n        path: [\"serviceName\"],\n        operator: Equal,\n        valueText: \"Online Banking\"\n      }\n    ) {\n      serviceName\n      features\n      bank {\n        ... on Bank {\n          bankName\n          headquarters\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the service name, features, bank name, and headquarters of the banking services with the name \"Online Banking\".\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}", "schemaPath": "onlinebanking.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the operating system name, supported devices, and parent company's name of the operating systems with the version equal to \"Windows 10\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OperatingSystem(\n      where: {\n        path: [\"version\"],\n        operator: Equal,\n        valueText: \"Windows 10\"\n      }\n    ) {\n      osName\n      supportedDevices\n      parentCompany {\n        ... on Company {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the operating system name, supported devices, and parent company's name of the operating systems with the version equal to \"Windows 10\".\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "operatingsystem.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the shop name and details of the best selling teas from Tea Shops located in New York.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TeaShop(\n      where: {\n        path: [\"location\"],\n        operator: Equal,\n        valueText: \"New York\"\n      }\n    ) {\n      shopName\n      bestSellingTeas {\n        ... on TeaVariety {\n          teaName\n          origin\n          flavorProfile\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the shop name and details of the best selling teas from Tea Shops located in New York.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}", "schemaPath": "teashops.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the mission name, objective, mission status, and linked space agency's name and headquarters of space missions launched after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SpaceMission(\n      where: {\n        path: [\"launchYear\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      missionName\n      objective\n      missionStatus\n      spaceAgency {\n        ... on SpaceAgency {\n          agencyName\n          headquarters\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the mission name, objective, mission status, and linked space agency's name and headquarters of space missions launched after the year 2000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the subject name, overview, author's name, bio, and published works count of biographies published after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Biography(\n      where: {\n        path: [\"publicationYear\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      subjectName\n      overview\n      author {\n        ... on Author {\n          name\n          bio\n          publishedWorksCount\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the subject name, overview, author's name, bio, and published works count of biographies published after the year 2000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the name, mission, focus area, and linked founder's full name of non-profit organizations founded after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NonProfit(\n      where: {\n        path: [\"foundedYear\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ) {\n      name\n      mission\n      focusArea\n      founder {\n        ... on Person {\n          fullName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the name, mission, focus area, and linked founder's full name of non-profit organizations founded after the year 2000.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the truck name, cuisine type, and linked owner's entrepreneur name of food trucks located in New York.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FoodTruck(\n      where: {\n        path: [\"location\"],\n        operator: Equal,\n        valueText: \"New York\"\n      }\n    ) {\n      truckName\n      cuisineType\n      owner {\n        ... on FoodEntrepreneur {\n          entrepreneurName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the truck name, cuisine type, and linked owner's entrepreneur name of food trucks located in New York.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}", "schemaPath": "foodtrucks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the application name, description, and linked developer's company name of iOS applications.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ARApplication(\n      where: {\n        path: [\"platform\"],\n        operator: Equal,\n        valueText: \"iOS\"\n      }\n    ) {\n      appName\n      description\n      developer {\n        ... on SoftwareCompany {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the application name, description, and linked developer's company name of iOS applications.\n```", "apiRef": "A single-condition filter\n\nTo add a filter, you must provide at least one where condition to your query.\n\nThe following example specifies that the round property must equal \"Double Jeopardy!\". Note that the valueText parameter is used since the property datatype is text.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      where: {\n        path: [\"round\"],\n        operator: Equal,\n        valueText: \"Double Jeopardy!\"\n      }\n    ) {\n      question\n      answer\n      round\n    }\n  }\n}\n```", "apiRefPath": "get-single-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average molar mass of Chemical Compounds related to \"organic chemistry\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ChemicalCompound(\n      nearText: {\n        concepts: [\"organic chemistry\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      molarMass {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average molar mass of Chemical Compounds related to \"organic chemistry\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average annualOutput of EnergySource objects related to \"solar energy\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    EnergySource(\n      nearText: {\n        concepts: [\"solar energy\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      annualOutput {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average annualOutput of EnergySource objects related to \"solar energy\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average burnTime of Candles with a scent similar to \"Vanilla Scented\" within a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Candle(\n      nearText: {\n        concepts: [\"Vanilla Scented\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      burnTime {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average burnTime of Candles with a scent similar to \"Vanilla Scented\" within a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "candles.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the total number of tournament wins for Esports Teams related to \"competitive gaming\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    EsportsTeam(\n      nearText: {\n        concepts: [\"competitive gaming\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      tournamentWinsCount {\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the total number of tournament wins for Esports Teams related to \"competitive gaming\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average yearsOfExperience of Doctors specializing in \"Cardiology\" with a maximum distance of 0.2? Please limit results to the top 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Doctor(\n      nearText: {\n        concepts: [\"Cardiologist\"],\n        distance: 0.2\n      },\n      objectLimit: 100\n    ) {\n      yearsOfExperience {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average yearsOfExperience of Doctors specializing in \"Cardiology\" with a maximum distance of 0.2? Please limit results to the top 100.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average yearsActive of Photographers specializing in \"portrait photography\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Photographer(\n      nearText: {\n        concepts: [\"portrait photography\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      yearsActive {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average yearsActive of Photographers specializing in \"portrait photography\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of Home Appliances that are similar to \"smart device\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    HomeAppliance(\n      nearText: {\n        concepts: [\"smart device\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of Home Appliances that are similar to \"smart device\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of Furniture that is similar to a \"chair\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Furniture(\n      nearText: {\n        concepts: [\"chair\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of Furniture that is similar to a \"chair\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "furniture.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average membership price of Gyms related to \"fitness\" and \"exercise\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Gym(\n      nearText: {\n        concepts: [\"fitness\", \"exercise\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      membershipPrice {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average membership price of Gyms related to \"fitness\" and \"exercise\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}", "schemaPath": "gyms.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average establishedYear of National Parks about \"Yellowstone National Park\" with a maximum distance of 0.3. Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    NationalPark(\n      nearText: {\n        concepts: [\"Yellowstone National Park\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      establishedYear {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average establishedYear of National Parks about \"Yellowstone National Park\" with a maximum distance of 0.3. Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average age of Pets that are similar to \"Golden Retriever\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Pet(\n      nearText: {\n        concepts: [\"Golden Retriever\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      age {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average age of Pets that are similar to \"Golden Retriever\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average year established of Literary Awards related to \"Nobel Prize\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    LiteraryAward(\n      nearText: {\n        concepts: [\"Nobel Prize\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      yearEstablished {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average year established of Literary Awards related to \"Nobel Prize\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average launchYear of SpaceMissions related to \"moon landing\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    SpaceMission(\n      nearText: {\n        concepts: [\"moon landing\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      launchYear {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average launchYear of SpaceMissions related to \"moon landing\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average publication year of Biographies about \"Famous Scientists\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Biography(\n      nearText: {\n        concepts: [\"Famous Scientists\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      publicationYear {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average publication year of Biographies about \"Famous Scientists\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average foundedYear of NonProfit organizations related to \"education\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    NonProfit(\n      nearText: {\n        concepts: [\"education\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      foundedYear {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average foundedYear of NonProfit organizations related to \"education\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average lengthKm of HikingTrails that are about \"mountain\" and \"scenic\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    HikingTrail(\n      nearText: {\n        concepts: [\"mountain\", \"scenic\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      lengthKm {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average lengthKm of HikingTrails that are about \"mountain\" and \"scenic\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}", "schemaPath": "hikingtrails.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the chemical compounds with a hybrid search of 'organic', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the compound name and formula properties, weighting formula twice as high. Please show the compound name, formula, molar mass, and information about the elements it contains including the element name, symbol, atomic number, and whether it is a metal.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ChemicalCompound(\n      hybrid: {\n        query: \"organic\",\n        properties: [\"compoundName\", \"formula^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      compoundName\n      formula\n      molarMass\n      containsElements {\n        ... on ChemicalElement {\n          elementName\n          symbol\n          atomicNumber\n          isMetal\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the chemical compounds with a hybrid search of 'organic', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the compound name and formula properties, weighting formula twice as high. Please show the compound name, formula, molar mass, and information about the elements it contains including the element name, symbol, atomic number, and whether it is a metal.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the marine species with a hybrid search of 'coral reef', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the speciesName and habitat properties, weighting habitat twice as high. Please show the speciesName, habitat, conservation status, and researcher's name and research area.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MarineSpecies(\n      hybrid: {\n        query: \"coral reef\",\n        properties: [\"speciesName\", \"habitat^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      speciesName\n      habitat\n      conservationStatus\n      researcher {\n        ... on MarineBiologist {\n          biologistName\n          researchArea\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the marine species with a hybrid search of 'coral reef', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the speciesName and habitat properties, weighting habitat twice as high. Please show the speciesName, habitat, conservation status, and researcher's name and research area.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the robots with a hybrid search of 'autonomous', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the robotName and function properties, weighting function twice as high. Please show the robotName, function, and the manufacturer's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Robot(\n      hybrid: {\n        query: \"autonomous\",\n        properties: [\"robotName\", \"function^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      robotName\n      function\n      manufacturer {\n        ... on RoboticsCompany {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the robots with a hybrid search of 'autonomous', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the robotName and function properties, weighting function twice as high. Please show the robotName, function, and the manufacturer's company name.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}", "schemaPath": "robotics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the civilizations with a hybrid search of 'ancient', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the civilization name and time period properties, weighting time period twice as high. Please show the civilization name, time period, notable technologies, languages, and major ruins' site name and location.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Civilization(\n      hybrid: {\n        query: \"ancient\",\n        properties: [\"civilizationName\", \"timePeriod^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      civilizationName\n      timePeriod\n      notableTechnologies\n      languages\n      majorRuins {\n        ... on Ruins {\n          siteName\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the civilizations with a hybrid search of 'ancient', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the civilization name and time period properties, weighting time period twice as high. Please show the civilization name, time period, notable technologies, languages, and major ruins' site name and location.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}", "schemaPath": "ancientcivilization.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the streaming platforms with a hybrid search of 'Netflix', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the platformName and overview properties, weighting platformName twice as high. Please show the platformName, overview, subscriptionCost, availableRegions, and top shows' title, genre, release year, and description.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    StreamingPlatform(\n      hybrid: {\n        query: \"Netflix\",\n        properties: [\"platformName^2\", \"overview\"],\n        alpha: 0.75\n      },\n      limit: 3\n    ) {\n      platformName\n      overview\n      subscriptionCost\n      availableRegions\n      topShows {\n        ... on Show {\n          title\n          genre\n          releaseYear\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the streaming platforms with a hybrid search of 'Netflix', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the platformName and overview properties, weighting platformName twice as high. Please show the platformName, overview, subscriptionCost, availableRegions, and top shows' title, genre, release year, and description.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the cosmetic products with a hybrid search of 'lipstick', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the productName and shade properties, weighting shade twice as high. Please show the productName, brand name, type, shade, ingredients, and whether it is vegan.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CosmeticProduct(\n      hybrid: {\n        query: \"lipstick\",\n        properties: [\"productName\", \"shade^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      productName\n      brand {\n        ... on Brand {\n          brandName\n        }\n      }\n      type\n      shade\n      ingredients\n      isVegan\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the cosmetic products with a hybrid search of 'lipstick', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the productName and shade properties, weighting shade twice as high. Please show the productName, brand name, type, shade, ingredients, and whether it is vegan.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}", "schemaPath": "cosmetics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the energy sources with a hybrid search of 'solar power', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the sourceType and description properties, weighting description twice as high. Please show the source type, description, annual output, residential availability, and provider's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EnergySource(\n      hybrid: {\n        query: \"solar power\",\n        properties: [\"sourceType\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      sourceType\n      description\n      annualOutput\n      isResidential\n      provider {\n        ... on EnergyProvider {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the energy sources with a hybrid search of 'solar power', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the sourceType and description properties, weighting description twice as high. Please show the source type, description, annual output, residential availability, and provider's company name.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the plants with a hybrid search of 'rose', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the common name and scientific name properties, weighting scientific name twice as high. Please show the common name, scientific name, habitat, growth habit, endangered status, and fertilizer needs including the type and application frequency.\n```\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      hybrid: {\n        query: \"rose\",\n        properties: [\"commonName\", \"scientificName^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      commonName\n      scientificName\n      habitat\n      growthHabit\n      isEndangered\n      fertilizerNeeds {\n        ... on Fertilizer {\n          type\n          applicationFrequency\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the plants with a hybrid search of 'rose', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the common name and scientific name properties, weighting scientific name twice as high. Please show the common name, scientific name, habitat, growth habit, endangered status, and fertilizer needs including the type and application frequency.\n```\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}", "schemaPath": "plants.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the candles with a hybrid search of 'lavender', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the candleName and scent properties, weighting scent twice as high. Please show the candleName, scent, burnTime, price, manufacturer's name, location, and contact.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Candle(\n      hybrid: {\n        query: \"lavender\",\n        properties: [\"candleName\", \"scent^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      candleName\n      scent\n      burnTime\n      price\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the candles with a hybrid search of 'lavender', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the candleName and scent properties, weighting scent twice as high. Please show the candleName, scent, burnTime, price, manufacturer's name, location, and contact.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "candles.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the comedy specials with a hybrid search of 'funny', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the special title and description properties, weighting description twice as high. Please show the special title, description, duration, and comedian's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ComedySpecial(\n      hybrid: {\n        query: \"funny\",\n        properties: [\"specialTitle\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      specialTitle\n      description\n      duration\n      comedian {\n        ... on Comedian {\n          comedianName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the comedy specials with a hybrid search of 'funny', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the special title and description properties, weighting description twice as high. Please show the special title, description, duration, and comedian's name.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the mobile apps with a hybrid search of 'social media', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the appName and description properties, weighting description twice as high. Please show the appName, description, developer, rating, whether it is free, and the supported operating system's name and version.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MobileApp(\n      hybrid: {\n        query: \"social media\",\n        properties: [\"appName\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      appName\n      description\n      developer\n      rating\n      isFree\n      supportedOS {\n        ... on OperatingSystem {\n          osName\n          version\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the mobile apps with a hybrid search of 'social media', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the appName and description properties, weighting description twice as high. Please show the appName, description, developer, rating, whether it is free, and the supported operating system's name and version.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}", "schemaPath": "mobileapplications.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the magic tricks with a hybrid search of 'levitation', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the trick name and description properties, weighting description twice as high. Please show the trick name, description, difficulty level, and performer's magician name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MagicTrick(\n      hybrid: {\n        query: \"levitation\",\n        properties: [\"trickName\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      trickName\n      description\n      difficultyLevel\n      performer {\n        ... on Magician {\n          magicianName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the magic tricks with a hybrid search of 'levitation', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the trick name and description properties, weighting description twice as high. Please show the trick name, description, difficulty level, and performer's magician name.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the fireworks with a hybrid search of 'sparklers', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the fireworkName and effects properties, weighting effects twice as high. Please show the fireworkName, effects, duration, safety guidelines, manufacturer's name, location, and contact.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Firework(\n      hybrid: {\n        query: \"sparklers\",\n        properties: [\"fireworkName\", \"effects^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      fireworkName\n      effects\n      duration\n      safetyGuidelines\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the fireworks with a hybrid search of 'sparklers', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the fireworkName and effects properties, weighting effects twice as high. Please show the fireworkName, effects, duration, safety guidelines, manufacturer's name, location, and contact.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "fireworks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the esports teams with a hybrid search of 'competitive', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the teamName and gamesPlayed properties, weighting gamesPlayed twice as high. Please show the teamName, members' playerName, nickname, gameSpecialization, yearsActive, and isRetired, as well as the gamesPlayed, tournamentWinsCount, and isActive.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EsportsTeam(\n      hybrid: {\n        query: \"competitive\",\n        properties: [\"teamName\", \"gamesPlayed^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      teamName\n      members {\n        ... on Player {\n          playerName\n          nickname\n          gameSpecialization\n          yearsActive\n          isRetired\n        }\n      }\n      gamesPlayed\n      tournamentWinsCount\n      isActive\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the esports teams with a hybrid search of 'competitive', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the teamName and gamesPlayed properties, weighting gamesPlayed twice as high. Please show the teamName, members' playerName, nickname, gameSpecialization, yearsActive, and isRetired, as well as the gamesPlayed, tournamentWinsCount, and isActive.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the doctors specializing in cardiology, please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the doctorName and specialization properties, weighting specialization twice as high. Please show the doctor's name, specialization, years of experience, clinic name, location, and operational hours.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Doctor(\n      hybrid: {\n        query: \"cardiology\",\n        properties: [\"doctorName\", \"specialization^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      doctorName\n      specialization\n      yearsOfExperience\n      clinic {\n        ... on Clinic {\n          clinicName\n          location\n          operationalHours\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the doctors specializing in cardiology, please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the doctorName and specialization properties, weighting specialization twice as high. Please show the doctor's name, specialization, years of experience, clinic name, location, and operational hours.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the photographers with a hybrid search of 'portrait', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the fullName and bio properties, weighting bio twice as high. Please show the fullName, bio, yearsActive, and specialization's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Photographer(\n      hybrid: {\n        query: \"portrait\",\n        properties: [\"fullName\", \"bio^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      fullName\n      bio\n      yearsActive\n      specialization {\n        ... on PhotographyGenre {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the photographers with a hybrid search of 'portrait', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the fullName and bio properties, weighting bio twice as high. Please show the fullName, bio, yearsActive, and specialization's name.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the colleges with a hybrid search of 'computer science', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the college name and description properties, weighting description twice as high. Please show the college name, location, established year, description, and the courses' names, durations, and descriptions. Limit the results to 10.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    College(\n      hybrid: {\n        query: \"computer science\",\n        properties: [\"collegeName\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      collegeName\n      location\n      establishedYear\n      description\n      courses {\n        ... on Course {\n          courseName\n          duration\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the colleges with a hybrid search of 'computer science', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the college name and description properties, weighting description twice as high. Please show the college name, location, established year, description, and the courses' names, durations, and descriptions. Limit the results to 10.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the home appliances with a hybrid search of 'refrigerator', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the appliance name and type properties, weighting type twice as high. Please show the appliance name, brand, type, energy rating, whether it is a smart device, price, warranty duration, and warranty coverage.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HomeAppliance(\n      hybrid: {\n        query: \"refrigerator\",\n        properties: [\"applianceName\", \"type^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      applianceName\n      brand\n      type\n      energyRating\n      isSmartDevice\n      price\n      warranty {\n        ... on Warranty {\n          duration\n          coverage\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the home appliances with a hybrid search of 'refrigerator', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the appliance name and type properties, weighting type twice as high. Please show the appliance name, brand, type, energy rating, whether it is a smart device, price, warranty duration, and warranty coverage.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the VR experiences with a hybrid search of 'action', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and genre properties, weighting genre twice as high. Please show the title, developer's name, genre, release year, and whether it is multiplayer. \n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    VRExperience(\n      hybrid: {\n        query: \"action\",\n        properties: [\"title\", \"genre^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      title\n      developer {\n        ... on Developer {\n          name\n        }\n      }\n      genre\n      releaseYear\n      isMultiplayer\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the VR experiences with a hybrid search of 'action', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and genre properties, weighting genre twice as high. Please show the title, developer's name, genre, release year, and whether it is multiplayer. \n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the toys with a hybrid search of 'action figure', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the toyName and brand properties, weighting brand twice as high. Please show the toyName, brand, recommendedAge, battery operation status, price, and related board game's name, description, and number of players.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Toy(\n      hybrid: {\n        query: \"action figure\",\n        properties: [\"toyName\", \"brand^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      toyName\n      brand\n      recommendedAge\n      isBatteryOperated\n      price\n      relatedGame {\n        ... on BoardGame {\n          gameName\n          description\n          numberOfPlayers\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the toys with a hybrid search of 'action figure', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the toyName and brand properties, weighting brand twice as high. Please show the toyName, brand, recommendedAge, battery operation status, price, and related board game's name, description, and number of players.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the drugs with a hybrid search of 'headache', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the drug name and active ingredient properties, weighting active ingredient twice as high. Please show the drug name, active ingredient, approval year, over-the-counter status, and manufacturer's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Drug(\n      hybrid: {\n        query: \"headache\",\n        properties: [\"drugName\", \"activeIngredient^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      drugName\n      activeIngredient\n      approvalYear\n      isOTC\n      manufacturer {\n        ... on Manufacturer {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the drugs with a hybrid search of 'headache', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the drug name and active ingredient properties, weighting active ingredient twice as high. Please show the drug name, active ingredient, approval year, over-the-counter status, and manufacturer's company name.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the rollercoasters with a hybrid search of 'thrilling', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, height, operating status, and the name and location of the amusement park.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Rollercoaster(\n      hybrid: {\n        query: \"thrilling\",\n        properties: [\"name\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      name\n      description\n      height\n      isOperating\n      park {\n        ... on AmusementPark {\n          name\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the rollercoasters with a hybrid search of 'thrilling', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and description properties, weighting description twice as high. Please show the name, description, height, operating status, and the name and location of the amusement park.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the furniture items with a hybrid search of 'chair', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the furniture name and material properties, weighting material twice as high. Please show the furniture name, material, dimensions, price, and manufacturer's name, location, and contact information.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Furniture(\n      hybrid: {\n        query: \"chair\",\n        properties: [\"furnitureName\", \"material^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      furnitureName\n      material\n      dimensions\n      price\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the furniture items with a hybrid search of 'chair', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the furniture name and material properties, weighting material twice as high. Please show the furniture name, material, dimensions, price, and manufacturer's name, location, and contact information.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "furniture.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the digital artworks with a hybrid search of 'abstract', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and description properties, weighting description twice as high. Please show the title, artist's name and portfolio link, description, year, medium, and availability.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DigitalArtwork(\n      hybrid: {\n        query: \"abstract\",\n        properties: [\"title\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      title\n      artist {\n        ... on Artist {\n          name\n          portfolioLink\n        }\n      }\n      description\n      year\n      medium\n      isForSale\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the digital artworks with a hybrid search of 'abstract', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the title and description properties, weighting description twice as high. Please show the title, artist's name and portfolio link, description, year, medium, and availability.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the film festivals with a hybrid search of 'Cannes', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the festival name and description properties, weighting festival name twice as high. Please show the festival name, location, description, and the featured film's title and director.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FilmFestival(\n      hybrid: {\n        query: \"Cannes\",\n        properties: [\"festivalName^2\", \"description\"],\n        alpha: 0.75\n      },\n      limit: 3\n    ) {\n      festivalName\n      location\n      description\n      featuredFilm {\n        ... on Film {\n          filmTitle\n          director\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the film festivals with a hybrid search of 'Cannes', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the festival name and description properties, weighting festival name twice as high. Please show the festival name, location, description, and the featured film's title and director.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}", "schemaPath": "filmfestivals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the local businesses with a hybrid search of 'restaurant', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the business name and description properties, weighting description twice as high. Please show the business name, description, address, contact number, open status, rating, and services with their respective service name and price.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LocalBusiness(\n      hybrid: {\n        query: \"restaurant\",\n        properties: [\"businessName\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      businessName\n      description\n      address\n      contactNumber\n      isOpen\n      rating\n      services {\n        ... on Service {\n          serviceName\n          price\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the local businesses with a hybrid search of 'restaurant', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the business name and description properties, weighting description twice as high. Please show the business name, description, address, contact number, open status, rating, and services with their respective service name and price.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the boats with a hybrid search of 'sailboat', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the boatName and type properties, weighting type twice as high. Please show the boatName, type, capacity, whether it is motorized, and the manufacturer's company name.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Boat(\n      hybrid: {\n        query: \"sailboat\",\n        properties: [\"boatName\", \"type^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      boatName\n      type\n      capacity\n      isMotorized\n      manufacturer {\n        ... on BoatManufacturer {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the boats with a hybrid search of 'sailboat', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the boatName and type properties, weighting type twice as high. Please show the boatName, type, capacity, whether it is motorized, and the manufacturer's company name.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the pottery items with a hybrid search of 'ceramic', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the itemName and description properties, weighting description twice as high. Please show the itemName, description, type, dateCreated, and craftsman's potterName, biography, and studioLocation.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PotteryItem(\n      hybrid: {\n        query: \"ceramic\",\n        properties: [\"itemName\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      itemName\n      description\n      type\n      dateCreated\n      craftsman {\n        ... on Potter {\n          potterName\n          biography\n          studioLocation\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the pottery items with a hybrid search of 'ceramic', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the itemName and description properties, weighting description twice as high. Please show the itemName, description, type, dateCreated, and craftsman's potterName, biography, and studioLocation.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}", "schemaPath": "pottery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the national parks with a hybrid search of 'mountain', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the park name and description properties, weighting description twice as high. Please show the park name, description, location, established year, entry fee status, wildlife, and facilities with their names and descriptions.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NationalPark(\n      hybrid: {\n        query: \"mountain\",\n        properties: [\"parkName\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 3\n    ) {\n      parkName\n      description\n      location\n      establishedYear\n      isEntryFree\n      wildlife\n      facilities {\n        ... on Facility {\n          facilityName\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the national parks with a hybrid search of 'mountain', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the park name and description properties, weighting description twice as high. Please show the park name, description, location, established year, entry fee status, wildlife, and facilities with their names and descriptions.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the wedding venues with a hybrid search of 'outdoor', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and location properties, weighting location twice as high. Please show the name, location, capacity, whether it has an indoor facility, and the vendor's name and service type.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeddingVenue(\n      hybrid: {\n        query: \"outdoor\",\n        properties: [\"name\", \"location^2\"],\n        alpha: 0.75\n      },\n      limit: 3\n    ) {\n      name\n      location\n      capacity\n      hasIndoorFacility\n      vendors {\n        ... on Vendor {\n          vendorName\n          serviceType\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the wedding venues with a hybrid search of 'outdoor', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and location properties, weighting location twice as high. Please show the name, location, capacity, whether it has an indoor facility, and the vendor's name and service type.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}", "schemaPath": "weddings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the language courses with a hybrid search of 'beginner', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the course name and difficulty level properties, weighting difficulty level twice as high. Please show the course name, language taught, difficulty level, platform name, and website.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LanguageCourse(\n      hybrid: {\n        query: \"beginner\",\n        properties: [\"courseName\", \"difficultyLevel^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      courseName\n      languageTaught\n      difficultyLevel\n      platform {\n        ... on LearningPlatform {\n          platformName\n          website\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the language courses with a hybrid search of 'beginner', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the course name and difficulty level properties, weighting difficulty level twice as high. Please show the course name, language taught, difficulty level, platform name, and website.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the pets with a hybrid search of 'dog', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the petName and breed properties, weighting breed twice as high. Please show the petName, species, breed, age, and owner's full name, address, and contact number.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Pet(\n      hybrid: {\n        query: \"dog\",\n        properties: [\"petName\", \"breed^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      petName\n      species\n      breed\n      age\n      owner {\n        ... on Person {\n          fullName\n          address\n          contactNumber\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the pets with a hybrid search of 'dog', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the petName and breed properties, weighting breed twice as high. Please show the petName, species, breed, age, and owner's full name, address, and contact number.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the literary awards with a hybrid search of 'Nobel Prize', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the award name and genres covered properties, weighting award name twice as high. Please show the award name, year established, and awarding organization's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LiteraryAward(\n      hybrid: {\n        query: \"Nobel Prize\",\n        properties: [\"awardName^2\", \"genresCovered\"],\n        alpha: 0.75\n      },\n      limit: 3\n    ) {\n      awardName\n      yearEstablished\n      awardingOrganization {\n        ... on Organization {\n          organizationName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the literary awards with a hybrid search of 'Nobel Prize', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the award name and genres covered properties, weighting award name twice as high. Please show the award name, year established, and awarding organization's name.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the jewelry items with a hybrid search of 'necklace', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and material properties, weighting name twice as high. Please show the name, material, gemstone's name and hardness, price, and whether it is handmade. Limit the results to 10.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JewelryItem(\n      hybrid: {\n        query: \"necklace\",\n        properties: [\"name^2\", \"material\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      name\n      material\n      gemstone {\n        ... on Gemstone {\n          name\n          hardness\n        }\n      }\n      price\n      isHandmade\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the jewelry items with a hybrid search of 'necklace', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the name and material properties, weighting name twice as high. Please show the name, material, gemstone's name and hardness, price, and whether it is handmade. Limit the results to 10.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the research institutes with a hybrid search of 'technology', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the institute name and overview properties, weighting the overview twice as high. Please show the institute name, overview, location, affiliated university's name, campus location, and establishment year. Limit the results to 10.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ResearchInstitute(\n      hybrid: {\n        query: \"technology\",\n        properties: [\"instituteName\", \"overview^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      instituteName\n      overview\n      location\n      affiliatedUniversity {\n        ... on University {\n          name\n          campusLocation\n          establishmentYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the research institutes with a hybrid search of 'technology', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the institute name and overview properties, weighting the overview twice as high. Please show the institute name, overview, location, affiliated university's name, campus location, and establishment year. Limit the results to 10.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}", "schemaPath": "researchinstitute.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the banking services with a hybrid search of 'online banking', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the serviceName and features properties, weighting features twice as high. Please show the serviceName, features, bank name, and headquarters.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BankingService(\n      hybrid: {\n        query: \"online banking\",\n        properties: [\"serviceName\", \"features^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      serviceName\n      features\n      bank {\n        ... on Bank {\n          bankName\n          headquarters\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the banking services with a hybrid search of 'online banking', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the serviceName and features properties, weighting features twice as high. Please show the serviceName, features, bank name, and headquarters.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}", "schemaPath": "onlinebanking.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the operating systems with a hybrid search of 'Windows', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the osName and version properties, weighting osName twice as high. Please show the osName, version, supported devices, and parent company's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OperatingSystem(\n      hybrid: {\n        query: \"Windows\",\n        properties: [\"osName^2\", \"version\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      osName\n      version\n      supportedDevices\n      parentCompany {\n        ... on Company {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the operating systems with a hybrid search of 'Windows', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the osName and version properties, weighting osName twice as high. Please show the osName, version, supported devices, and parent company's name.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "operatingsystem.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the freelancers with a hybrid search of 'web development', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the freelancerName and skills properties, weighting skills twice as high. Please show the freelancerName, skills, rate, portfolio, and client reviews including the client's name, review text, and rating. Limit the results to 10.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Freelancer(\n      hybrid: {\n        query: \"web development\",\n        properties: [\"freelancerName\", \"skills^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      freelancerName\n      skills\n      rate\n      portfolio\n      clientReviews {\n        ... on ClientReview {\n          clientName\n          reviewText\n          rating\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the freelancers with a hybrid search of 'web development', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the freelancerName and skills properties, weighting skills twice as high. Please show the freelancerName, skills, rate, portfolio, and client reviews including the client's name, review text, and rating. Limit the results to 10.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}", "schemaPath": "freelancers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the space missions with a hybrid search of 'moon landing', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the mission name and objective properties, weighting objective twice as high. Please show the mission name, objective, launch year, mission status, and space agency's name, founded year, and headquarters.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SpaceMission(\n      hybrid: {\n        query: \"moon landing\",\n        properties: [\"missionName\", \"objective^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      missionName\n      objective\n      launchYear\n      missionStatus\n      spaceAgency {\n        ... on SpaceAgency {\n          agencyName\n          foundedYear\n          headquarters\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the space missions with a hybrid search of 'moon landing', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the mission name and objective properties, weighting objective twice as high. Please show the mission name, objective, launch year, mission status, and space agency's name, founded year, and headquarters.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the biographies with a hybrid search of 'Albert Einstein', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the subject name and overview properties, weighting overview twice as high. Please show the subject name, overview, author's name, and publication year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Biography(\n      hybrid: {\n        query: \"Albert Einstein\",\n        properties: [\"subjectName\", \"overview^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      subjectName\n      overview\n      author {\n        ... on Author {\n          name\n        }\n      }\n      publicationYear\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the biographies with a hybrid search of 'Albert Einstein', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the subject name and overview properties, weighting overview twice as high. Please show the subject name, overview, author's name, and publication year.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the nanotech applications with a hybrid search of 'nanoparticles', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the application name and overview properties, weighting the overview twice as high. Please show the application name, overview, and leading researchers' names and affiliations.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NanotechApplication(\n      hybrid: {\n        query: \"nanoparticles\",\n        properties: [\"applicationName\", \"overview^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      applicationName\n      overview\n      leadingResearchers {\n        ... on Researcher {\n          name\n          affiliation\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the nanotech applications with a hybrid search of 'nanoparticles', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the application name and overview properties, weighting the overview twice as high. Please show the application name, overview, and leading researchers' names and affiliations.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}", "schemaPath": "nanotechnology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the non-profit organizations with a hybrid search of 'education', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the name and mission properties, weighting mission twice as high. Please show the name, mission, founded year, focus area, and founder's full name.\n```\n\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NonProfit(\n      hybrid: {\n        query: \"education\",\n        properties: [\"name\", \"mission^2\"],\n        alpha: 0.5\n      },\n      limit: 5\n    ) {\n      name\n      mission\n      foundedYear\n      focusArea\n      founder {\n        ... on Person {\n          fullName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the non-profit organizations with a hybrid search of 'education', please use an alpha value of 0.5 in the hybrid search and perform the BM25 search on the name and mission properties, weighting mission twice as high. Please show the name, mission, founded year, focus area, and founder's full name.\n```\n", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the hiking trails with a hybrid search of 'mountain', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the trail name and location properties, weighting location twice as high. Please show the trail name, location, length in kilometers, difficulty level, nearest town's name, and population.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HikingTrail(\n      hybrid: {\n        query: \"mountain\",\n        properties: [\"trailName\", \"location^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      trailName\n      location\n      lengthKm\n      difficultyLevel\n      nearestTown {\n        ... on Town {\n          townName\n          population\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the hiking trails with a hybrid search of 'mountain', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the trail name and location properties, weighting location twice as high. Please show the trail name, location, length in kilometers, difficulty level, nearest town's name, and population.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}", "schemaPath": "hikingtrails.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the food trucks with a hybrid search of 'tacos', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the truck name and cuisine type properties, weighting cuisine type twice as high. Please show the truck name, cuisine type, location, and owner's entrepreneur name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FoodTruck(\n      hybrid: {\n        query: \"tacos\",\n        properties: [\"truckName\", \"cuisineType^2\"],\n        alpha: 0.75\n      },\n      limit: 5\n    ) {\n      truckName\n      cuisineType\n      location\n      owner {\n        ... on FoodEntrepreneur {\n          entrepreneurName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the food trucks with a hybrid search of 'tacos', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the truck name and cuisine type properties, weighting cuisine type twice as high. Please show the truck name, cuisine type, location, and owner's entrepreneur name.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}", "schemaPath": "foodtrucks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the AR applications with a hybrid search of 'augmented reality', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the appName and description properties, weighting description twice as high. Please show the appName, description, platform, and developer's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ARApplication(\n      hybrid: {\n        query: \"augmented reality\",\n        properties: [\"appName\", \"description^2\"],\n        alpha: 0.75\n      },\n      limit: 10\n    ) {\n      appName\n      description\n      platform\n      developer {\n        ... on SoftwareCompany {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the AR applications with a hybrid search of 'augmented reality', please use an alpha value of 0.75 in the hybrid search and perform the BM25 search on the appName and description properties, weighting description twice as high. Please show the appName, description, platform, and developer's company name.\n```", "apiRef": "Weight (boost) searched properties in Hybrid Search\n\nYou can specify weighting of object\u00a0`properties`\u00a0in how they affect the BM25F component of hybrid searches.\n\nThe below example searches for objects containing the keyword\u00a0`food`. The BM25 search is done in the\u00a0`question`\u00a0property and the\u00a0`answer`\u00a0property, with the\u00a0`question`\u00a0property's weighting boosted by 2, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\",\n        properties: [\"question^2\", \"answer\"],\n        alpha: 0.25\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid-weight-properties.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the chemical compounds with a hybrid search of 'organic', and show the compound name, formula, molar mass, and the elements it contains. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ChemicalCompound(\n      hybrid: {\n        query: \"organic\"\n      },\n      limit: 5\n    ) {\n      compoundName\n      formula\n      molarMass\n      containsElements {\n        ... on ChemicalElement {\n          elementName\n          symbol\n          atomicNumber\n          isMetal\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the chemical compounds with a hybrid search of 'organic', and show the compound name, formula, molar mass, and the elements it contains. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the marine species with a hybrid search of 'coral reef', and show the species name, habitat, conservation status, and researcher's name and research area. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MarineSpecies(\n      hybrid: {\n        query: \"coral reef\"\n      },\n      limit: 5\n    ) {\n      speciesName\n      habitat\n      conservationStatus\n      researcher {\n        ... on MarineBiologist {\n          biologistName\n          researchArea\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the marine species with a hybrid search of 'coral reef', and show the species name, habitat, conservation status, and researcher's name and research area. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 robots with a hybrid search of 'autonomous', and show the robot name, function, and manufacturer's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Robot(\n      hybrid: {\n        query: \"autonomous\"\n      },\n      limit: 5\n    ) {\n      robotName\n      function\n      manufacturer {\n        ... on RoboticsCompany {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 robots with a hybrid search of 'autonomous', and show the robot name, function, and manufacturer's company name.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}", "schemaPath": "robotics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the civilizations with a hybrid search of 'ancient', limit the results to 5. Show me the civilization name, time period, notable technologies, languages, and major ruins' site name and location.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Civilization(\n      hybrid: {\n        query: \"ancient\"\n      },\n      limit: 5\n    ) {\n      civilizationName\n      timePeriod\n      notableTechnologies\n      languages\n      majorRuins {\n        ... on Ruins {\n          siteName\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the civilizations with a hybrid search of 'ancient', limit the results to 5. Show me the civilization name, time period, notable technologies, languages, and major ruins' site name and location.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}", "schemaPath": "ancientcivilization.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 streaming platforms with a hybrid search of 'Netflix', and show me the platform name, overview, subscription cost, available regions, and the top shows with their title, genre, release year, and description.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    StreamingPlatform(\n      hybrid: {\n        query: \"Netflix\"\n      },\n      limit: 3\n    ) {\n      platformName\n      overview\n      subscriptionCost\n      availableRegions\n      topShows {\n        ... on Show {\n          title\n          genre\n          releaseYear\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 streaming platforms with a hybrid search of 'Netflix', and show me the platform name, overview, subscription cost, available regions, and the top shows with their title, genre, release year, and description.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the cosmetic products with a hybrid search of 'lipstick', and show the product name, brand name, type, shade, ingredients, and whether it is vegan. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CosmeticProduct(\n      hybrid: {\n        query: \"lipstick\"\n      },\n      limit: 5\n    ) {\n      productName\n      brand {\n        ... on Brand {\n          brandName\n        }\n      }\n      type\n      shade\n      ingredients\n      isVegan\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the cosmetic products with a hybrid search of 'lipstick', and show the product name, brand name, type, shade, ingredients, and whether it is vegan. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}", "schemaPath": "cosmetics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 energy sources with a hybrid search of 'solar energy', and show the source type, description, annual output, residential availability, and provider's company name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EnergySource(\n      hybrid: {\n        query: \"solar energy\"\n      },\n      limit: 5\n    ) {\n      sourceType\n      description\n      annualOutput\n      isResidential\n      provider {\n        ... on EnergyProvider {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 energy sources with a hybrid search of 'solar energy', and show the source type, description, annual output, residential availability, and provider's company name.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the plants with a hybrid search of 'medicinal', and show the common name, scientific name, habitat, growth habit, endangered status, and fertilizer needs. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      hybrid: {\n        query: \"medicinal\"\n      },\n      limit: 10\n    ) {\n      commonName\n      scientificName\n      habitat\n      growthHabit\n      isEndangered\n      fertilizerNeeds {\n        ... on Fertilizer {\n          type\n          applicationFrequency\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the plants with a hybrid search of 'medicinal', and show the common name, scientific name, habitat, growth habit, endangered status, and fertilizer needs. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}", "schemaPath": "plants.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the people with a hybrid search of 'John Doe', and show their full name, birth year, deceased status, parents' full names, DNA test provider, match percentage, and if maternal and paternal lines are tested. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Person(\n      hybrid: {\n        query: \"John Doe\"\n      },\n      limit: 10\n    ) {\n      fullName\n      birthYear\n      isDeceased\n      parents {\n        ... on Person {\n          fullName\n        }\n      }\n      dnatest {\n        ... on DNATestResult {\n          testProvider\n          matchPercentage\n          isMaternalLineTested\n          isPaternalLineTested\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the people with a hybrid search of 'John Doe', and show their full name, birth year, deceased status, parents' full names, DNA test provider, match percentage, and if maternal and paternal lines are tested. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the candles with a hybrid search of 'lavender', and show the candle name, scent, burn time, price, manufacturer's name, location, and contact information. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Candle(\n      hybrid: {\n        query: \"lavender\"\n      },\n      limit: 5\n    ) {\n      candleName\n      scent\n      burnTime\n      price\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the candles with a hybrid search of 'lavender', and show the candle name, scent, burn time, price, manufacturer's name, location, and contact information. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "candles.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the comedy specials with a hybrid search of 'stand-up comedy', and show the special title, description, duration, and comedian's name. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ComedySpecial(\n      hybrid: {\n        query: \"stand-up comedy\"\n      },\n      limit: 5\n    ) {\n      specialTitle\n      description\n      duration\n      comedian {\n        ... on Comedian {\n          comedianName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the comedy specials with a hybrid search of 'stand-up comedy', and show the special title, description, duration, and comedian's name. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 mobile apps with a hybrid search of 'social media', and show the app name, description, developer, rating, whether it is free, and the supported operating system name and version.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MobileApp(\n      hybrid: {\n        query: \"social media\"\n      },\n      limit: 10\n    ) {\n      appName\n      description\n      developer\n      rating\n      isFree\n      supportedOS {\n        ... on OperatingSystem {\n          osName\n          version\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 mobile apps with a hybrid search of 'social media', and show the app name, description, developer, rating, whether it is free, and the supported operating system name and version.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}", "schemaPath": "mobileapplications.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 magic tricks with a hybrid search of 'levitation', and show the trick name, description, difficulty level, and performer's magician name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MagicTrick(\n      hybrid: {\n        query: \"levitation\"\n      },\n      limit: 5\n    ) {\n      trickName\n      description\n      difficultyLevel\n      performer {\n        ... on Magician {\n          magicianName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 magic tricks with a hybrid search of 'levitation', and show the trick name, description, difficulty level, and performer's magician name.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the fireworks with a hybrid search of 'sparkling', and show the firework name, effects, duration, safety guidelines, manufacturer's name, location, and contact. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Firework(\n      hybrid: {\n        query: \"sparkling\"\n      },\n      limit: 5\n    ) {\n      fireworkName\n      effects\n      duration\n      safetyGuidelines\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the fireworks with a hybrid search of 'sparkling', and show the firework name, effects, duration, safety guidelines, manufacturer's name, location, and contact. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "fireworks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the esports teams with a hybrid search of 'competitive gaming', limit the results to 10. Show me the team name, members' player name, nickname, game specialization, years active, retired status, games played, tournament wins count, and active status.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EsportsTeam(\n      hybrid: {\n        query: \"competitive gaming\"\n      },\n      limit: 10\n    ) {\n      teamName\n      members {\n        ... on Player {\n          playerName\n          nickname\n          gameSpecialization\n          yearsActive\n          isRetired\n        }\n      }\n      gamesPlayed\n      tournamentWinsCount\n      isActive\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the esports teams with a hybrid search of 'competitive gaming', limit the results to 10. Show me the team name, members' player name, nickname, game specialization, years active, retired status, games played, tournament wins count, and active status.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 doctors specializing in cardiology. Show their names, specializations, years of experience, and clinic details including clinic name, location, and operational hours.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Doctor(\n      hybrid: {\n        query: \"cardiology\"\n      },\n      limit: 5\n    ) {\n      doctorName\n      specialization\n      yearsOfExperience\n      clinic {\n        ... on Clinic {\n          clinicName\n          location\n          operationalHours\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 doctors specializing in cardiology. Show their names, specializations, years of experience, and clinic details including clinic name, location, and operational hours.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 photographers specializing in portrait photography. Show their full name, bio, years active, and their specialization's name and description.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Photographer(\n      hybrid: {\n        query: \"portrait photography\"\n      },\n      limit: 10\n    ) {\n      fullName\n      bio\n      yearsActive\n      specialization {\n        ... on PhotographyGenre {\n          name\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 photographers specializing in portrait photography. Show their full name, bio, years active, and their specialization's name and description.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 colleges with a hybrid search of 'computer science', and show the college name, location, established year, description, and courses. For each course, show the course name, duration, and description.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    College(\n      hybrid: {\n        query: \"computer science\"\n      },\n      limit: 10\n    ) {\n      collegeName\n      location\n      establishedYear\n      description\n      courses {\n        ... on Course {\n          courseName\n          duration\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 colleges with a hybrid search of 'computer science', and show the college name, location, established year, description, and courses. For each course, show the course name, duration, and description.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 home appliances with a hybrid search of 'refrigerator', and show the appliance name, brand, type, energy rating, whether it is a smart device, price, warranty duration, and warranty coverage.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HomeAppliance(\n      hybrid: {\n        query: \"refrigerator\"\n      },\n      limit: 5\n    ) {\n      applianceName\n      brand\n      type\n      energyRating\n      isSmartDevice\n      price\n      warranty {\n        ... on Warranty {\n          duration\n          coverage\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 home appliances with a hybrid search of 'refrigerator', and show the appliance name, brand, type, energy rating, whether it is a smart device, price, warranty duration, and warranty coverage.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the VR experiences with a hybrid search of 'action', and show the title, developer's name, genre, release year, and whether it is multiplayer. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    VRExperience(\n      hybrid: {\n        query: \"action\"\n      },\n      limit: 10\n    ) {\n      title\n      developer {\n        ... on Developer {\n          name\n        }\n      }\n      genre\n      releaseYear\n      isMultiplayer\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the VR experiences with a hybrid search of 'action', and show the title, developer's name, genre, release year, and whether it is multiplayer. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 toys with a hybrid search of 'action figure', and show the toy name, brand, recommended age, battery-operated status, price, and related board game's name, description, and number of players.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Toy(\n      hybrid: {\n        query: \"action figure\"\n      },\n      limit: 5\n    ) {\n      toyName\n      brand\n      recommendedAge\n      isBatteryOperated\n      price\n      relatedGame {\n        ... on BoardGame {\n          gameName\n          description\n          numberOfPlayers\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 toys with a hybrid search of 'action figure', and show the toy name, brand, recommended age, battery-operated status, price, and related board game's name, description, and number of players.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the drugs with a hybrid search of 'pain relief', and show the drug name, active ingredient, approval year, over-the-counter status, and manufacturer's company name. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Drug(\n      hybrid: {\n        query: \"pain relief\"\n      },\n      limit: 5\n    ) {\n      drugName\n      activeIngredient\n      approvalYear\n      isOTC\n      manufacturer {\n        ... on Manufacturer {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the drugs with a hybrid search of 'pain relief', and show the drug name, active ingredient, approval year, over-the-counter status, and manufacturer's company name. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 rollercoasters that are thrilling, and show their name, description, height, operating status, and the name and location of the park they belong to.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Rollercoaster(\n      hybrid: {\n        query: \"thrilling\"\n      },\n      limit: 5\n    ) {\n      name\n      description\n      height\n      isOperating\n      park {\n        ... on AmusementPark {\n          name\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 rollercoasters that are thrilling, and show their name, description, height, operating status, and the name and location of the park they belong to.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the furniture items with a hybrid search of 'chair', and show the furniture name, material, dimensions, price, manufacturer's name, location, and contact information. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Furniture(\n      hybrid: {\n        query: \"chair\"\n      },\n      limit: 10\n    ) {\n      furnitureName\n      material\n      dimensions\n      price\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the furniture items with a hybrid search of 'chair', and show the furniture name, material, dimensions, price, manufacturer's name, location, and contact information. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "furniture.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the digital artworks with a hybrid search of 'abstract', limit the results to 10. Show the title, artist's name and portfolio link, description, year, medium, and availability for sale.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DigitalArtwork(\n      hybrid: {\n        query: \"abstract\"\n      },\n      limit: 10\n    ) {\n      title\n      artist {\n        ... on Artist {\n          name\n          portfolioLink\n        }\n      }\n      description\n      year\n      medium\n      isForSale\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the digital artworks with a hybrid search of 'abstract', limit the results to 10. Show the title, artist's name and portfolio link, description, year, medium, and availability for sale.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the gyms with a hybrid search of 'fitness', and show the gym name, location, equipment, membership price, and the fitness classes offered including the class name, duration, instructor, and description. Limit the results to 5 gyms.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Gym(\n      hybrid: {\n        query: \"fitness\"\n      },\n      limit: 5\n    ) {\n      gymName\n      location\n      equipment\n      membershipPrice\n      classesOffered {\n        ... on FitnessClass {\n          className\n          duration\n          instructor\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the gyms with a hybrid search of 'fitness', and show the gym name, location, equipment, membership price, and the fitness classes offered including the class name, duration, instructor, and description. Limit the results to 5 gyms.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}", "schemaPath": "gyms.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the film festivals with a hybrid search of 'Cannes', and show the festival name, location, description, and featured film's title and director. Limit the results to 3.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FilmFestival(\n      hybrid: {\n        query: \"Cannes\"\n      },\n      limit: 3\n    ) {\n      festivalName\n      location\n      description\n      featuredFilm {\n        ... on Film {\n          filmTitle\n          director\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the film festivals with a hybrid search of 'Cannes', and show the festival name, location, description, and featured film's title and director. Limit the results to 3.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}", "schemaPath": "filmfestivals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the local businesses with a hybrid search of 'restaurant', and show the business name, description, address, contact number, opening status, rating, and services with their respective service name and price. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LocalBusiness(\n      hybrid: {\n        query: \"restaurant\"\n      },\n      limit: 10\n    ) {\n      businessName\n      description\n      address\n      contactNumber\n      isOpen\n      rating\n      services {\n        ... on Service {\n          serviceName\n          price\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the local businesses with a hybrid search of 'restaurant', and show the business name, description, address, contact number, opening status, rating, and services with their respective service name and price. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the zoos with a hybrid search of 'penguins', and show the zoo name, location, animals housed (including species, habitat, and diet), and opening hours. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Zoo(\n      hybrid: {\n        query: \"penguins\"\n      },\n      limit: 10\n    ) {\n      zooName\n      location\n      animalsHoused {\n        ... on Animal {\n          species\n          habitat\n          diet\n        }\n      }\n      openingHours\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the zoos with a hybrid search of 'penguins', and show the zoo name, location, animals housed (including species, habitat, and diet), and opening hours. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}", "schemaPath": "zoos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the boats with a hybrid search of 'sailboat', and show the boat name, type, capacity, motorization status, and manufacturer's company name. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Boat(\n      hybrid: {\n        query: \"sailboat\"\n      },\n      limit: 5\n    ) {\n      boatName\n      type\n      capacity\n      isMotorized\n      manufacturer {\n        ... on BoatManufacturer {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the boats with a hybrid search of 'sailboat', and show the boat name, type, capacity, motorization status, and manufacturer's company name. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the pottery items with a hybrid search of 'ceramic', and show the item name, description, type, date created, craftsman's name, biography, and studio location. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PotteryItem(\n      hybrid: {\n        query: \"ceramic\",\n      },\n      limit: 5\n    ) {\n      itemName\n      description\n      type\n      dateCreated\n      craftsman {\n        ... on Potter {\n          potterName\n          biography\n          studioLocation\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the pottery items with a hybrid search of 'ceramic', and show the item name, description, type, date created, craftsman's name, biography, and studio location. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}", "schemaPath": "pottery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 3 national parks with a hybrid search of 'mountain', and show me the park name, description, location, established year, entry fee status, wildlife, and facilities with their names and descriptions.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NationalPark(\n      hybrid: {\n        query: \"mountain\"\n      },\n      limit: 3\n    ) {\n      parkName\n      description\n      location\n      establishedYear\n      isEntryFree\n      wildlife\n      facilities {\n        ... on Facility {\n          facilityName\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 3 national parks with a hybrid search of 'mountain', and show me the park name, description, location, established year, entry fee status, wildlife, and facilities with their names and descriptions.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the language courses for beginners, limit the results to 5. Show me the course name, language taught, difficulty level, platform name, and website.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LanguageCourse(\n      hybrid: {\n        query: \"beginner\"\n      },\n      limit: 5\n    ) {\n      courseName\n      languageTaught\n      difficultyLevel\n      platform {\n        ... on LearningPlatform {\n          platformName\n          website\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the language courses for beginners, limit the results to 5. Show me the course name, language taught, difficulty level, platform name, and website.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the pets with a hybrid search of 'dog', and show the pet name, species, breed, age, owner's full name, address, and contact number. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Pet(\n      hybrid: {\n        query: \"dog\"\n      },\n      limit: 5\n    ) {\n      petName\n      species\n      breed\n      age\n      owner {\n        ... on Person {\n          fullName\n          address\n          contactNumber\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the pets with a hybrid search of 'dog', and show the pet name, species, breed, age, owner's full name, address, and contact number. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the Literary Awards with a hybrid search of 'Nobel Prize', and show the award name, year established, awarding organization's name, and genres covered. Limit the results to 3.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LiteraryAward(\n      hybrid: {\n        query: \"Nobel Prize\"\n      },\n      limit: 3\n    ) {\n      awardName\n      yearEstablished\n      awardingOrganization {\n        ... on Organization {\n          organizationName\n        }\n      }\n      genresCovered\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the Literary Awards with a hybrid search of 'Nobel Prize', and show the award name, year established, awarding organization's name, and genres covered. Limit the results to 3.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the jewelry items with a hybrid search of 'necklace', limit the results to 10, and show the name, material, gemstone's name and hardness, price, and whether it is handmade.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JewelryItem(\n      hybrid: {\n        query: \"necklace\"\n      },\n      limit: 10\n    ) {\n      name\n      material\n      gemstone {\n        ... on Gemstone {\n          name\n          hardness\n        }\n      }\n      price\n      isHandmade\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the jewelry items with a hybrid search of 'necklace', limit the results to 10, and show the name, material, gemstone's name and hardness, price, and whether it is handmade.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the research institutes with a hybrid search of 'technology', and show the institute name, overview, location, and affiliated university's name, campus location, and establishment year. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ResearchInstitute(\n      hybrid: {\n        query: \"technology\"\n      },\n      limit: 10\n    ) {\n      instituteName\n      overview\n      location\n      affiliatedUniversity {\n        ... on University {\n          name\n          campusLocation\n          establishmentYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the research institutes with a hybrid search of 'technology', and show the institute name, overview, location, and affiliated university's name, campus location, and establishment year. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}", "schemaPath": "researchinstitute.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 banking services with a hybrid search of 'online banking', and show the service name, features, bank name, and headquarters.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BankingService(\n      hybrid: {\n        query: \"online banking\"\n      },\n      limit: 5\n    ) {\n      serviceName\n      features\n      bank {\n        ... on Bank {\n          bankName\n          headquarters\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 banking services with a hybrid search of 'online banking', and show the service name, features, bank name, and headquarters.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}", "schemaPath": "onlinebanking.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the operating systems with a hybrid search of 'Windows', and show the operating system name, version, supported devices, and parent company's name. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OperatingSystem(\n      hybrid: {\n        query: \"Windows\"\n      },\n      limit: 5\n    ) {\n      osName\n      version\n      supportedDevices\n      parentCompany {\n        ... on Company {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the operating systems with a hybrid search of 'Windows', and show the operating system name, version, supported devices, and parent company's name. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "operatingsystem.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 10 freelancers specializing in web development. Show their freelancer name, skills, rate, portfolio, and client reviews. \n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Freelancer(\n      hybrid: {\n        query: \"web development\"\n      },\n      limit: 10\n    ) {\n      freelancerName\n      skills\n      rate\n      portfolio\n      clientReviews {\n        ... on ClientReview {\n          clientName\n          reviewText\n          rating\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 10 freelancers specializing in web development. Show their freelancer name, skills, rate, portfolio, and client reviews. \n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}", "schemaPath": "freelancers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 tea shops with a hybrid search of 'green tea', and show the shop name, location, and details of their best selling teas including the tea name, origin, and flavor profile.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TeaShop(\n      hybrid: {\n        query: \"green tea\"\n      },\n      limit: 5\n    ) {\n      shopName\n      location\n      bestSellingTeas {\n        ... on TeaVariety {\n          teaName\n          origin\n          flavorProfile\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 tea shops with a hybrid search of 'green tea', and show the shop name, location, and details of their best selling teas including the tea name, origin, and flavor profile.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}", "schemaPath": "teashops.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the space missions with a hybrid search of 'moon landing', and show the mission name, objective, launch year, mission status, and space agency's name. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SpaceMission(\n      hybrid: {\n        query: \"moon landing\"\n      },\n      limit: 5\n    ) {\n      missionName\n      objective\n      launchYear\n      missionStatus\n      spaceAgency {\n        ... on SpaceAgency {\n          agencyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the space missions with a hybrid search of 'moon landing', and show the mission name, objective, launch year, mission status, and space agency's name. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the biographies of Albert Einstein, limit the results to 3. Show the subject name, overview, author's name, author's bio, author's published works count, and publication year.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Biography(\n      hybrid: {\n        query: \"Albert Einstein\"\n      },\n      limit: 3\n    ) {\n      subjectName\n      overview\n      author {\n        ... on Author {\n          name\n          bio\n          publishedWorksCount\n        }\n      }\n      publicationYear\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the biographies of Albert Einstein, limit the results to 3. Show the subject name, overview, author's name, author's bio, author's published works count, and publication year.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the Nanotech Applications with a hybrid search of 'nanoparticles', and show the application name, overview, and leading researchers' names and affiliations. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NanotechApplication(\n      hybrid: {\n        query: \"nanoparticles\"\n      },\n      limit: 5\n    ) {\n      applicationName\n      overview\n      leadingResearchers {\n        ... on Researcher {\n          name\n          affiliation\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the Nanotech Applications with a hybrid search of 'nanoparticles', and show the application name, overview, and leading researchers' names and affiliations. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}", "schemaPath": "nanotechnology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the non-profit organizations with a hybrid search of 'education', and show the name, mission, founded year, focus area, and founder's full name and bio. Limit the results to 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NonProfit(\n      hybrid: {\n        query: \"education\"\n      },\n      limit: 10\n    ) {\n      name\n      mission\n      foundedYear\n      focusArea\n      founder {\n        ... on Person {\n          fullName\n          bio\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the non-profit organizations with a hybrid search of 'education', and show the name, mission, founded year, focus area, and founder's full name and bio. Limit the results to 10.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the hiking trails with a hybrid search of 'mountain', and show the trail name, location, length in kilometers, difficulty level, and the nearest town's name and population. Limit the results to 10 trails.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HikingTrail(\n      hybrid: {\n        query: \"mountain\"\n      },\n      limit: 10\n    ) {\n      trailName\n      location\n      lengthKm\n      difficultyLevel\n      nearestTown {\n        ... on Town {\n          townName\n          population\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the hiking trails with a hybrid search of 'mountain', and show the trail name, location, length in kilometers, difficulty level, and the nearest town's name and population. Limit the results to 10 trails.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}", "schemaPath": "hikingtrails.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the top 5 food trucks with a hybrid search of 'tacos', and show the truck name, cuisine type, location, and owner's name.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FoodTruck(\n      hybrid: {\n        query: \"tacos\"\n      },\n      limit: 5\n    ) {\n      truckName\n      cuisineType\n      location\n      owner {\n        ... on FoodEntrepreneur {\n          entrepreneurName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the top 5 food trucks with a hybrid search of 'tacos', and show the truck name, cuisine type, location, and owner's name.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}", "schemaPath": "foodtrucks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the AR applications with a hybrid search of 'augmented reality', and show the application name, description, platform, and developer's company name. Limit the results to 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ARApplication(\n      hybrid: {\n        query: \"augmented reality\"\n      },\n      limit: 5\n    ) {\n      appName\n      description\n      platform\n      developer {\n        ... on SoftwareCompany {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the AR applications with a hybrid search of 'augmented reality', and show the application name, description, platform, and developer's company name. Limit the results to 5.\n```", "apiRef": "Basic hybrid search\n\nTo use hybrid search, you must provide a search string as a minimum.\n\nThe below example uses default settings, looking for:\n\n- Objects containing the keyword\u00a0`food`\u00a0anywhere in the object, and\n- Objects most similar to the vector of\u00a0`food`.\n\nIt ranks the results using a combination of the\u00a0`bm25`\u00a0and vector search rankings, and returns the top 3.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion(\n      limit: 3,\n      hybrid: {\n        query: \"food\"\n      }\n    ) {\n      question\n      answer\n    }\n  }\n}\n```", "apiRefPath": "get-hybrid.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the compound name, formula, molar mass, and information about the 4th object in the Chemical Compound class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ChemicalCompound(\n      limit: 1,\n      offset: 3\n    ) {\n      compoundName\n      formula\n      molarMass\n      containsElements {\n        ... on ChemicalElement {\n          elementName\n          symbol\n          atomicNumber\n          isMetal\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the compound name, formula, molar mass, and information about the 4th object in the Chemical Compound class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the species name, habitat, conservation status, and linked marine biologist's name and research area for the 6th object in the Marine Species class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MarineSpecies(\n      limit: 1,\n      offset: 5\n    ) {\n      speciesName\n      habitat\n      conservationStatus\n      researcher {\n        ... on MarineBiologist {\n          biologistName\n          researchArea\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the species name, habitat, conservation status, and linked marine biologist's name and research area for the 6th object in the Marine Species class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the robot name, function, and linked manufacturer's company name for the 6th object in the Robots class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Robot(\n      limit: 1,\n      offset: 5\n    ) {\n      robotName\n      function\n      manufacturer {\n        ... on RoboticsCompany {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the robot name, function, and linked manufacturer's company name for the 6th object in the Robots class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}", "schemaPath": "robotics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the civilization name, time period, notable technologies, languages, and major ruins' site name and location for the 6th object in the Civilization class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Civilization(\n      limit: 1,\n      offset: 5\n    ) {\n      civilizationName\n      timePeriod\n      notableTechnologies\n      languages\n      majorRuins {\n        ... on Ruins {\n          siteName\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the civilization name, time period, notable technologies, languages, and major ruins' site name and location for the 6th object in the Civilization class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}", "schemaPath": "ancientcivilization.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the platform name, overview, subscription cost, available regions, and details of the top shows including title, genre, release year, and description for the 6th object in the StreamingPlatform class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    StreamingPlatform(\n      limit: 1,\n      offset: 5\n    ) {\n      platformName\n      overview\n      subscriptionCost\n      availableRegions\n      topShows {\n        ... on Show {\n          title\n          genre\n          releaseYear\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the platform name, overview, subscription cost, available regions, and details of the top shows including title, genre, release year, and description for the 6th object in the StreamingPlatform class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the product name, brand name, type, shade, ingredients, and vegan status for the 6th object in the CosmeticProduct class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CosmeticProduct(\n      limit: 1,\n      offset: 5\n    ) {\n      productName\n      brand {\n        ... on Brand {\n          brandName\n        }\n      }\n      type\n      shade\n      ingredients\n      isVegan\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the product name, brand name, type, shade, ingredients, and vegan status for the 6th object in the CosmeticProduct class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}", "schemaPath": "cosmetics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the source type, description, annual output, residential status, and linked provider's company name for the 6th object in the Energy Source class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EnergySource(\n      limit: 1,\n      offset: 5\n    ) {\n      sourceType\n      description\n      annualOutput\n      isResidential\n      provider {\n        ... on EnergyProvider {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the source type, description, annual output, residential status, and linked provider's company name for the 6th object in the Energy Source class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the common name, scientific name, habitat, growth habit, endangered status, and fertilizer needs (type and application frequency) for the 6th object in the Plants class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant(\n      limit: 1,\n      offset: 5\n    ) {\n      commonName\n      scientificName\n      habitat\n      growthHabit\n      isEndangered\n      fertilizerNeeds {\n        ... on Fertilizer {\n          type\n          applicationFrequency\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the common name, scientific name, habitat, growth habit, endangered status, and fertilizer needs (type and application frequency) for the 6th object in the Plants class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}", "schemaPath": "plants.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the full name, birth year, deceased status, linked parents' full names, and DNA test information including test provider, match percentage, and whether maternal and paternal lines were tested for the 6th object in the Person class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Person(\n      limit: 1,\n      offset: 5\n    ) {\n      fullName\n      birthYear\n      isDeceased\n      parents {\n        ... on Person {\n          fullName\n        }\n      }\n      dnatest {\n        ... on DNATestResult {\n          testProvider\n          matchPercentage\n          isMaternalLineTested\n          isPaternalLineTested\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the full name, birth year, deceased status, linked parents' full names, and DNA test information including test provider, match percentage, and whether maternal and paternal lines were tested for the 6th object in the Person class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the candle name, scent, burn time, price, and linked manufacturer's name, location, and contact for the 6th object in the Candle class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Candle(\n      limit: 1,\n      offset: 5\n    ) {\n      candleName\n      scent\n      burnTime\n      price\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the candle name, scent, burn time, price, and linked manufacturer's name, location, and contact for the 6th object in the Candle class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "candles.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the special title, description, duration, and linked comedian's name for the 6th object in the Comedy Specials class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ComedySpecial(\n      limit: 1,\n      offset: 5\n    ) {\n      specialTitle\n      description\n      duration\n      comedian {\n        ... on Comedian {\n          comedianName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the special title, description, duration, and linked comedian's name for the 6th object in the Comedy Specials class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the app name, description, developer, rating, whether it is free, and the supported operating system's name and version for the 6th object in the MobileApp class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MobileApp(\n      limit: 1,\n      offset: 5\n    ) {\n      appName\n      description\n      developer\n      rating\n      isFree\n      supportedOS {\n        ... on OperatingSystem {\n          osName\n          version\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the app name, description, developer, rating, whether it is free, and the supported operating system's name and version for the 6th object in the MobileApp class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}", "schemaPath": "mobileapplications.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the trick name, description, difficulty level, and linked performer's magician name for the 6th object in the MagicTrick class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MagicTrick(\n      limit: 1,\n      offset: 5\n    ) {\n      trickName\n      description\n      difficultyLevel\n      performer {\n        ... on Magician {\n          magicianName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the trick name, description, difficulty level, and linked performer's magician name for the 6th object in the MagicTrick class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the firework name, effects, duration, safety guidelines, manufacturer's name, location, and contact for the 6th object in the Firework class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Firework(\n      limit: 1,\n      offset: 5\n    ) {\n      fireworkName\n      effects\n      duration\n      safetyGuidelines\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the firework name, effects, duration, safety guidelines, manufacturer's name, location, and contact for the 6th object in the Firework class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "fireworks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the team name, members' player name, nickname, game specialization, years active, retired status, games played, tournament wins count, and active status for the 6th object in the EsportsTeam class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EsportsTeam (\n      limit: 1,\n      offset: 5\n    ) {\n      teamName\n      members {\n        ... on Player {\n          playerName\n          nickname\n          gameSpecialization\n          yearsActive\n          isRetired\n        }\n      }\n      gamesPlayed\n      tournamentWinsCount\n      isActive\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the team name, members' player name, nickname, game specialization, years active, retired status, games played, tournament wins count, and active status for the 6th object in the EsportsTeam class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the doctor's name, specialization, years of experience, and the clinic's name, location, and operational hours for the 6th object in the Doctor class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Doctor(\n      limit: 1,\n      offset: 5\n    ) {\n      doctorName\n      specialization\n      yearsOfExperience\n      clinic {\n        ... on Clinic {\n          clinicName\n          location\n          operationalHours\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the doctor's name, specialization, years of experience, and the clinic's name, location, and operational hours for the 6th object in the Doctor class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the full name, bio, years active, and specialization name for the 6th object in the Photographer class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Photographer(\n      limit: 1,\n      offset: 5\n    ) {\n      fullName\n      bio\n      yearsActive\n      specialization {\n        ... on PhotographyGenre {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the full name, bio, years active, and specialization name for the 6th object in the Photographer class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the college name, location, established year, description, and details of the 6th college in the College class, including the course name, duration, and description of the courses offered.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    College(\n      limit: 1,\n      offset: 5\n    ) {\n      collegeName\n      location\n      establishedYear\n      description\n      courses {\n        ... on Course {\n          courseName\n          duration\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the college name, location, established year, description, and details of the 6th college in the College class, including the course name, duration, and description of the courses offered.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the appliance name, brand, type, energy rating, whether it is a smart device, price, and warranty duration and coverage for the 6th object in the HomeAppliance class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HomeAppliance(\n      limit: 1,\n      offset: 5\n    ) {\n      applianceName\n      brand\n      type\n      energyRating\n      isSmartDevice\n      price\n      warranty {\n        ... on Warranty {\n          duration\n          coverage\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the appliance name, brand, type, energy rating, whether it is a smart device, price, and warranty duration and coverage for the 6th object in the HomeAppliance class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title, developer's name, genre, release year, and multiplayer status for the 6th object in the VRExperience class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    VRExperience (\n      limit: 1,\n      offset: 5\n    ) {\n      title\n      developer {\n        ... on Developer {\n          name\n        }\n      }\n      genre\n      releaseYear\n      isMultiplayer\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title, developer's name, genre, release year, and multiplayer status for the 6th object in the VRExperience class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the toy name, brand, recommended age, battery-operated status, price, and the linked board game's name, description, and number of players for the 6th object in the Toy class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Toy(\n      limit: 1,\n      offset: 5\n    ) {\n      toyName\n      brand\n      recommendedAge\n      isBatteryOperated\n      price\n      relatedGame {\n        ... on BoardGame {\n          gameName\n          description\n          numberOfPlayers\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the toy name, brand, recommended age, battery-operated status, price, and the linked board game's name, description, and number of players for the 6th object in the Toy class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the drug name, active ingredient, approval year, over-the-counter status, and linked manufacturer's company name for the 6th object in the Drug class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Drug(\n      limit: 1,\n      offset: 5\n    ) {\n      drugName\n      activeIngredient\n      approvalYear\n      isOTC\n      manufacturer {\n        ... on Manufacturer {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the drug name, active ingredient, approval year, over-the-counter status, and linked manufacturer's company name for the 6th object in the Drug class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, description, height, operating status, and linked amusement park's name and location for the 6th object in the Rollercoaster class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Rollercoaster(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      description\n      height\n      isOperating\n      park {\n        ... on AmusementPark {\n          name\n          location\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, description, height, operating status, and linked amusement park's name and location for the 6th object in the Rollercoaster class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the furniture name, material, dimensions, price, and linked manufacturer's name, location, and contact for the 6th object in the Furniture class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Furniture(\n      limit: 1,\n      offset: 5\n    ) {\n      furnitureName\n      material\n      dimensions\n      price\n      manufacturer {\n        ... on Manufacturer {\n          manufacturerName\n          location\n          contact\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the furniture name, material, dimensions, price, and linked manufacturer's name, location, and contact for the 6th object in the Furniture class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "furniture.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the title, artist's name, description, year, medium, and availability for the 6th object in the DigitalArtwork class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DigitalArtwork(\n      limit: 1,\n      offset: 5\n    ) {\n      title\n      artist {\n        ... on Artist {\n          name\n        }\n      }\n      description\n      year\n      medium\n      isForSale\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the title, artist's name, description, year, medium, and availability for the 6th object in the DigitalArtwork class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the gym name, location, equipment, membership price, and details of the fitness class (class name, duration, instructor, and description) for the 6th object in the Gym class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Gym(\n      limit: 1,\n      offset: 5\n    ) {\n      gymName\n      location\n      equipment\n      membershipPrice\n      classesOffered {\n        ... on FitnessClass {\n          className\n          duration\n          instructor\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the gym name, location, equipment, membership price, and details of the fitness class (class name, duration, instructor, and description) for the 6th object in the Gym class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}", "schemaPath": "gyms.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the festival name, location, description, and the film title with its director for the 6th object in the FilmFestival class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FilmFestival (\n      limit: 1,\n      offset: 5\n    ) {\n      festivalName\n      location\n      description\n      featuredFilm {\n        ... on Film {\n          filmTitle\n          director\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the festival name, location, description, and the film title with its director for the 6th object in the FilmFestival class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}", "schemaPath": "filmfestivals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the business name, description, address, contact number, open status, rating, and services' names and prices for the 6th object in the LocalBusiness class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LocalBusiness(\n      limit: 1,\n      offset: 5\n    ) {\n      businessName\n      description\n      address\n      contactNumber\n      isOpen\n      rating\n      services {\n        ... on Service {\n          serviceName\n          price\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the business name, description, address, contact number, open status, rating, and services' names and prices for the 6th object in the LocalBusiness class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the zoo name, location, animals housed (including species, habitat, and diet), and opening hours for the 6th object in the Zoo class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Zoo(\n      limit: 1,\n      offset: 5\n    ) {\n      zooName\n      location\n      animalsHoused {\n        ... on Animal {\n          species\n          habitat\n          diet\n        }\n      }\n      openingHours\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the zoo name, location, animals housed (including species, habitat, and diet), and opening hours for the 6th object in the Zoo class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}", "schemaPath": "zoos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the boat name, type, capacity, whether it is motorized, and the linked manufacturer's company name for the 6th object in the Boat class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Boat(\n      limit: 1,\n      offset: 5\n    ) {\n      boatName\n      type\n      capacity\n      isMotorized\n      manufacturer {\n        ... on BoatManufacturer {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the boat name, type, capacity, whether it is motorized, and the linked manufacturer's company name for the 6th object in the Boat class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the item name, description, type, date created, and the potter's name for the 6th object in the Pottery Item class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PotteryItem(\n      limit: 1,\n      offset: 5\n    ) {\n      itemName\n      description\n      type\n      dateCreated\n      craftsman {\n        ... on Potter {\n          potterName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the item name, description, type, date created, and the potter's name for the 6th object in the Pottery Item class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}", "schemaPath": "pottery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the park name, description, location, established year, entry fee status, wildlife, and facility name with description for the 6th object in the National Park class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NationalPark(\n      limit: 1,\n      offset: 5\n    ) {\n      parkName\n      description\n      location\n      establishedYear\n      isEntryFree\n      wildlife\n      facilities {\n        ... on Facility {\n          facilityName\n          description\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the park name, description, location, established year, entry fee status, wildlife, and facility name with description for the 6th object in the National Park class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, location, capacity, indoor facility availability, and linked vendor's name, service type, years in business, and discount availability for the 6th object in the WeddingVenue class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeddingVenue(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      location\n      capacity\n      hasIndoorFacility\n      vendors {\n        ... on Vendor {\n          vendorName\n          serviceType\n          yearsInBusiness\n          offersDiscount\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, location, capacity, indoor facility availability, and linked vendor's name, service type, years in business, and discount availability for the 6th object in the WeddingVenue class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}", "schemaPath": "weddings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the course name, language taught, difficulty level, and linked platform's name and website for the 6th object in the LanguageCourse class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LanguageCourse(\n      limit: 1,\n      offset: 5\n    ) {\n      courseName\n      languageTaught\n      difficultyLevel\n      platform {\n        ... on LearningPlatform {\n          platformName\n          website\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the course name, language taught, difficulty level, and linked platform's name and website for the 6th object in the LanguageCourse class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the pet name, species, breed, age, and the full name, address, and contact number of the owner for the 6th object in the Pet class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Pet(\n      limit: 1,\n      offset: 5\n    ) {\n      petName\n      species\n      breed\n      age\n      owner {\n        ... on Person {\n          fullName\n          address\n          contactNumber\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the pet name, species, breed, age, and the full name, address, and contact number of the owner for the 6th object in the Pet class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the award name, year established, awarding organization's name, and genres covered for the 6th object in the Literary Awards class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LiteraryAward(\n      limit: 1,\n      offset: 5\n    ) {\n      awardName\n      yearEstablished\n      awardingOrganization {\n        ... on Organization {\n          organizationName\n        }\n      }\n      genresCovered\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the award name, year established, awarding organization's name, and genres covered for the 6th object in the Literary Awards class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, material, linked gemstone's name and hardness, price, and whether the jewelry item is handmade for the 6th object in the JewelryItem class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JewelryItem(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      material\n      gemstone {\n        ... on Gemstone {\n          name\n          hardness\n        }\n      }\n      price\n      isHandmade\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, material, linked gemstone's name and hardness, price, and whether the jewelry item is handmade for the 6th object in the JewelryItem class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the institute name, overview, location, and linked university's name, campus location, and establishment year for the 6th object in the Research Institute class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ResearchInstitute(\n      limit: 1,\n      offset: 5\n    ) {\n      instituteName\n      overview\n      location\n      affiliatedUniversity {\n        ... on University {\n          name\n          campusLocation\n          establishmentYear\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the institute name, overview, location, and linked university's name, campus location, and establishment year for the 6th object in the Research Institute class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}", "schemaPath": "researchinstitute.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the service name, features, bank name, and headquarters for the 6th object in the Banking Service class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BankingService (\n      limit: 1,\n      offset: 5\n    ) {\n      serviceName\n      features\n      bank {\n        ... on Bank {\n          bankName\n          headquarters\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the service name, features, bank name, and headquarters for the 6th object in the Banking Service class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}", "schemaPath": "onlinebanking.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the operating system name, version, supported devices, and the linked parent company's name for the 6th object in the OperatingSystem class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OperatingSystem (\n      limit: 1,\n      offset: 5\n    ) {\n      osName\n      version\n      supportedDevices\n      parentCompany {\n        ... on Company {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the operating system name, version, supported devices, and the linked parent company's name for the 6th object in the OperatingSystem class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "operatingsystem.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, skills, rate, portfolio, and client reviews (including client name, review text, and rating) for the 6th object in the Freelancer class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Freelancer (\n      limit: 1,\n      offset: 5\n    ) {\n      freelancerName\n      skills\n      rate\n      portfolio\n      clientReviews {\n        ... on ClientReview {\n          clientName\n          reviewText\n          rating\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, skills, rate, portfolio, and client reviews (including client name, review text, and rating) for the 6th object in the Freelancer class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}", "schemaPath": "freelancers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the shop name, location, and details of the 6th Tea Shop in the list, including the tea name, origin, and flavor profile of its best-selling teas.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TeaShop(\n      limit: 1,\n      offset: 5\n    ) {\n      shopName\n      location\n      bestSellingTeas {\n        ... on TeaVariety {\n          teaName\n          origin\n          flavorProfile\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the shop name, location, and details of the 6th Tea Shop in the list, including the tea name, origin, and flavor profile of its best-selling teas.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}", "schemaPath": "teashops.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the mission name, objective, launch year, mission status, and linked space agency's name for the 6th object in the Space Mission class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SpaceMission (\n      limit: 1,\n      offset: 5\n    ) {\n      missionName\n      objective\n      launchYear\n      missionStatus\n      spaceAgency {\n        ... on SpaceAgency {\n          agencyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the mission name, objective, launch year, mission status, and linked space agency's name for the 6th object in the Space Mission class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the subject name, overview, and linked author's name for the 6th object in the Biography class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Biography(\n      limit: 1,\n      offset: 5\n    ) {\n      subjectName\n      overview\n      author {\n        ... on Author {\n          name\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the subject name, overview, and linked author's name for the 6th object in the Biography class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the application name, overview, and linked leading researchers' names and affiliations for the 6th object in the NanotechApplication class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NanotechApplication (\n      limit: 1,\n      offset: 5\n    ) {\n      applicationName\n      overview\n      leadingResearchers {\n        ... on Researcher {\n          name\n          affiliation\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the application name, overview, and linked leading researchers' names and affiliations for the 6th object in the NanotechApplication class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}", "schemaPath": "nanotechnology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the name, mission, founded year, focus area, and linked founder's full name for the 6th object in the NonProfit class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NonProfit(\n      limit: 1,\n      offset: 5\n    ) {\n      name\n      mission\n      foundedYear\n      focusArea\n      founder {\n        ... on Person {\n          fullName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the name, mission, founded year, focus area, and linked founder's full name for the 6th object in the NonProfit class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the trail name, location, length in kilometers, difficulty level, and the nearest town's name and population for the 6th object in the HikingTrail class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HikingTrail(\n      limit: 1,\n      offset: 5\n    ) {\n      trailName\n      location\n      lengthKm\n      difficultyLevel\n      nearestTown {\n        ... on Town {\n          townName\n          population\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the trail name, location, length in kilometers, difficulty level, and the nearest town's name and population for the 6th object in the HikingTrail class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}", "schemaPath": "hikingtrails.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the truck name, cuisine type, location, and linked owner's entrepreneur name for the 6th object in the Food Truck class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FoodTruck(\n      limit: 1,\n      offset: 5\n    ) {\n      truckName\n      cuisineType\n      location\n      owner {\n        ... on FoodEntrepreneur {\n          entrepreneurName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the truck name, cuisine type, location, and linked owner's entrepreneur name for the 6th object in the Food Truck class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}", "schemaPath": "foodtrucks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nPlease show me the application name, description, platform, and linked developer's company name for the 6th object in the ARApplication class.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ARApplication(\n      limit: 1,\n      offset: 5\n    ) {\n      appName\n      description\n      platform\n      developer {\n        ... on SoftwareCompany {\n          companyName\n        }\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nPlease show me the application name, description, platform, and linked developer's company name for the 6th object in the ARApplication class.\n```", "apiRef": "Paginate with\u00a0`limit`\u00a0and\u00a0`offset`\n\nIf you only want the\u00a0`n`\u00a0results after the first\u00a0`m`\u00a0results from the query, you can do this with\u00a0`limit`\u00a0and\u00a0`offset`\u00a0as shown below.\n\nBe aware that although you will only see\u00a0`n`\u00a0results, this could become an expensive operation as\u00a0`m`\u00a0grows larger, as Weaviate must fetch\u00a0`n+m`\u00a0results.\n\nFOR EXHAUSTIVE RETRIEVAL, USE\u00a0`after`\u00a0INSTEAD.\n\nIf you want to list and retrieve all objects from a\u00a0`class`, use the cursor API instead with the\u00a0`after`\u00a0operator.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (\n      limit: 1,\n      offset: 1\n    ) {\n      question\n    }\n  }\n}\n```", "apiRefPath": "get-paginate-with-limit-and-offset.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many chemical compounds have a molar mass greater than 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ChemicalCompound(where: {\n      path: [\"molarMass\"],\n      operator: GreaterThan,\n      valueNumber: 100\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many chemical compounds have a molar mass greater than 100.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of marine species that have a conservation status equal to \"endangered\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    MarineSpecies(where: {\n      path: [\"conservationStatus\"],\n      operator: Equal,\n      valueText: \"endangered\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of marine species that have a conservation status equal to \"endangered\".\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of robots that have a function equal to \"industrial\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Robot(where: {\n      path: [\"function\"],\n      operator: Equal,\n      valueText: \"industrial\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of robots that have a function equal to \"industrial\".\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}", "schemaPath": "robotics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of civilizations that belong to the time period \"Ancient Egypt\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Civilization(where: {\n      path: [\"timePeriod\"],\n      operator: Equal,\n      valueText: \"Ancient Egypt\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of civilizations that belong to the time period \"Ancient Egypt\".\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}", "schemaPath": "ancientcivilization.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of streaming platforms that have a subscription cost equal to \"Free\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    StreamingPlatform(where: {\n      path: [\"subscriptionCost\"],\n      operator: Equal,\n      valueText: \"Free\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of streaming platforms that have a subscription cost equal to \"Free\".\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many Energy Sources have an annual output greater than 1000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    EnergySource(where: {\n      path: [\"annualOutput\"],\n      operator: GreaterThan,\n      valueInt: 1000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many Energy Sources have an annual output greater than 1000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of people who are not deceased.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Person(where: {\n      path: [\"isDeceased\"],\n      operator: Equal,\n      valueBoolean: false\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of people who are not deceased.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many comedy specials have a duration greater than 1 hour.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ComedySpecial(where: {\n      path: [\"duration\"],\n      operator: GreaterThan,\n      valueText: \"1 hour\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many comedy specials have a duration greater than 1 hour.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many Magic Tricks have a difficulty level equal to \"beginner\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    MagicTrick(where: {\n      path: [\"difficultyLevel\"],\n      operator: Equal,\n      valueText: \"beginner\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many Magic Tricks have a difficulty level equal to \"beginner\".\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many Esports teams have more than 5 tournament wins.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    EsportsTeam(where: {\n      path: [\"tournamentWinsCount\"],\n      operator: GreaterThan,\n      valueInt: 5\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many Esports teams have more than 5 tournament wins.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many doctors have more than 5 years of experience.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Doctor(where: {\n      path: [\"yearsOfExperience\"],\n      operator: GreaterThan,\n      valueInt: 5\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many doctors have more than 5 years of experience.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of photographers who have been active for more than 5 years.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Photographer(where: {\n      path: [\"yearsActive\"],\n      operator: GreaterThan,\n      valueInt: 5\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of photographers who have been active for more than 5 years.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many colleges were established after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    College(where: {\n      path: [\"establishedYear\"],\n      operator: GreaterThan,\n      valueInt: 2000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many colleges were established after the year 2000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many drugs have an approval year greater than 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Drug(where: {\n      path: [\"approvalYear\"],\n      operator: GreaterThan,\n      valueInt: 2000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many drugs have an approval year greater than 2000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many digital artworks were created after the year 2010.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    DigitalArtwork(where: {\n      path: [\"year\"],\n      operator: GreaterThan,\n      valueInt: 2010\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many digital artworks were created after the year 2010.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of local businesses that are open.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    LocalBusiness(where: {\n      path: [\"isOpen\"],\n      operator: Equal,\n      valueBoolean: true\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of local businesses that are open.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of Language Courses that have a difficulty level equal to \"beginner\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    LanguageCourse(where: {\n      path: [\"difficultyLevel\"],\n      operator: Equal,\n      valueText: \"beginner\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of Language Courses that have a difficulty level equal to \"beginner\".\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many pets are older than 5 years.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Pet(where: {\n      path: [\"age\"],\n      operator: GreaterThan,\n      valueInt: 5\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many pets are older than 5 years.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of Literary Awards that were established after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    LiteraryAward(where: {\n      path: [\"yearEstablished\"],\n      operator: GreaterThan,\n      valueInt: 2000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of Literary Awards that were established after the year 2000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of research institutes located in New York.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ResearchInstitute(where: {\n      path: [\"location\"],\n      operator: Equal,\n      valueText: \"New York\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of research institutes located in New York.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}", "schemaPath": "researchinstitute.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of TeaShops located in New York.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    TeaShop(where: {\n      path: [\"location\"],\n      operator: Equal,\n      valueText: \"New York\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of TeaShops located in New York.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}", "schemaPath": "teashops.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many Biography books were published after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Biography(\n      where: {\n        path: [\"publicationYear\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many Biography books were published after the year 2000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many NonProfit organizations were founded after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    NonProfit(where: {\n      path: [\"foundedYear\"],\n      operator: GreaterThan,\n      valueInt: 2000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many NonProfit organizations were founded after the year 2000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me the count of ARApplications where the platform is equal to \"iOS\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ARApplication(where: {\n      path: [\"platform\"],\n      operator: Equal,\n      valueText: \"iOS\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me the count of ARApplications where the platform is equal to \"iOS\".\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the chemical element objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ChemicalElement {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the chemical element objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ChemicalElement\",\n\"description\": \"Basic chemical element from the periodic table.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"elementName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical element.\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the chemical element.\"\n},\n{\n\"name\": \"atomicNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The atomic number of the element.\"\n},\n{\n\"name\": \"isMetal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the element is a metal or not.\"\n}{\n\"class\": \"ChemicalCompound\",\n\"description\": \"A compound formed by combining multiple chemical elements.\",\n\"properties\": [\n{\n\"name\": \"compoundName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the chemical compound.\"\n},\n{\n\"name\": \"formula\",\n\"dataType\": [\"text\"],\n\"description\": \"Chemical formula for the compound.\"\n},\n{\n\"name\": \"molarMass\",\n\"dataType\": [\"number\"],\n\"description\": \"The molar mass of the compound in g/mol.\"\n},\n{\n\"name\": \"containsElements\",\n\"dataType\": [\"ChemicalElement\"],\n\"description\": \"Elements that make up the compound.\"\n}}}", "schemaPath": "chemicals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the marine species objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MarineSpecies {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the marine species objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MarineSpecies\",\n\"description\": \"Details about various marine species.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"speciesName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the marine species.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Typical habitat or region where the species can be found.\"\n},\n{\n\"name\": \"conservationStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Conservation status, e.g., endangered, vulnerable.\"\n},\n{\n\"name\": \"researcher\",\n\"dataType\": [\"MarineBiologist\"],\n\"description\": \"Main researcher or biologist studying the species.\"\n}{\n\"class\": \"MarineBiologist\",\n\"description\": \"Details about marine biologists and their research.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"biologistName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the marine biologist.\"\n},\n{\n\"name\": \"researchArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of research or focus.\"\n}}}", "schemaPath": "marinebiology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the robot objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Robot {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the robot objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Robot\",\n\"description\": \"A machine capable of executing actions autonomously.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"robotName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robot.\"\n},\n{\n\"name\": \"function\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary function or application of the robot, e.g., industrial, healthcare.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"RoboticsCompany\"],\n\"description\": \"Company that designed and built the robot.\"\n}{\n\"class\": \"RoboticsCompany\",\n\"description\": \"A company specializing in the design and manufacturing of robots.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the robotics company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Particular focus area in robotics, e.g., humanoid robots, drones.\"\n}}}", "schemaPath": "robotics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the civilization objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Civilization {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the civilization objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Civilization\",\n\"description\": \"Details about various ancient civilizations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"civilizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ancient civilization.\"\n},\n{\n\"name\": \"timePeriod\",\n\"dataType\": [\"text\"],\n\"description\": \"Time period when the civilization thrived.\"\n},\n{\n\"name\": \"notableTechnologies\",\n\"dataType\": [\"text\"],\n\"description\": \"Technologies or inventions credited to the civilization.\"\n},\n{\n\"name\": \"languages\",\n\"dataType\": [\"text\"],\n\"description\": \"Languages spoken in the civilization.\"\n},\n{\n\"name\": \"majorRuins\",\n\"dataType\": [\"Ruins\"],\n\"description\": \"Significant ruins or archaeological sites from the civilization.\"\n}{\n\"class\": \"Ruins\",\n\"description\": \"Details about specific ruins or archaeological sites.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"siteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the ruin or archaeological site.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location of the site.\"\n}}}", "schemaPath": "ancientcivilization.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the streaming platform objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    StreamingPlatform {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the streaming platform objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"StreamingPlatform\",\n\"description\": \"A digital service offering streaming of video or audio content.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the streaming platform.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the platform and its features.\"\n},\n{\n\"name\": \"subscriptionCost\",\n\"dataType\": [\"text\"],\n\"description\": \"Monthly or yearly subscription fee for the platform.\"\n},\n{\n\"name\": \"availableRegions\",\n\"dataType\": [\"text\"],\n\"description\": \"Regions where the platform is accessible.\"\n},\n{\n\"name\": \"topShows\",\n\"dataType\": [\"Show\"],\n\"description\": \"Popular shows available on the platform.\"\n}{\n\"class\": \"Show\",\n\"description\": \"Details about a specific show.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the show.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the show.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the show was first aired.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or synopsis of the show.\"\n}}}", "schemaPath": "streamingplatform.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the cosmetic product objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    CosmeticProduct {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the cosmetic product objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}", "schemaPath": "cosmetics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the energy source objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EnergySource {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the energy source objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EnergySource\",\n\"description\": \"A source of renewable energy.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"sourceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the renewable energy, e.g., solar, wind.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief about the energy source.\"\n},\n{\n\"name\": \"annualOutput\",\n\"dataType\": [\"int\"],\n\"description\": \"Average annual energy output in megawatts.\"\n},\n{\n\"name\": \"isResidential\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it's suitable for residential use.\"\n},\n{\n\"name\": \"provider\",\n\"dataType\": [\"EnergyProvider\"],\n\"description\": \"The company providing or harnessing this energy source.\"\n}{\n\"class\": \"EnergyProvider\",\n\"description\": \"Companies that provide renewable energy solutions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the energy provider company.\"\n},\n{\n\"name\": \"founded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "renewableenergy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the plant objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Plant {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the plant objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}", "schemaPath": "plants.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the person objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Person {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the person objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Person\",\n\"description\": \"Details about an individual within a family tree.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the individual.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of birth.\"\n},\n{\n\"name\": \"isDeceased\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the person is deceased.\"\n},\n{\n\"name\": \"parents\",\n\"dataType\": [\"Person\"],\n\"description\": \"References to the individual's parents.\"\n},\n{\n\"name\": \"dnatest\",\n\"dataType\": [\"DNATestResult\"],\n\"description\": \"Reference to DNA test results for the individual, if available.\"\n}{\n\"class\": \"DNATestResult\",\n\"description\": \"Details about the DNA test results of an individual.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"testProvider\",\n\"dataType\": [\"text\"],\n\"description\": \"Company or provider that conducted the DNA test.\"\n},\n{\n\"name\": \"matchPercentage\",\n\"dataType\": [\"int\"],\n\"description\": \"Percentage of DNA match with a certain ethnicity or region, if such data is available.\"\n},\n{\n\"name\": \"isMaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the maternal lineage was tested.\"\n},\n{\n\"name\": \"isPaternalLineTested\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the paternal lineage was tested.\"\n}}}", "schemaPath": "ancestry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the candle objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Candle {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the candle objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Candle\",\n\"description\": \"A block of wax with a wick that is lit to produce light.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"candleName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the candle.\"\n},\n{\n\"name\": \"scent\",\n\"dataType\": [\"text\"],\n\"description\": \"The aroma or scent of the candle.\"\n},\n{\n\"name\": \"burnTime\",\n\"dataType\": [\"float\"],\n\"description\": \"Estimated time the candle will burn in hours.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the candle.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who produced the candle.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing candles.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "candles.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the comedy special objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ComedySpecial {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the comedy special objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ComedySpecial\",\n\"description\": \"Details about various stand-up comedy specials and performances.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"specialTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the comedy special or performance.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the comedic themes or topics covered.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"text\"],\n\"description\": \"Duration of the special, e.g., '1 hour 30 minutes'.\"\n},\n{\n\"name\": \"comedian\",\n\"dataType\": [\"Comedian\"],\n\"description\": \"Comedian who performed the special.\"\n}{\n\"class\": \"Comedian\",\n\"description\": \"Details about stand-up comedians.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"comedianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the comedian.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the comedian.\"\n}}}", "schemaPath": "standupcomedy.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the MobileApp objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MobileApp {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the MobileApp objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}", "schemaPath": "mobileapplications.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the MagicTrick objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    MagicTrick {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the MagicTrick objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MagicTrick\",\n\"description\": \"Details about various magic tricks and illusions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trickName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the magic trick or illusion.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the trick and how it's performed.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trick, e.g., beginner, intermediate, expert.\"\n},\n{\n\"name\": \"performer\",\n\"dataType\": [\"Magician\"],\n\"description\": \"Famous magician known for performing this trick.\"\n}{\n\"class\": \"Magician\",\n\"description\": \"Details about magicians and illusionists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"magicianName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the magician.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the magician.\"\n}}}", "schemaPath": "magictricks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the firework objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Firework {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the firework objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Firework\",\n\"description\": \"A device containing explosive or combustible chemicals that produce light, sound, and smoke.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fireworkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the firework.\"\n},\n{\n\"name\": \"effects\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of visual and auditory effects produced by the firework.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration in seconds for which the firework displays its effects.\"\n},\n{\n\"name\": \"safetyGuidelines\",\n\"dataType\": [\"text\"],\n\"description\": \"Safety precautions and guidelines for use.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the firework.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing fireworks.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "fireworks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the EsportsTeam objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    EsportsTeam {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the EsportsTeam objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"EsportsTeam\",\n\"description\": \"E-sports teams participating in various tournaments.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teamName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the e-sports team.\"\n},\n{\n\"name\": \"members\",\n\"dataType\": [\"Player\"],\n\"description\": \"Members or players of the team.\"\n},\n{\n\"name\": \"gamesPlayed\",\n\"dataType\": [\"text\"],\n\"description\": \"Games or titles the team competes in.\"\n},\n{\n\"name\": \"tournamentWinsCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of tournaments the team has won.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team is currently active in competitions.\"\n}{\n\"class\": \"Player\",\n\"description\": \"An individual e-sports player.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"playerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the player.\"\n},\n{\n\"name\": \"nickname\",\n\"dataType\": [\"text\"],\n\"description\": \"Player's in-game or popularly known nickname.\"\n},\n{\n\"name\": \"gameSpecialization\",\n\"dataType\": [\"text\"],\n\"description\": \"Main game or title the player is known for.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the player has been active.\"\n},\n{\n\"name\": \"isRetired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the player is retired or still active.\"\n}}}", "schemaPath": "esports.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the doctor objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Doctor {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the doctor objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Doctor\",\n\"description\": \"A qualified practitioner of medicine.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"doctorName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the doctor.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific field or area of practice for the doctor (e.g., Cardiologist, Orthopedic).\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years the doctor has been practicing.\"\n},\n{\n\"name\": \"clinic\",\n\"dataType\": [\"Clinic\"],\n\"description\": \"The clinic or hospital where the doctor practices.\"\n},\n{\n\"name\": \"education\",\n\"dataType\": [\"text\"],\n\"description\": \"Educational qualifications of the doctor.\"\n}{\n\"class\": \"Clinic\",\n\"description\": \"A healthcare facility where patients receive treatment.\",\n\"properties\": [\n{\n\"name\": \"clinicName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the clinic or hospital.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the clinic.\"\n},\n{\n\"name\": \"operationalHours\",\n\"dataType\": [\"text\"],\n\"description\": \"The hours during which the clinic is operational.\"\n}}}", "schemaPath": "doctors.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the photographer objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Photographer {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the photographer objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Photographer\",\n\"description\": \"An individual who takes photographs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the photographer.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography or description about the photographer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the photographer has been active.\"\n},\n{\n\"name\": \"specialization\",\n\"dataType\": [\"PhotographyGenre\"],\n\"description\": \"The genre or style of photography the photographer is renowned for.\"\n}{\n\"class\": \"PhotographyGenre\",\n\"description\": \"Different genres or styles of photography.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the photography genre, e.g., portrait, wildlife, landscape.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the photography genre.\"\n}}}", "schemaPath": "photographers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the college objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    College {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the college objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"College\",\n\"description\": \"An institution of higher education.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"collegeName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the college.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The location or address of the college.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the college was established.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the college.\"\n},\n{\n\"name\": \"courses\",\n\"dataType\": [\"Course\"],\n\"description\": \"Courses offered by the college.\"\n}{\n\"class\": \"Course\",\n\"description\": \"A course of study offered by a college.\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the course.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the course in months or years.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief overview of the course.\"\n}}}", "schemaPath": "colleges.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the home appliance objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HomeAppliance {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the home appliance objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the VRExperience objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    VRExperience {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the VRExperience objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the toy objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Toy {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the toy objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the drug objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Drug {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the drug objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Drug\",\n\"description\": \"Details about various pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"drugName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the drug.\"\n},\n{\n\"name\": \"activeIngredient\",\n\"dataType\": [\"text\"],\n\"description\": \"The main active ingredient in the drug.\"\n},\n{\n\"name\": \"approvalYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the drug was approved.\"\n},\n{\n\"name\": \"isOTC\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the drug is available over-the-counter (OTC) without a prescription.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company that manufactures the drug.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"Details about the companies that produce pharmaceutical drugs.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the company's main office or headquarters.\"\n},\n{\n\"name\": \"isGlobal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the company operates on a global scale.\"\n}}}", "schemaPath": "pharmaceuticals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the rollercoaster objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Rollercoaster {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the rollercoaster objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the furniture objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Furniture {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the furniture objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Furniture\",\n\"description\": \"Items used in interior spaces to support various activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"furnitureName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name or type of the furniture piece.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Material used in the construction of the furniture.\"\n},\n{\n\"name\": \"dimensions\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical dimensions of the furniture piece.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"float\"],\n\"description\": \"Price of the furniture item.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The company or individual who manufactured the furniture.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A company or individual producing furniture pieces.\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the manufacturer.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or headquarters of the manufacturer.\"\n},\n{\n\"name\": \"contact\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact details for inquiries or support.\"\n}}}", "schemaPath": "furniture.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the digital artwork objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    DigitalArtwork {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the digital artwork objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DigitalArtwork\",\n\"description\": \"A piece of art created using digital tools.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the digital artwork.\"\n},\n{\n\"name\": \"artist\",\n\"dataType\": [\"Artist\"],\n\"description\": \"The creator of the artwork.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description or theme of the artwork.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artwork was created.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used, e.g., digital painting, 3D modeling.\"\n},\n{\n\"name\": \"isForSale\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the artwork is available for purchase.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"Digital artist details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the artist.\"\n},\n{\n\"name\": \"portfolioLink\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to the artist's online portfolio.\"\n},\n{\n\"name\": \"experienceYears\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the artist has been active.\"\n}}}", "schemaPath": "digitalartwork.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the gym objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Gym {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the gym objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Gym\",\n\"description\": \"A facility equipped for physical exercise.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"gymName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the gym.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the gym.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"List of equipment available at the gym.\"\n},\n{\n\"name\": \"membershipPrice\",\n\"dataType\": [\"float\"],\n\"description\": \"Monthly or annual membership price.\"\n},\n{\n\"name\": \"classesOffered\",\n\"dataType\": [\"FitnessClass\"],\n\"description\": \"Classes or training sessions provided by the gym.\"\n}{\n\"class\": \"FitnessClass\",\n\"description\": \"A structured form of exercise offered by the gym.\",\n\"properties\": [\n{\n\"name\": \"className\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the fitness class.\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"float\"],\n\"description\": \"Duration of the fitness class in minutes.\"\n},\n{\n\"name\": \"instructor\",\n\"dataType\": [\"text\"],\n\"description\": \"The instructor leading the class.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief overview of what the class entails.\"\n}}}", "schemaPath": "gyms.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the film festival objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FilmFestival {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the film festival objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FilmFestival\",\n\"description\": \"Details about various international and regional film festivals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"festivalName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the film festival.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"City or location where the festival takes place.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or history of the film festival.\"\n},\n{\n\"name\": \"featuredFilm\",\n\"dataType\": [\"Film\"],\n\"description\": \"A film that has been notably featured or awarded in the festival.\"\n}{\n\"class\": \"Film\",\n\"description\": \"Details about various films and movies.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"filmTitle\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the film.\"\n},\n{\n\"name\": \"director\",\n\"dataType\": [\"text\"],\n\"description\": \"Director of the film.\"\n}}}", "schemaPath": "filmfestivals.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the local business objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LocalBusiness {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the local business objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LocalBusiness\",\n\"description\": \"A local business in a specific area.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"businessName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the business.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the business.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the business.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"The contact phone number for the business.\"\n},\n{\n\"name\": \"isOpen\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the business is currently open or not.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"The average user rating for the business out of 5.\"\n},\n{\n\"name\": \"services\",\n\"dataType\": [\"Service\"],\n\"description\": \"Services provided by the business.\"\n}{\n\"class\": \"Service\",\n\"description\": \"A service provided by a local business.\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the service.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price for the service.\"\n}}}", "schemaPath": "localbusiness.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the zoo objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Zoo {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the zoo objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Zoo\",\n\"description\": \"A facility where animals are displayed to the public.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"zooName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the zoo.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The physical address of the zoo.\"\n},\n{\n\"name\": \"animalsHoused\",\n\"dataType\": [\"Animal\"],\n\"description\": \"List of animals housed in the zoo.\"\n},\n{\n\"name\": \"openingHours\",\n\"dataType\": [\"text\"],\n\"description\": \"Operating hours for the zoo.\"\n}{\n\"class\": \"Animal\",\n\"description\": \"An animal species that is housed in the zoo.\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the animal.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"The natural habitat of the animal.\"\n},\n{\n\"name\": \"diet\",\n\"dataType\": [\"text\"],\n\"description\": \"Dietary preferences or needs of the animal.\"\n}}}", "schemaPath": "zoos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the boat objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Boat {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the boat objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the pottery item objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    PotteryItem {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the pottery item objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}", "schemaPath": "pottery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the national park objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NationalPark {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the national park objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the wedding venue objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    WeddingVenue {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the wedding venue objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}", "schemaPath": "weddings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the language course objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LanguageCourse {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the language course objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LanguageCourse\",\n\"description\": \"Details about various language learning courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"courseName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the language course.\"\n},\n{\n\"name\": \"languageTaught\",\n\"dataType\": [\"text\"],\n\"description\": \"Language that's being taught in the course.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the course, e.g., beginner, intermediate, advanced.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"LearningPlatform\"],\n\"description\": \"Platform or service offering the language course.\"\n}{\n\"class\": \"LearningPlatform\",\n\"description\": \"Online platforms or services that offer educational courses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"platformName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the learning platform.\"\n},\n{\n\"name\": \"website\",\n\"dataType\": [\"text\"],\n\"description\": \"Website link to the learning platform.\"\n}}}", "schemaPath": "languagelearning.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the pet objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Pet {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the pet objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Pet\",\n\"description\": \"A domesticated animal kept for companionship.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"petName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the pet.\"\n},\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"The species of the pet (e.g., Dog, Cat, Fish).\"\n},\n{\n\"name\": \"breed\",\n\"dataType\": [\"text\"],\n\"description\": \"The specific breed or variant of the pet.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the pet in years.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"Person\"],\n\"description\": \"The owner of the pet.\"\n}{\n\"class\": \"Person\",\n\"description\": \"An individual or owner of the pet.\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"Residential address of the person.\"\n},\n{\n\"name\": \"contactNumber\",\n\"dataType\": [\"text\"],\n\"description\": \"Contact number of the person.\"\n}}}", "schemaPath": "pets.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the LiteraryAward objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    LiteraryAward {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the LiteraryAward objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"LiteraryAward\",\n\"description\": \"Details about various literary awards.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"awardName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the literary award.\"\n},\n{\n\"name\": \"yearEstablished\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the award was established.\"\n},\n{\n\"name\": \"awardingOrganization\",\n\"dataType\": [\"Organization\"],\n\"description\": \"Organization or entity that presents the award.\"\n},\n{\n\"name\": \"genresCovered\",\n\"dataType\": [\"text\"],\n\"description\": \"Literary genres that the award covers.\"\n}{\n\"class\": \"Organization\",\n\"description\": \"Details about organizations related to literature.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"organizationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n}}}", "schemaPath": "literaryaward.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the jewelry item objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    JewelryItem {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the jewelry item objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the research institute objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ResearchInstitute {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the research institute objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ResearchInstitute\",\n\"description\": \"An organization dedicated to research in specific areas.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"instituteName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the research institute.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the institute's objectives and areas of study.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Physical location of the research institute.\"\n},\n{\n\"name\": \"affiliatedUniversity\",\n\"dataType\": [\"University\"],\n\"description\": \"University affiliated with the research institute.\"\n}{\n\"class\": \"University\",\n\"description\": \"Details about the university.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the university.\"\n},\n{\n\"name\": \"campusLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the university's main campus.\"\n},\n{\n\"name\": \"establishmentYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the university was established.\"\n}}}", "schemaPath": "researchinstitute.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the banking service objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    BankingService {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the banking service objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BankingService\",\n\"description\": \"An online banking service provided by a bank or financial institution.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"serviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the online banking service.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"Key features of the service, e.g., money transfer, bill payments.\"\n},\n{\n\"name\": \"bank\",\n\"dataType\": [\"Bank\"],\n\"description\": \"Bank or institution providing the service.\"\n}{\n\"class\": \"Bank\",\n\"description\": \"A financial institution offering banking services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"bankName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the bank.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the bank's main office.\"\n}}}", "schemaPath": "onlinebanking.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the operating system objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    OperatingSystem {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the operating system objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "operatingsystem.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the freelancer objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Freelancer {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the freelancer objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}", "schemaPath": "freelancers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the TeaShop objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    TeaShop {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the TeaShop objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"TeaShop\",\n\"description\": \"Details about sellers and shops specializing in tea.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"shopName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea shop or seller.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the shop.\"\n},\n{\n\"name\": \"bestSellingTeas\",\n\"dataType\": [\"TeaVariety\"],\n\"description\": \"Top-selling teas at the shop.\"\n}{\n\"class\": \"TeaVariety\",\n\"description\": \"Details about various tea varieties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"teaName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the tea variety.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Place of origin of the tea.\"\n},\n{\n\"name\": \"flavorProfile\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the tea's flavor profile.\"\n}}}", "schemaPath": "teashops.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the space mission objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    SpaceMission {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the space mission objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the Biography objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    Biography {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the Biography objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Biography\",\n\"description\": \"A written account of a person's life.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"subjectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the individual whose biography it is.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief summary of the individual's life and achievements.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"Author who wrote the biography.\"\n},\n{\n\"name\": \"publicationYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the biography was published.\"\n}{\n\"class\": \"Author\",\n\"description\": \"Details about the author.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the author.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief biography of the author.\"\n},\n{\n\"name\": \"publishedWorksCount\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of works the author has published.\"\n}}}", "schemaPath": "biographies.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the NanotechApplication objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NanotechApplication {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the NanotechApplication objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NanotechApplication\",\n\"description\": \"Specific applications of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applicationName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the nanotech application.\"\n},\n{\n\"name\": \"overview\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the application.\"\n},\n{\n\"name\": \"leadingResearchers\",\n\"dataType\": [\"Researcher\"],\n\"description\": \"Top researchers in this specific application.\"\n}{\n\"class\": \"Researcher\",\n\"description\": \"Details about researchers in the field of nanotechnology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the researcher.\"\n},\n{\n\"name\": \"affiliation\",\n\"dataType\": [\"text\"],\n\"description\": \"Institution or organization the researcher is affiliated with.\"\n}}}", "schemaPath": "nanotechnology.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the NonProfit objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    NonProfit {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the NonProfit objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NonProfit\",\n\"description\": \"An organization that operates for a charitable cause.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the non-profit organization.\"\n},\n{\n\"name\": \"mission\",\n\"dataType\": [\"text\"],\n\"description\": \"Mission statement of the organization.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the organization was founded.\"\n},\n{\n\"name\": \"focusArea\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary area of focus, e.g., health, education.\"\n},\n{\n\"name\": \"founder\",\n\"dataType\": [\"Person\"],\n\"description\": \"Founder or key person of the organization.\"\n}{\n\"class\": \"Person\",\n\"description\": \"Information about individuals.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"fullName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the person.\"\n},\n{\n\"name\": \"bio\",\n\"dataType\": [\"text\"],\n\"description\": \"Short biography of the person.\"\n}}}", "schemaPath": "nonprofits.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the hiking trail objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    HikingTrail {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the hiking trail objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HikingTrail\",\n\"description\": \"Details about hiking trails around the world.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"trailName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the hiking trail.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Geographical location or region where the trail is situated.\"\n},\n{\n\"name\": \"lengthKm\",\n\"dataType\": [\"float\"],\n\"description\": \"Length of the trail in kilometers.\"\n},\n{\n\"name\": \"difficultyLevel\",\n\"dataType\": [\"text\"],\n\"description\": \"Difficulty level of the trail, e.g., easy, moderate, hard.\"\n},\n{\n\"name\": \"nearestTown\",\n\"dataType\": [\"Town\"],\n\"description\": \"Nearest town or city to the trail.\"\n}{\n\"class\": \"Town\",\n\"description\": \"Details about towns or cities near hiking trails.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"townName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the town or city.\"\n},\n{\n\"name\": \"population\",\n\"dataType\": [\"int\"],\n\"description\": \"Population of the town.\"\n}}}", "schemaPath": "hikingtrails.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the food truck objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    FoodTruck {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the food truck objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}", "schemaPath": "foodtrucks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}\n\n    COMMAND:\n    ```text\nGet me the ids of the ARApplication objects.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Get {\n    ARApplication {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nGet me the ids of the ARApplication objects.\n```", "apiRef": "Retrieve the object\u00a0`id`\n\nTo retrieve the object ID, request the\u00a0`_additional`\u00a0property and\u00a0`id`\u00a0sub-property. You can do so as shown below.\n\n```graphql\n{\n  Get {\n    JeopardyQuestion (limit: 1) {\n      _additional {\n        id\n      }\n    }\n  }\n}\n```", "apiRefPath": "get-retrieve-object-id.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ARApplication\",\n\"description\": \"An augmented reality application or experience.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the AR application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Overview of the AR experience provided by the app.\"\n},\n{\n\"name\": \"platform\",\n\"dataType\": [\"text\"],\n\"description\": \"Platform the AR app is available on, e.g., iOS, Android.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"SoftwareCompany\"],\n\"description\": \"Company or developer that created the AR app.\"\n}{\n\"class\": \"SoftwareCompany\",\n\"description\": \"A company that develops software applications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was established.\"\n}}}", "schemaPath": "augmentedreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average waterVolume of Aquariums related to \"coral reef\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Aquarium(\n      nearText: {\n        concepts: [\"coral reef\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      waterVolume {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average waterVolume of Aquariums related to \"coral reef\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Aquarium\",\n\"description\": \"An aquarium containing fish.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarium.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the aquarium.\"\n},\n{\n\"name\": \"waterVolume\",\n\"dataType\": [\"number\"],\n\"description\": \"Water volume of the aquarium in liters.\"\n},\n{\n\"name\": \"hasMarineFish\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Does the aquarium have marine fish?\"\n},\n{\n\"name\": \"caretaker\",\n\"dataType\": [\"Aquarist\"],\n\"description\": \"Aquarist taking care of the aquarium.\"\n}{\n\"class\": \"Aquarist\",\n\"description\": \"A person who takes care of aquariums.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the aquarist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience as an aquarist.\"\n}}}", "schemaPath": "aquarium.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average yearIntroduced of Instruments related to \"Guitar\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Instrument(\n      nearText: {\n        concepts: [\"Guitar\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      yearIntroduced {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average yearIntroduced of Instruments related to \"Guitar\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average minPlayers of BoardGames about \"strategy\" and \"war\" with a maximum distance of 0.3. Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    BoardGame(\n      nearText: {\n        concepts: [\"strategy\", \"war\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      minPlayers {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average minPlayers of BoardGames about \"strategy\" and \"war\" with a maximum distance of 0.3. Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the total funding of Startups related to \"technology\" and \"innovation\" with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Startup(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.3\n      },\n      objectLimit: 10\n    ) {\n      funding {\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the total funding of Startups related to \"technology\" and \"innovation\" with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Startup\",\n\"description\": \"A tech startup company.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the startup.\"\n},\n{\n\"name\": \"product\",\n\"dataType\": [\"text\"],\n\"description\": \"Product or service offered.\"\n},\n{\n\"name\": \"funding\",\n\"dataType\": [\"number\"],\n\"description\": \"Funding received in USD.\"\n},\n{\n\"name\": \"isBootstrapped\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the startup bootstrapped?\"\n},\n{\n\"name\": \"founders\",\n\"dataType\": [\"Entrepreneur\"],\n\"description\": \"Founders of the startup.\"\n}{\n\"class\": \"Entrepreneur\",\n\"description\": \"An individual who starts businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the entrepreneur.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the entrepreneur.\"\n},\n{\n\"name\": \"successfulStartups\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of successful startups founded.\"\n}}}", "schemaPath": "startups.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many plants have a height greater than 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Plant(\n      where: {\n        path: [\"height\"],\n        operator: GreaterThan,\n        valueNumber: 50\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many plants have a height greater than 50.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"A plant in a garden.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"species\",\n\"dataType\": [\"text\"],\n\"description\": \"Species of the plant.\"\n},\n{\n\"name\": \"careInstructions\",\n\"dataType\": [\"text\"],\n\"description\": \"Instructions for care.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the plant in centimeters.\"\n},\n{\n\"name\": \"isFlowering\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the plant currently flowering?\"\n},\n{\n\"name\": \"plantedBy\",\n\"dataType\": [\"Gardener\"],\n\"description\": \"Gardener who planted the plant.\"\n}{\n\"class\": \"Gardener\",\n\"description\": \"A person who gardens.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gardener.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of gardening experience.\"\n}}}", "schemaPath": "gardening.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many PodClips have a clipNumber greater than 5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    PodClip(where: {\n      path: [\"clipNumber\"],\n      operator: GreaterThan,\n      valueInt: 5\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many PodClips have a clipNumber greater than 5.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PodClip\",\n\"description\": \"A podcast clip.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"An LLM-generated summary of the podcast clip.\"\n},\n{\n\"name\": \"content\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"speaker\",\n\"dataType\": [\"text\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The podcast number.\"\n},\n{\n\"name\": \"clipNumber\",\n\"dataType\": [\"int\"],\n\"description\": \"The clip number within the podcast.\"\n},\n{\n\"name\": \"Featured\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether this clip was featured individually on social media.\"\n},\n{\n\"name\": \"inPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this clip was sourced from.\"\n},\n{\n\"name\": \"inChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"The chapter this clip is associated with.\"\n}{\n\"class\": \"Podcast\",\n\"description\": \"A Weaviate Podcast!\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"The text content of the podcast clip\"\n},\n{\n\"name\": \"podNum\",\n\"dataType\": [\"int\"],\n\"description\": \"The speaker in the podcast\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip contained in the podcast\"\n},\n{\n\"name\": \"hasChapter\",\n\"dataType\": [\"Chapter\"],\n\"description\": \"A chapter contained in the podcast\"\n}{\n\"class\": \"Chapter\",\n\"description\": \"A Podcast Chapter\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the chapter\"\n},\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"timeStart\",\n\"dataType\": [\"int\"],\n\"description\": \"The timestamp where this chapter begins\"\n},\n{\n\"name\": \"timeEnd\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"The title of the chapter\"\n},\n{\n\"name\": \"fromPodcast\",\n\"dataType\": [\"Podcast\"],\n\"description\": \"The podcast this chapter was sourced from.\"\n},\n{\n\"name\": \"hasClip\",\n\"dataType\": [\"PodClip\"],\n\"description\": \"A clip associated with this chapter\"\n}}}", "schemaPath": "podcast.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many instruments were introduced after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Instrument(\n      where: {\n        path: [\"yearIntroduced\"],\n        operator: GreaterThan,\n        valueInt: 2000\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many instruments were introduced after the year 2000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Instrument\",\n\"description\": \"A musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instrument.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the instrument.\"\n},\n{\n\"name\": \"yearIntroduced\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the instrument was introduced.\"\n},\n{\n\"name\": \"isString\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is it a string instrument?\"\n},\n{\n\"name\": \"playedBy\",\n\"dataType\": [\"Musician\"],\n\"description\": \"Musicians who play this instrument.\"\n}{\n\"class\": \"Musician\",\n\"description\": \"An individual who plays a musical instrument.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the musician.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of music the musician specializes in.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in music.\"\n}}}", "schemaPath": "musicalinstrument.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many board games have a minimum number of players greater than 2.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    BoardGame(where: {\n      path: [\"minPlayers\"],\n      operator: GreaterThan,\n      valueInt: 2\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many board games have a minimum number of players greater than 2.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"BoardGame\",\n\"description\": \"A board game suitable for entertainment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the board game.\"\n},\n{\n\"name\": \"rules\",\n\"dataType\": [\"text\"],\n\"description\": \"Rules of the board game.\"\n},\n{\n\"name\": \"minPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Minimum number of players.\"\n},\n{\n\"name\": \"isCooperative\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the game cooperative?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"GameDesigner\"],\n\"description\": \"Designer of the board game.\"\n}{\n\"class\": \"GameDesigner\",\n\"description\": \"An individual who designs board games.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the game designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the game designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Years active in game designing.\"\n}}}", "schemaPath": "boardgame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many weather stations have an altitude greater than 1000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    WeatherStation(where: {\n      path: [\"altitude\"],\n      operator: GreaterThan,\n      valueNumber: 1000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many weather stations have an altitude greater than 1000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeatherStation\",\n\"description\": \"A weather monitoring station.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the weather station.\"\n},\n{\n\"name\": \"equipment\",\n\"dataType\": [\"text\"],\n\"description\": \"Equipment used for weather monitoring.\"\n},\n{\n\"name\": \"altitude\",\n\"dataType\": [\"number\"],\n\"description\": \"Altitude of the weather station.\"\n},\n{\n\"name\": \"isActive\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the station currently active?\"\n},\n{\n\"name\": \"managedBy\",\n\"dataType\": [\"Meteorologist\"],\n\"description\": \"Meteorologist managing the station.\"\n}{\n\"class\": \"Meteorologist\",\n\"description\": \"A person specialized in meteorology.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the meteorologist.\"\n},\n{\n\"name\": \"yearsExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience in meteorology.\"\n}}}", "schemaPath": "weatherstation.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many cars were manufactured after the year 2010.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Car(\n      where: {\n        path: [\"year\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many cars were manufactured after the year 2010.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car available for rent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car is currently available for rent.\"\n},\n{\n\"name\": \"rentedBy\",\n\"dataType\": [\"Customer\"],\n\"description\": \"The customer who has rented the car.\"\n}{\n\"class\": \"Customer\",\n\"description\": \"A customer of the car rental service.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the customer.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the customer.\"\n}}}", "schemaPath": "carrental.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many SmartDevices have a price greater than 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    SmartDevice(where: {\n      path: [\"price\"],\n      operator: GreaterThan,\n      valueNumber: 100\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many SmartDevices have a price greater than 100.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SmartDevice\",\n\"description\": \"A smart home device.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"deviceName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the smart device.\"\n},\n{\n\"name\": \"features\",\n\"dataType\": [\"text\"],\n\"description\": \"List of features.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the device.\"\n},\n{\n\"name\": \"isWireless\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the device is wireless.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"Manufacturer\"],\n\"description\": \"The manufacturer of the device.\"\n}{\n\"class\": \"Manufacturer\",\n\"description\": \"A manufacturer of smart home devices.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"manufacturerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the manufacturer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "smarthome.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many fashion brands were founded after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    FashionBrand(where: {\n      path: [\"foundingYear\"],\n      operator: GreaterThan,\n      valueInt: 2000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many fashion brands were founded after the year 2000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FashionBrand\",\n\"description\": \"A brand that produces fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the fashion brand.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the fashion brand.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the brand was founded.\"\n},\n{\n\"name\": \"isLuxury\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this a luxury brand?\"\n},\n{\n\"name\": \"designedBy\",\n\"dataType\": [\"Designer\"],\n\"description\": \"Designers associated with this brand.\"\n}{\n\"class\": \"Designer\",\n\"description\": \"An individual who designs fashion items.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the designer.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Biography of the designer.\"\n},\n{\n\"name\": \"yearsActive\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of active years in fashion.\"\n}}}", "schemaPath": "fashionbrand.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many CodeRepositories have more than 1000 stars.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CodeRepository(where: {\n      path: [\"stars\"],\n      operator: GreaterThan,\n      valueInt: 1000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many CodeRepositories have more than 1000 stars.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CodeRepository\",\n\"description\": \"Information about a code repository\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"repositoryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the code repository\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of what the repository contains or achieves\"\n},\n{\n\"name\": \"stars\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of stars the repository has received\"\n},\n{\n\"name\": \"isFork\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this repository is a fork of another repository\"\n},\n{\n\"name\": \"maintainedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"Developers who maintain this repository\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Developers who contribute to code repositories\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"username\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's username or handle\"\n},\n{\n\"name\": \"realName\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer's real name, if available\"\n},\n{\n\"name\": \"contributions\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of contributions the developer has made across repositories\"\n}}}", "schemaPath": "coderepos.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many games have a rating greater than 80.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Game(where: {\n      path: [\"rating\"],\n      operator: GreaterThan,\n      valueInt: 80\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many games have a rating greater than 80.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Game\",\n\"description\": \"A video game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the game.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"The genre of the game.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"int\"],\n\"description\": \"The ESRB rating score.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the game has multiplayer functionality.\"\n},\n{\n\"name\": \"developedBy\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer of the game.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"A video game developer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the developer.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the developer was founded.\"\n}}}", "schemaPath": "videogame.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many artworks were created after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Artwork(where: {\n      path: [\"yearCreated\"],\n      operator: GreaterThan,\n      valueInt: 2000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many artworks were created after the year 2000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Artwork\",\n\"description\": \"An artwork in a gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the artwork.\"\n},\n{\n\"name\": \"medium\",\n\"dataType\": [\"text\"],\n\"description\": \"Medium used for the artwork.\"\n},\n{\n\"name\": \"yearCreated\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the artwork was created.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the artwork sold?\"\n},\n{\n\"name\": \"createdBy\",\n\"dataType\": [\"Artist\"],\n\"description\": \"Artist who created the artwork.\"\n}{\n\"class\": \"Artist\",\n\"description\": \"An artist in the gallery.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the artist.\"\n},\n{\n\"name\": \"birthYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the artist was born.\"\n}}}", "schemaPath": "artgallery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many cars were manufactured after the year 2010.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Car(\n      where: {\n        path: [\"year\"],\n        operator: GreaterThan,\n        valueInt: 2010\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many cars were manufactured after the year 2010.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Car\",\n\"description\": \"A car in for repair.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"make\",\n\"dataType\": [\"text\"],\n\"description\": \"The make of the car.\"\n},\n{\n\"name\": \"model\",\n\"dataType\": [\"text\"],\n\"description\": \"The model of the car.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the car was made.\"\n},\n{\n\"name\": \"isRepaired\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the car has been repaired.\"\n},\n{\n\"name\": \"ownedBy\",\n\"dataType\": [\"Owner\"],\n\"description\": \"The owner of the car.\"\n}{\n\"class\": \"Owner\",\n\"description\": \"An owner of a car.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the car owner.\"\n},\n{\n\"name\": \"ownedCars\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of cars owned.\"\n}}}", "schemaPath": "automotiverepair.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many books have a pageCount greater than 200.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Book(where: {\n      path: [\"pageCount\"],\n      operator: GreaterThan,\n      valueInt: 200\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many books have a pageCount greater than 200.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Book\",\n\"description\": \"A book in the library.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The title of the book.\"\n},\n{\n\"name\": \"summary\",\n\"dataType\": [\"text\"],\n\"description\": \"A summary of the book.\"\n},\n{\n\"name\": \"pageCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of pages in the book.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Availability of the book in the library.\"\n},\n{\n\"name\": \"author\",\n\"dataType\": [\"Author\"],\n\"description\": \"The author of the book.\"\n}{\n\"class\": \"Author\",\n\"description\": \"An author of books.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the author.\"\n},\n{\n\"name\": \"age\",\n\"dataType\": [\"int\"],\n\"description\": \"The age of the author.\"\n}}}", "schemaPath": "books.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many cryptocurrencies have a marketCap greater than 1,000,000,000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Cryptocurrency(where: {\n      path: [\"marketCap\"],\n      operator: GreaterThan,\n      valueNumber: 1000000000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many cryptocurrencies have a marketCap greater than 1,000,000,000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Cryptocurrency\",\n\"description\": \"Information about a particular cryptocurrency\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the cryptocurrency\"\n},\n{\n\"name\": \"symbol\",\n\"dataType\": [\"text\"],\n\"description\": \"Symbol of the cryptocurrency\"\n},\n{\n\"name\": \"marketCap\",\n\"dataType\": [\"number\"],\n\"description\": \"Market capitalization in USD\"\n},\n{\n\"name\": \"isStableCoin\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if this is a stablecoin\"\n},\n{\n\"name\": \"onExchange\",\n\"dataType\": [\"Exchange\"],\n\"description\": \"Exchange where this cryptocurrency is traded\"\n}{\n\"class\": \"Exchange\",\n\"description\": \"Cryptocurrency exchange platforms\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the exchange\"\n},\n{\n\"name\": \"country\",\n\"dataType\": [\"text\"],\n\"description\": \"Country where the exchange is based\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the exchange was founded\"\n}}}", "schemaPath": "cryptocurrency.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many products have a price less than $10.99.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Product(\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 10.99\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many products have a price less than $10.99.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Product\",\n\"description\": \"A product available in the grocery store.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the product.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the product.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The price of the product.\"\n},\n{\n\"name\": \"isOrganic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is organic.\"\n},\n{\n\"name\": \"category\",\n\"dataType\": [\"Category\"],\n\"description\": \"The category of the product.\"\n}{\n\"class\": \"Category\",\n\"description\": \"A category of products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the category.\"\n},\n{\n\"name\": \"productCount\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of products in this category.\"\n}}}", "schemaPath": "grocerystore.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many museums were founded after the year 1800.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Museum(\n      where: {\n        path: [\"foundingYear\"],\n        operator: GreaterThan,\n        valueInt: 1800\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many museums were founded after the year 1800.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Museum\",\n\"description\": \"A place where art, history, or science is exhibited.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the museum.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the museum.\"\n},\n{\n\"name\": \"foundingYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the museum was founded.\"\n},\n{\n\"name\": \"isPublic\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the museum open to the public?\"\n},\n{\n\"name\": \"hasExhibit\",\n\"dataType\": [\"Exhibit\"],\n\"description\": \"Exhibits hosted by the museum.\"\n}{\n\"class\": \"Exhibit\",\n\"description\": \"A display or presentation in a museum.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the exhibit.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the exhibit.\"\n},\n{\n\"name\": \"year\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the exhibit was created.\"\n}}}", "schemaPath": "museum.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many teams have more than 10 wins.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Team(\n      where: {\n        path: [\"wins\"],\n        operator: GreaterThan,\n        valueInt: 10\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many teams have more than 10 wins.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Team\",\n\"description\": \"A sports team.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the team.\"\n},\n{\n\"name\": \"city\",\n\"dataType\": [\"text\"],\n\"description\": \"The city the team represents.\"\n},\n{\n\"name\": \"wins\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of wins.\"\n},\n{\n\"name\": \"isChampion\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the team has won a championship.\"\n},\n{\n\"name\": \"inLeague\",\n\"dataType\": [\"League\"],\n\"description\": \"The league to which the team belongs.\"\n}{\n\"class\": \"League\",\n\"description\": \"A sports league.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the league.\"\n},\n{\n\"name\": \"teams\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of teams in the league.\"\n}}}", "schemaPath": "sportsleague.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many coffee shops were founded before the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CoffeeShop(where: {\n      path: [\"yearFounded\"],\n      operator: LessThan,\n      valueInt: 2000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many coffee shops were founded before the year 2000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CoffeeShop\",\n\"description\": \"A venue that sells coffee.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the coffee shop.\"\n},\n{\n\"name\": \"menu\",\n\"dataType\": [\"text\"],\n\"description\": \"List of coffees and snacks available.\"\n},\n{\n\"name\": \"yearFounded\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the coffee shop was founded.\"\n},\n{\n\"name\": \"isFranchise\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is this coffee shop part of a franchise?\"\n},\n{\n\"name\": \"locatedIn\",\n\"dataType\": [\"Neighborhood\"],\n\"description\": \"The neighborhood where the coffee shop is located.\"\n}{\n\"class\": \"Neighborhood\",\n\"description\": \"A community within a larger city.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the neighborhood.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the neighborhood.\"\n},\n{\n\"name\": \"averageRent\",\n\"dataType\": [\"number\"],\n\"description\": \"Average monthly rent in USD.\"\n}}}", "schemaPath": "coffeeshop.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many houses have a price greater than $500,000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    House(\n      where: {\n        path: [\"price\"],\n        operator: GreaterThan,\n        valueNumber: 500000\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many houses have a price greater than $500,000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"House\",\n\"description\": \"A residential property.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"address\",\n\"dataType\": [\"text\"],\n\"description\": \"The address of the house.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A description of the house.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"The selling price of the house.\"\n},\n{\n\"name\": \"isSold\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the house has been sold.\"\n},\n{\n\"name\": \"listedBy\",\n\"dataType\": [\"Agent\"],\n\"description\": \"The agent who listed the house.\"\n}{\n\"class\": \"Agent\",\n\"description\": \"A real estate agent.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the agent.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"The number of years of experience the agent has.\"\n}}}", "schemaPath": "realestate.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many diet plans have a duration greater than 30 days.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    DietPlan(where: {\n      path: [\"durationDays\"],\n      operator: GreaterThan,\n      valueInt: 30\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many diet plans have a duration greater than 30 days.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"DietPlan\",\n\"description\": \"Information about different diet plans\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the diet plan\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Detailed description of the diet plan\"\n},\n{\n\"name\": \"durationDays\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the diet plan in days\"\n},\n{\n\"name\": \"isVegetarian\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the diet plan is vegetarian\"\n},\n{\n\"name\": \"contains\",\n\"dataType\": [\"FoodItem\"],\n\"description\": \"List of food items in the diet plan\"\n}{\n\"class\": \"FoodItem\",\n\"description\": \"Information about food items\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food item\"\n},\n{\n\"name\": \"calories\",\n\"dataType\": [\"int\"],\n\"description\": \"Calories per serving\"\n}}}", "schemaPath": "dietplan.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many Craft Beers have an alcohol content greater than 5.0.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CraftBeer(where: {\n      path: [\"alcoholContent\"],\n      operator: GreaterThan,\n      valueNumber: 5.0\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many Craft Beers have an alcohol content greater than 5.0.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CraftBeer\",\n\"description\": \"A craft beer.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"beerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the beer.\"\n},\n{\n\"name\": \"tastingNotes\",\n\"dataType\": [\"text\"],\n\"description\": \"Notes about the taste of the beer.\"\n},\n{\n\"name\": \"alcoholContent\",\n\"dataType\": [\"number\"],\n\"description\": \"Alcohol content in percentage.\"\n},\n{\n\"name\": \"isSeasonal\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the beer is seasonal.\"\n},\n{\n\"name\": \"brewery\",\n\"dataType\": [\"Brewery\"],\n\"description\": \"The brewery that produces this beer.\"\n}{\n\"class\": \"Brewery\",\n\"description\": \"A brewery that produces craft beers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"breweryName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the brewery.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the brewery was founded.\"\n}}}", "schemaPath": "craftbeer.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many courses have a price less than 100.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Course(\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 100\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many courses have a price less than 100.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Course\",\n\"description\": \"An online course.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Title of the course.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description of the course.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the course.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the course free?\"\n},\n{\n\"name\": \"taughtBy\",\n\"dataType\": [\"Instructor\"],\n\"description\": \"The instructor of the course.\"\n}{\n\"class\": \"Instructor\",\n\"description\": \"An instructor.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the instructor.\"\n},\n{\n\"name\": \"yearsOfExperience\",\n\"dataType\": [\"int\"],\n\"description\": \"Years of experience.\"\n}}}", "schemaPath": "onlinecourse.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many job listings have a salary greater than $50,000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    JobListing(where: {\n      path: [\"salary\"],\n      operator: GreaterThan,\n      valueNumber: 50000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many job listings have a salary greater than $50,000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JobListing\",\n\"description\": \"A job listing on the portal.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"The job title.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A detailed description of the job.\"\n},\n{\n\"name\": \"salary\",\n\"dataType\": [\"number\"],\n\"description\": \"The salary offered for the job.\"\n},\n{\n\"name\": \"isRemote\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the job is remote.\"\n},\n{\n\"name\": \"postedBy\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company that posted the job listing.\"\n}{\n\"class\": \"Company\",\n\"description\": \"A company that posts job listings.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the company was founded.\"\n}}}", "schemaPath": "joblistings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many programming languages were released after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    ProgrammingLanguage(where: {\n      path: [\"yearReleased\"],\n      operator: GreaterThan,\n      valueInt: 2000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many programming languages were released after the year 2000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"ProgrammingLanguage\",\n\"description\": \"Information about programming languages\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the programming language\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Description and history of the programming language\"\n},\n{\n\"name\": \"yearReleased\",\n\"dataType\": [\"int\"],\n\"description\": \"Year of release\"\n},\n{\n\"name\": \"isCompiled\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the language is compiled or interpreted\"\n},\n{\n\"name\": \"usedIn\",\n\"dataType\": [\"SoftwareProject\"],\n\"description\": \"Software projects that use this language\"\n}{\n\"class\": \"SoftwareProject\",\n\"description\": \"Software projects\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"projectName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the software project\"\n},\n{\n\"name\": \"repositoryURL\",\n\"dataType\": [\"text\"],\n\"description\": \"URL of the source code repository\"\n},\n{\n\"name\": \"linesOfCode\",\n\"dataType\": [\"int\"],\n\"description\": \"Lines of code in the project\"\n}}}", "schemaPath": "programminglanguage.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of Toys that are similar to \"Action Figure\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Toy(\n      nearText: {\n        concepts: [\"animals in space\"],\n        distance: 0.3\n      },\n      objectLimit: 10\n    ) {\n      price {\n        sum\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of Toys that are similar to \"Action Figure\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average height of Rollercoasters that are \"fast thrilling\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Rollercoaster(\n      nearText: {\n        concepts: [\"fast thrilling\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      height {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average height of Rollercoasters that are \"fast thrilling\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average price of JewelryItems that are similar to a \"diamond necklace\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    JewelryItem(\n      nearText: {\n        concepts: [\"diamond necklace\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      price {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average price of JewelryItems that are similar to a \"diamond necklace\" with a maximum distance of 0.3? Please limit the results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}\n\n    COMMAND:\n    ```text\nWhat is the average rate of Freelancers specializing in web development with a maximum distance of 0.3? Please limit results to the top 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Freelancer(\n      nearText: {\n        concepts: [\"web development\"],\n        distance: 0.3\n      },\n      objectLimit: 50\n    ) {\n      rate {\n        mean\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nWhat is the average rate of Freelancers specializing in web development with a maximum distance of 0.3? Please limit results to the top 50.\n```", "apiRef": "With nearXXX\n\nWhen using a similarity search operator (i.e. nearXXX) with Aggregate, you should include a way to limit the search results. This is because a vector search in itself does not exclude any objects from the results set - all objects have some degree of similarity to the query.\n\nThus, for the vector search to affect the Aggregate output, you must set a limit on:\n\nThe number of results returned (with limit), or\nHow similar the results are to the query (with distance).\nSet an object limit\nYou can set the objectLimit argument to specify the maximum number of results to be aggregated.\n\nThe below query retrieves the 10 question objects with vectors that are closest to \"animals in space\", and return the sum total of the point property.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(\n      nearText: {\n        concepts: [\"animals in space\"]\n      },\n      objectLimit: 10\n    ) {\n      points {\n        sum\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-nearText-with-limit.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Freelancer\",\n\"description\": \"An individual who offers their professional services independently.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"freelancerName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the freelancer.\"\n},\n{\n\"name\": \"skills\",\n\"dataType\": [\"text\"],\n\"description\": \"List of skills or services offered by the freelancer.\"\n},\n{\n\"name\": \"rate\",\n\"dataType\": [\"float\"],\n\"description\": \"The hourly or per-project rate charged by the freelancer.\"\n},\n{\n\"name\": \"portfolio\",\n\"dataType\": [\"text\"],\n\"description\": \"Link to portfolio or examples of past work.\"\n},\n{\n\"name\": \"clientReviews\",\n\"dataType\": [\"ClientReview\"],\n\"description\": \"Reviews provided by past clients.\"\n}{\n\"class\": \"ClientReview\",\n\"description\": \"A review or feedback provided by a client for the freelancer's services.\",\n\"properties\": [\n{\n\"name\": \"clientName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the client.\"\n},\n{\n\"name\": \"reviewText\",\n\"dataType\": [\"text\"],\n\"description\": \"Feedback or review text provided by the client.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"float\"],\n\"description\": \"Rating given by the client on a scale of 1 to 5.\"\n}}}", "schemaPath": "freelancers.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many cosmetic products are vegan.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    CosmeticProduct(where: {\n      path: [\"isVegan\"],\n      operator: Equal,\n      valueBoolean: true\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many cosmetic products are vegan.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"CosmeticProduct\",\n\"description\": \"A product intended to enhance or beautify the appearance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"productName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the cosmetic product.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"Brand\"],\n\"description\": \"The brand producing the cosmetic product.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"The type of cosmetic product (e.g., lipstick, foundation).\"\n},\n{\n\"name\": \"shade\",\n\"dataType\": [\"text\"],\n\"description\": \"The shade or color of the product.\"\n},\n{\n\"name\": \"ingredients\",\n\"dataType\": [\"text[]\"],\n\"description\": \"List of ingredients used in the product.\"\n},\n{\n\"name\": \"isVegan\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the product is vegan-friendly.\"\n}{\n\"class\": \"Brand\",\n\"description\": \"A company producing cosmetic products.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"brandName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the brand.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year when the brand was established.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the brand's headquarters.\"\n}}}", "schemaPath": "cosmetics.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many plants are endangered.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Plant(\n      where: {\n        path: [\"isEndangered\"],\n        operator: Equal,\n        valueBoolean: true\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many plants are endangered.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Plant\",\n\"description\": \"Various plant species and their characteristics.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"commonName\",\n\"dataType\": [\"text\"],\n\"description\": \"Common name of the plant.\"\n},\n{\n\"name\": \"scientificName\",\n\"dataType\": [\"text\"],\n\"description\": \"Scientific name of the plant.\"\n},\n{\n\"name\": \"habitat\",\n\"dataType\": [\"text\"],\n\"description\": \"Habitat where the plant is commonly found.\"\n},\n{\n\"name\": \"growthHabit\",\n\"dataType\": [\"text\"],\n\"description\": \"Growth habit like shrub, tree, herb, etc.\"\n},\n{\n\"name\": \"isEndangered\",\n\"dataType\": [\"boolean\"],\n\"description\": \"If the plant is endangered or not.\"\n},\n{\n\"name\": \"fertilizerNeeds\",\n\"dataType\": [\"Fertilizer\"],\n\"description\": \"Types of fertilizers suitable for the plant.\"\n}{\n\"class\": \"Fertilizer\",\n\"description\": \"Different types of fertilizers for plants.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the fertilizer.\"\n},\n{\n\"name\": \"applicationFrequency\",\n\"dataType\": [\"int\"],\n\"description\": \"How often the fertilizer should be applied.\"\n}}}", "schemaPath": "plants.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many Mobile Apps have a rating greater than 4.5.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    MobileApp(where: {\n      path: [\"rating\"],\n      operator: GreaterThan,\n      valueNumber: 4.5\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many Mobile Apps have a rating greater than 4.5.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"MobileApp\",\n\"description\": \"Mobile applications and their details.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"appName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the mobile application.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the app.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"text\"],\n\"description\": \"Developer or company that created the app.\"\n},\n{\n\"name\": \"rating\",\n\"dataType\": [\"number\"],\n\"description\": \"Average user rating of the app.\"\n},\n{\n\"name\": \"isFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the app is free or paid.\"\n},\n{\n\"name\": \"supportedOS\",\n\"dataType\": [\"OperatingSystem\"],\n\"description\": \"Operating systems that support the app.\"\n}{\n\"class\": \"OperatingSystem\",\n\"description\": \"Mobile operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version of the operating system.\"\n}}}", "schemaPath": "mobileapplications.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many Home Appliances have an energy rating greater than 4.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    HomeAppliance(where: {\n      path: [\"energyRating\"],\n      operator: GreaterThan,\n      valueInt: 4\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many Home Appliances have an energy rating greater than 4.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"HomeAppliance\",\n\"description\": \"A device or piece of equipment designed to perform specific household tasks.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"applianceName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the home appliance.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"Brand or manufacturer of the appliance.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of the appliance (e.g., refrigerator, microwave).\"\n},\n{\n\"name\": \"energyRating\",\n\"dataType\": [\"int\"],\n\"description\": \"Energy efficiency rating for the appliance.\"\n},\n{\n\"name\": \"isSmartDevice\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the appliance can be controlled via smart technologies.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the appliance.\"\n},\n{\n\"name\": \"warranty\",\n\"dataType\": [\"Warranty\"],\n\"description\": \"Warranty details for the appliance.\"\n}{\n\"class\": \"Warranty\",\n\"description\": \"Warranty details for a product.\",\n\"properties\": [\n{\n\"name\": \"duration\",\n\"dataType\": [\"int\"],\n\"description\": \"Duration of the warranty in months.\"\n},\n{\n\"name\": \"coverage\",\n\"dataType\": [\"text\"],\n\"description\": \"Details on what is covered under the warranty.\"\n}}}", "schemaPath": "homeappliances.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many VRExperiences were released after 2010.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    VRExperience(where: {\n      path: [\"releaseYear\"],\n      operator: GreaterThan,\n      valueInt: 2010\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many VRExperiences were released after 2010.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"VRExperience\",\n\"description\": \"A virtual reality experience or game.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"title\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the VR experience.\"\n},\n{\n\"name\": \"developer\",\n\"dataType\": [\"Developer\"],\n\"description\": \"The developer or studio that produced the experience.\"\n},\n{\n\"name\": \"genre\",\n\"dataType\": [\"text\"],\n\"description\": \"Genre of the VR experience.\"\n},\n{\n\"name\": \"releaseYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the experience was released.\"\n},\n{\n\"name\": \"isMultiplayer\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether it supports multiplayer mode.\"\n}{\n\"class\": \"Developer\",\n\"description\": \"Information about VR developers.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the developer or studio.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the studio or developer was founded.\"\n}}}", "schemaPath": "virtualreality.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many toys have a price less than 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Toy(\n      where: {\n        path: [\"price\"],\n        operator: LessThan,\n        valueNumber: 50\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many toys have a price less than 50.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Toy\",\n\"description\": \"An object for children to play with.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"toyName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the toy.\"\n},\n{\n\"name\": \"brand\",\n\"dataType\": [\"text\"],\n\"description\": \"The brand or manufacturer of the toy.\"\n},\n{\n\"name\": \"recommendedAge\",\n\"dataType\": [\"int\"],\n\"description\": \"The recommended age for using the toy.\"\n},\n{\n\"name\": \"isBatteryOperated\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the toy requires batteries.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the toy.\"\n},\n{\n\"name\": \"relatedGame\",\n\"dataType\": [\"BoardGame\"],\n\"description\": \"Related board game, if applicable.\"\n}{\n\"class\": \"BoardGame\",\n\"description\": \"A game that involves counters or pieces being placed on a board.\",\n\"properties\": [\n{\n\"name\": \"gameName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the board game.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the game.\"\n},\n{\n\"name\": \"numberOfPlayers\",\n\"dataType\": [\"int\"],\n\"description\": \"Recommended number of players for the game.\"\n}}}", "schemaPath": "toys.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many rollercoasters have a height greater than 50.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Rollercoaster(where: {\n      path: [\"height\"],\n      operator: GreaterThan,\n      valueNumber: 50\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many rollercoasters have a height greater than 50.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Rollercoaster\",\n\"description\": \"A rollercoaster in an amusement park.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the rollercoaster.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description or tagline of the rollercoaster.\"\n},\n{\n\"name\": \"height\",\n\"dataType\": [\"number\"],\n\"description\": \"Height of the rollercoaster in meters.\"\n},\n{\n\"name\": \"isOperating\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Is the rollercoaster currently operational?\"\n},\n{\n\"name\": \"park\",\n\"dataType\": [\"AmusementPark\"],\n\"description\": \"The amusement park where the rollercoaster is located.\"\n}{\n\"class\": \"AmusementPark\",\n\"description\": \"An amusement park with various attractions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the amusement park.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the amusement park.\"\n}}}", "schemaPath": "rollercoasters.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many boats have a capacity greater than 10.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    Boat(\n      where: {\n        path: [\"capacity\"],\n        operator: GreaterThan,\n        valueInt: 10\n      }\n    ){\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many boats have a capacity greater than 10.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"Boat\",\n\"description\": \"Different types of boats and their specifications.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"boatName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or model of the boat.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of the boat like sailboat, yacht, etc.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Maximum number of passengers the boat can carry.\"\n},\n{\n\"name\": \"isMotorized\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the boat is motorized or not.\"\n},\n{\n\"name\": \"manufacturer\",\n\"dataType\": [\"BoatManufacturer\"],\n\"description\": \"The manufacturer or company that produced the boat.\"\n}{\n\"class\": \"BoatManufacturer\",\n\"description\": \"Companies that manufacture boats.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the boat manufacturing company.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "boats.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many PotteryItems are vases.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    PotteryItem(where: {\n      path: [\"type\"],\n      operator: Equal,\n      valueText: \"vase\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many PotteryItems are vases.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"PotteryItem\",\n\"description\": \"Details about various pottery items, designs, and creations.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"itemName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the pottery item.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"A brief description of the pottery item, its design, and features.\"\n},\n{\n\"name\": \"type\",\n\"dataType\": [\"text\"],\n\"description\": \"Type or category of pottery, e.g., vase, plate, bowl.\"\n},\n{\n\"name\": \"dateCreated\",\n\"dataType\": [\"dateTime\"],\n\"description\": \"The date when the pottery item was created.\"\n},\n{\n\"name\": \"craftsman\",\n\"dataType\": [\"Potter\"],\n\"description\": \"The potter or artist who crafted the item.\"\n}{\n\"class\": \"Potter\",\n\"description\": \"Details about individual potters or ceramic artists.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"potterName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the potter or ceramic artist.\"\n},\n{\n\"name\": \"biography\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief biography or background of the potter, detailing their style, influences, and notable works.\"\n},\n{\n\"name\": \"studioLocation\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the potter's studio or place of work.\"\n}}}", "schemaPath": "pottery.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many national parks were established after the year 2000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    NationalPark(where: {\n      path: [\"establishedYear\"],\n      operator: GreaterThan,\n      valueInt: 2000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many national parks were established after the year 2000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"NationalPark\",\n\"description\": \"Protected area of natural significance.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"parkName\",\n\"dataType\": [\"text\"],\n\"description\": \"The name of the national park.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description about the park and its significance.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"The geographic location of the park.\"\n},\n{\n\"name\": \"establishedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"The year the park was officially established.\"\n},\n{\n\"name\": \"isEntryFree\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether there's an entry fee for the park.\"\n},\n{\n\"name\": \"wildlife\",\n\"dataType\": [\"text\"],\n\"description\": \"Notable wildlife that can be spotted in the park.\"\n},\n{\n\"name\": \"facilities\",\n\"dataType\": [\"Facility\"],\n\"description\": \"Facilities available at the park.\"\n}{\n\"class\": \"Facility\",\n\"description\": \"A facility available in a national park.\",\n\"properties\": [\n{\n\"name\": \"facilityName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the facility.\"\n},\n{\n\"name\": \"description\",\n\"dataType\": [\"text\"],\n\"description\": \"Brief description of the facility.\"\n}}}", "schemaPath": "nationalparks.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many wedding venues have a capacity greater than 200.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    WeddingVenue(where: {\n      path: [\"capacity\"],\n      operator: GreaterThan,\n      valueInt: 200\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many wedding venues have a capacity greater than 200.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"WeddingVenue\",\n\"description\": \"Details about a wedding venue.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the wedding venue.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Location or address of the venue.\"\n},\n{\n\"name\": \"capacity\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of people the venue can accommodate.\"\n},\n{\n\"name\": \"hasIndoorFacility\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the venue offers indoor facilities.\"\n},\n{\n\"name\": \"vendors\",\n\"dataType\": [\"Vendor\"],\n\"description\": \"List of vendors associated with the venue.\"\n}{\n\"class\": \"Vendor\",\n\"description\": \"Details about vendors offering various wedding services.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"vendorName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the vendor.\"\n},\n{\n\"name\": \"serviceType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of service offered, e.g., catering, photography, decor.\"\n},\n{\n\"name\": \"yearsInBusiness\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of years the vendor has been in business.\"\n},\n{\n\"name\": \"offersDiscount\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the vendor offers any discount.\"\n}{\n\"class\": \"Planner\",\n\"description\": \"Details about wedding planners.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"plannerName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the wedding planner.\"\n},\n{\n\"name\": \"experience\",\n\"dataType\": [\"int\"],\n\"description\": \"Number of weddings planned by the individual or company.\"\n},\n{\n\"name\": \"isAvailable\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the planner is available for booking.\"\n}{\n\"class\": \"Ceremony\",\n\"description\": \"Details about different wedding ceremonies and traditions.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"ceremonyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or type of the ceremony or tradition.\"\n},\n{\n\"name\": \"origin\",\n\"dataType\": [\"text\"],\n\"description\": \"Cultural or regional origin of the ceremony.\"\n},\n{\n\"name\": \"durationMinutes\",\n\"dataType\": [\"int\"],\n\"description\": \"Typical duration of the ceremony in minutes.\"\n},\n{\n\"name\": \"requiresSpecialVenue\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Whether the ceremony requires a specific type of venue.\"\n}}}", "schemaPath": "weddings.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many jewelry items have a price greater than 1000.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    JewelryItem(where: {\n      path: [\"price\"],\n      operator: GreaterThan,\n      valueNumber: 1000\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many jewelry items have a price greater than 1000.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"JewelryItem\",\n\"description\": \"An item of personal adornment.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name or title of the jewelry item.\"\n},\n{\n\"name\": \"material\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary material used, e.g., gold, silver, platinum.\"\n},\n{\n\"name\": \"gemstone\",\n\"dataType\": [\"Gemstone\"],\n\"description\": \"Gemstone present in the jewelry.\"\n},\n{\n\"name\": \"price\",\n\"dataType\": [\"number\"],\n\"description\": \"Price of the jewelry item.\"\n},\n{\n\"name\": \"isHandmade\",\n\"dataType\": [\"boolean\"],\n\"description\": \"Indicates if the item is handmade.\"\n}{\n\"class\": \"Gemstone\",\n\"description\": \"A gemstone used in jewelry.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"name\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the gemstone, e.g., diamond, ruby.\"\n},\n{\n\"name\": \"hardness\",\n\"dataType\": [\"number\"],\n\"description\": \"Hardness of the gemstone on Mohs scale.\"\n}}}", "schemaPath": "jewelry.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many Operating Systems have a version equal to \"Windows 10\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    OperatingSystem(where: {\n      path: [\"version\"],\n      operator: Equal,\n      valueText: \"Windows 10\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many Operating Systems have a version equal to \"Windows 10\".\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"OperatingSystem\",\n\"description\": \"Details about various computer operating systems.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"osName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the operating system.\"\n},\n{\n\"name\": \"version\",\n\"dataType\": [\"text\"],\n\"description\": \"Version or release number.\"\n},\n{\n\"name\": \"supportedDevices\",\n\"dataType\": [\"text\"],\n\"description\": \"Types of devices the OS supports, e.g., desktop, mobile, server.\"\n},\n{\n\"name\": \"parentCompany\",\n\"dataType\": [\"Company\"],\n\"description\": \"The company or entity that developed the OS.\"\n}{\n\"class\": \"Company\",\n\"description\": \"Details about tech companies or entities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"companyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the company or entity.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the company was founded.\"\n}}}", "schemaPath": "operatingsystem.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many space missions were launched after 2010.\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    SpaceMission(where: {\n      path: [\"launchYear\"],\n      operator: GreaterThan,\n      valueInt: 2010\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many space missions were launched after 2010.\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"SpaceMission\",\n\"description\": \"A mission to explore outer space.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"missionName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space mission.\"\n},\n{\n\"name\": \"objective\",\n\"dataType\": [\"text\"],\n\"description\": \"Primary objective or goal of the mission.\"\n},\n{\n\"name\": \"launchYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the mission was launched.\"\n},\n{\n\"name\": \"missionStatus\",\n\"dataType\": [\"text\"],\n\"description\": \"Current status, e.g., ongoing, completed.\"\n},\n{\n\"name\": \"spaceAgency\",\n\"dataType\": [\"SpaceAgency\"],\n\"description\": \"Space agency responsible for the mission.\"\n}{\n\"class\": \"SpaceAgency\",\n\"description\": \"Organizations responsible for space exploration activities.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"agencyName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the space agency.\"\n},\n{\n\"name\": \"foundedYear\",\n\"dataType\": [\"int\"],\n\"description\": \"Year the agency was founded.\"\n},\n{\n\"name\": \"headquarters\",\n\"dataType\": [\"text\"],\n\"description\": \"Location of the agency's headquarters.\"\n}}}", "schemaPath": "spaceexploration.json"}
{"input": "\n    Your task is to write an API request for a custom database schema based on the API reference provided.\n\n    For guidance on how to correctly format this API request, consult the API reference here:\n    Note: Please only use the API reference to understand the syntax of the request. Make sure your request is compliant with it.\n    Here are some quick notes about the API syntax:\n    - All queries should start with either `Get` or `Aggregate`. A common mistake is to begin the API request with `query`, please do not make this mistake.\n    - All queries should begin with an open curly bracket, `{`\n\n    CUSTOM SCHEMA:\n    {\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}\n\n    COMMAND:\n    ```text\nShow me how many food trucks have a cuisine type equal to \"Mexican\".\n```\n\n    API Request:\n    ", "output": "```graphql\n{\n  Aggregate {\n    FoodTruck(where: {\n      path: [\"cuisineType\"],\n      operator: Equal,\n      valueText: \"Mexican\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "nlcommand": "```text\nShow me how many food trucks have a cuisine type equal to \"Mexican\".\n```", "apiRef": "Add a conditional (where) filter\nYou can add a conditional filter to any aggregate search query, which will filter the results set.\n\nThe below example searches for objects where the round property equals Double Jeopardy! and returns the object count.\n\n```graphql\n{\n  Aggregate {\n    JeopardyQuestion(where: {\n      path: [\"round\"],\n      operator: Equal,\n      valueText: \"Final Jeopardy!\"\n    }) {\n      meta {\n        count\n      }\n    }\n  }\n}\n```", "apiRefPath": "aggregate-with-where.txt", "schema": "{\n\"classes\": [\n{\n\"class\": \"FoodTruck\",\n\"description\": \"Details about food trucks and their specialties.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"truckName\",\n\"dataType\": [\"text\"],\n\"description\": \"Name of the food truck.\"\n},\n{\n\"name\": \"cuisineType\",\n\"dataType\": [\"text\"],\n\"description\": \"Type of cuisine or dishes served by the truck.\"\n},\n{\n\"name\": \"location\",\n\"dataType\": [\"text\"],\n\"description\": \"Current or common location where the truck is stationed.\"\n},\n{\n\"name\": \"owner\",\n\"dataType\": [\"FoodEntrepreneur\"],\n\"description\": \"Owner or operator of the food truck.\"\n}{\n\"class\": \"FoodEntrepreneur\",\n\"description\": \"Details about individuals who own or operate food businesses.\",\n\"vectorIndexType\": \"hnsw\",\n\"vectorizer\": \"text2vec-transformers\",\n\"properties\": [\n{\n\"name\": \"entrepreneurName\",\n\"dataType\": [\"text\"],\n\"description\": \"Full name of the food entrepreneur.\"\n},\n{\n\"name\": \"otherVentures\",\n\"dataType\": [\"text\"],\n\"description\": \"Other food ventures or businesses owned by the entrepreneur.\"\n}}}", "schemaPath": "foodtrucks.json"}
